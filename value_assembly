	.cstring
LC0:
	.ascii "MissingArg\0"
LC1:
	.ascii "UnknownType\0"
LC2:
	.ascii "Error\0"
LC3:
	.ascii "Nil\0"
LC4:
	.ascii "Boolean\0"
LC5:
	.ascii "Integer\0"
LC6:
	.ascii "Float\0"
LC7:
	.ascii "String\0"
LC8:
	.ascii "Regex\0"
LC9:
	.ascii "Symbol\0"
LC10:
	.ascii "Array\0"
LC11:
	.ascii "List\0"
LC12:
	.ascii "Hash\0"
LC13:
	.ascii "Tree\0"
LC14:
	.ascii "Pointer\0"
LC15:
	.ascii "Range\0"
LC16:
	.ascii "Block\0"
LC17:
	.ascii "NaN\0"
LC18:
	.ascii "Infinity\0"
LC19:
	.ascii "Id\0"
LC20:
	.ascii "Variable\0"
LC21:
	.ascii "Stop\0"
LC22:
	.ascii "Spec\0"
LC23:
	.ascii "Primitive\0"
LC24:
	.ascii "Function\0"
LC25:
	.ascii "FunctionShell\0"
LC26:
	.ascii "Type\0"
	.text
	.align 4,0x90
.globl _type_to_string
_type_to_string:
LFB76:
	pushq	%rbp
LCFI0:
	movq	%rsp, %rbp
LCFI1:
	leal	1(%rdi), %eax
	cmpl	$42, %eax
	jbe	L33
L2:
	leaq	LC1(%rip), %rax
	leave
	ret
	.align 4,0x90
L33:
	mov	%eax, %eax
	leaq	L29(%rip), %rdx
	movslq	(%rdx,%rax,4),%rax
	addq	%rdx, %rax
	jmp	*%rax
	.align 2,0x90
L29:
	.long	L3-L29
	.long	L4-L29
	.long	L5-L29
	.long	L6-L29
	.long	L7-L29
	.long	L8-L29
	.long	L2-L29
	.long	L2-L29
	.long	L2-L29
	.long	L2-L29
	.long	L2-L29
	.long	L9-L29
	.long	L10-L29
	.long	L11-L29
	.long	L12-L29
	.long	L13-L29
	.long	L14-L29
	.long	L15-L29
	.long	L16-L29
	.long	L17-L29
	.long	L18-L29
	.long	L19-L29
	.long	L20-L29
	.long	L21-L29
	.long	L22-L29
	.long	L23-L29
	.long	L24-L29
	.long	L2-L29
	.long	L2-L29
	.long	L2-L29
	.long	L2-L29
	.long	L25-L29
	.long	L26-L29
	.long	L27-L29
	.long	L2-L29
	.long	L2-L29
	.long	L2-L29
	.long	L2-L29
	.long	L2-L29
	.long	L2-L29
	.long	L2-L29
	.long	L2-L29
	.long	L28-L29
L28:
	leaq	LC0(%rip), %rax
	leave
	ret
L27:
	leaq	LC25(%rip), %rax
	leave
	ret
L26:
	leaq	LC24(%rip), %rax
	leave
	ret
L25:
	leaq	LC23(%rip), %rax
	leave
	ret
L24:
	leaq	LC21(%rip), %rax
	leave
	ret
L23:
	leaq	LC16(%rip), %rax
	leave
	ret
L22:
	leaq	LC15(%rip), %rax
	leave
	ret
L21:
	leaq	LC14(%rip), %rax
	leave
	ret
L20:
	leaq	LC13(%rip), %rax
	leave
	ret
L19:
	leaq	LC12(%rip), %rax
	leave
	ret
L18:
	leaq	LC11(%rip), %rax
	leave
	ret
L17:
	leaq	LC10(%rip), %rax
	leave
	ret
L16:
	leaq	LC9(%rip), %rax
	leave
	ret
L15:
	leaq	LC8(%rip), %rax
	leave
	ret
L14:
	leaq	LC20(%rip), %rax
	leave
	ret
L13:
	leaq	LC19(%rip), %rax
	leave
	ret
L12:
	leaq	LC7(%rip), %rax
	leave
	ret
L11:
	leaq	LC6(%rip), %rax
	leave
	ret
L10:
	leaq	LC5(%rip), %rax
	leave
	ret
L9:
	leaq	LC4(%rip), %rax
	leave
	ret
L8:
	leaq	LC22(%rip), %rax
	leave
	ret
L7:
	leaq	LC26(%rip), %rax
	leave
	ret
L6:
	leaq	LC18(%rip), %rax
	leave
	ret
L5:
	leaq	LC17(%rip), %rax
	leave
	ret
L4:
	leaq	LC3(%rip), %rax
	leave
	ret
L3:
	leaq	LC2(%rip), %rax
	leave
	ret
LFE76:
	.align 4,0x90
.globl _value_init_nil
_value_init_nil:
LFB79:
	pushq	%rbp
LCFI2:
	movq	%rsp, %rbp
LCFI3:
	movb	$0, (%rdi)
	movq	%rdi, %rax
	leave
	ret
LFE79:
	.align 4,0x90
.globl _value_init_nil_type
_value_init_nil_type:
LFB80:
	pushq	%rbp
LCFI4:
	movq	%rsp, %rbp
LCFI5:
	movl	%esi, 8(%rdi)
	movb	$0, (%rdi)
	movq	%rdi, %rax
	leave
	ret
LFE80:
	.align 4,0x90
.globl _value_init_error
_value_init_error:
LFB81:
	pushq	%rbp
LCFI6:
	movq	%rsp, %rbp
LCFI7:
	movb	$-1, (%rdi)
	movq	%rdi, %rax
	leave
	ret
LFE81:
	.align 4,0x90
.globl _value_set_bool
_value_set_bool:
LFB85:
	pushq	%rbp
LCFI8:
	movq	%rsp, %rbp
LCFI9:
	xorl	%eax, %eax
	testl	%esi, %esi
	setne	%al
	movl	%eax, 8(%rdi)
	movb	$10, (%rdi)
	movq	%rdi, %rax
	leave
	ret
LFE85:
	.align 4,0x90
.globl _value_type
_value_type:
LFB108:
	pushq	%rbp
LCFI10:
	movq	%rsp, %rbp
LCFI11:
	movsbl	16(%rbp),%eax
	movl	%eax, 8(%rdi)
	movb	$3, (%rdi)
	movq	%rdi, %rax
	leave
	ret
LFE108:
	.align 4,0x90
.globl _value_refer
_value_refer:
LFB124:
	pushq	%rbp
LCFI12:
	movq	%rsp, %rbp
LCFI13:
	movq	%rsi, 8(%rdi)
	movb	$22, (%rdi)
	movq	%rdi, %rax
	leave
	ret
LFE124:
	.align 4,0x90
.globl _value_true_p
_value_true_p:
LFB110:
	pushq	%rbp
LCFI14:
	movq	%rsp, %rbp
LCFI15:
	subq	$80, %rsp
LCFI16:
	movzbl	16(%rbp), %eax
	incl	%eax
	cmpb	$24, %al
	jbe	L58
L50:
	movl	$1, %eax
	leave
	ret
	.align 4,0x90
L58:
	movzbl	%al, %eax
	leaq	L55(%rip), %rdx
	movslq	(%rdx,%rax,4),%rax
	addq	%rdx, %rax
	jmp	*%rax
	.align 2,0x90
L55:
	.long	L51-L55
	.long	L51-L55
	.long	L50-L55
	.long	L50-L55
	.long	L50-L55
	.long	L50-L55
	.long	L50-L55
	.long	L50-L55
	.long	L50-L55
	.long	L50-L55
	.long	L50-L55
	.long	L52-L55
	.long	L53-L55
	.long	L53-L55
	.long	L54-L55
	.long	L50-L55
	.long	L50-L55
	.long	L50-L55
	.long	L50-L55
	.long	L54-L55
	.long	L54-L55
	.long	L54-L55
	.long	L54-L55
	.long	L50-L55
	.long	L54-L55
L54:
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_empty_p
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	leave
	ret
L53:
	movq	_value_zero@GOTPCREL(%rip), %rdx
	movq	(%rdx), %rax
	movq	%rax, 40(%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 48(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 56(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 64(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 72(%rsp)
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_ne
	leave
	ret
L52:
	movl	24(%rbp), %eax
	leave
	ret
L51:
	xorl	%eax, %eax
	leave
	ret
LFE110:
	.align 4,0x90
.globl _value_array_arg
_value_array_arg:
LFB96:
	pushq	%rbp
LCFI17:
	movq	%rsp, %rbp
LCFI18:
	pushq	%rbx
LCFI19:
	subq	$8, %rsp
LCFI20:
	movq	%rdi, %rbx
	movq	%rdx, %rax
	movslq	%esi,%rdx
	movq	%rax, %rsi
	call	_value_set_ary
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	leave
	ret
LFE96:
	.align 4,0x90
.globl _value_hash_arg
_value_hash_arg:
LFB98:
	pushq	%rbp
LCFI21:
	movq	%rsp, %rbp
LCFI22:
	pushq	%r15
LCFI23:
	pushq	%r14
LCFI24:
	pushq	%r13
LCFI25:
	pushq	%r12
LCFI26:
	pushq	%rbx
LCFI27:
	subq	$152, %rsp
LCFI28:
	movq	%rdi, %r15
	movl	%esi, %r13d
	movq	%rdx, %rbx
	leaq	-96(%rbp), %rax
	movq	%rax, -104(%rbp)
	movslq	%esi,%rsi
	movq	%rax, %rdi
	call	_value_hash_init_capacity
	leal	-1(%r13), %r14d
	testl	%r14d, %r14d
	jle	L62
	xorl	%r12d, %r12d
	jmp	L64
	.align 4,0x90
L65:
	addl	$2, %r12d
	addq	$80, %rbx
	cmpl	%r14d, %r12d
	jge	L62
L64:
	leal	1(%r12), %eax
	cmpl	%eax, %r13d
	jle	L65
	movq	40(%rbx), %rax
	movq	%rax, 40(%rsp)
	movq	48(%rbx), %rax
	movq	%rax, 48(%rsp)
	movq	56(%rbx), %rax
	movq	%rax, 56(%rsp)
	movq	64(%rbx), %rax
	movq	%rax, 64(%rsp)
	movq	72(%rbx), %rax
	movq	%rax, 72(%rsp)
	movq	(%rbx), %rax
	movq	%rax, (%rsp)
	movq	8(%rbx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rbx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rbx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rbx), %rax
	movq	%rax, 32(%rsp)
	movq	-104(%rbp), %rdi
	call	_value_hash_put
	addl	$2, %r12d
	addq	$80, %rbx
	cmpl	%r14d, %r12d
	jl	L64
L62:
	movq	-96(%rbp), %rax
	movq	%rax, (%r15)
	movq	-88(%rbp), %rax
	movq	%rax, 8(%r15)
	movq	-80(%rbp), %rax
	movq	%rax, 16(%r15)
	movq	-72(%rbp), %rax
	movq	%rax, 24(%r15)
	movq	-64(%rbp), %rax
	movq	%rax, 32(%r15)
	movq	%r15, %rax
	addq	$152, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
LFE98:
	.align 4,0x90
.globl _value_array_id_index
_value_array_id_index:
LFB77:
	pushq	%rbp
LCFI29:
	movq	%rsp, %rbp
LCFI30:
	pushq	%r14
LCFI31:
	pushq	%r13
LCFI32:
	pushq	%r12
LCFI33:
	pushq	%rbx
LCFI34:
	movl	%esi, %r13d
	movq	%rdx, %r14
	testl	%esi, %esi
	jle	L70
	movq	%rdi, %rbx
	xorl	%r12d, %r12d
	jmp	L72
	.align 4,0x90
L73:
	incl	%r12d
	addq	$40, %rbx
	cmpl	%r13d, %r12d
	je	L70
L72:
	cmpb	$14, (%rbx)
	jne	L73
	movq	8(%rbx), %rdi
	movq	%r14, %rsi
	call	_strcmp
	testl	%eax, %eax
	jne	L73
	movl	%r12d, %eax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L70:
	movl	$-1, %r12d
	movl	%r12d, %eax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
LFE77:
	.align 4,0x90
.globl _value_set_double
_value_set_double:
LFB88:
	pushq	%rbp
LCFI35:
	movq	%rsp, %rbp
LCFI36:
	pushq	%r12
LCFI37:
	pushq	%rbx
LCFI38:
	subq	$64, %rsp
LCFI39:
	movq	%rdi, %rbx
	movsd	%xmm0, -72(%rbp)
	movb	$12, -64(%rbp)
	leaq	-56(%rbp), %r12
	movq	%r12, %rdi
	call	_mpfr_init
	xorl	%esi, %esi
	movsd	-72(%rbp), %xmm0
	movq	%r12, %rdi
	call	_mpfr_set_d
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	leave
	ret
LFE88:
	.align 4,0x90
.globl _value_set_ulong
_value_set_ulong:
LFB87:
	pushq	%rbp
LCFI40:
	movq	%rsp, %rbp
LCFI41:
	pushq	%rbx
LCFI42:
	subq	$56, %rsp
LCFI43:
	movq	%rdi, %rbx
	movb	$11, -64(%rbp)
	leaq	-56(%rbp), %rdi
	call	___gmpz_init_set_ui
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	leave
	ret
LFE87:
	.align 4,0x90
.globl _value_set_long
_value_set_long:
LFB86:
	pushq	%rbp
LCFI44:
	movq	%rsp, %rbp
LCFI45:
	pushq	%rbx
LCFI46:
	subq	$56, %rsp
LCFI47:
	movq	%rdi, %rbx
	movb	$11, -64(%rbp)
	leaq	-56(%rbp), %rdi
	call	___gmpz_init_set_si
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	leave
	ret
LFE86:
	.align 4,0x90
.globl _value_list_arg
_value_list_arg:
LFB97:
	pushq	%rbp
LCFI48:
	movq	%rsp, %rbp
LCFI49:
	pushq	%r15
LCFI50:
	pushq	%r14
LCFI51:
	pushq	%r13
LCFI52:
	pushq	%r12
LCFI53:
	pushq	%rbx
LCFI54:
	subq	$152, %rsp
LCFI55:
	movq	%rdi, %r14
	movl	%esi, %r13d
	movb	$0, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	%esi, %eax
	decl	%eax
	js	L85
	cltq
	leaq	(%rax,%rax,4), %rax
	leaq	(%rdx,%rax,8), %rbx
	xorl	%r12d, %r12d
	leaq	-96(%rbp), %r15
	.align 4,0x90
L87:
	movq	(%rbx), %rax
	movq	%rax, (%rsp)
	movq	8(%rbx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rbx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rbx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rbx), %rax
	movq	%rax, 32(%rsp)
	movq	%r15, %rdi
	call	_value_cons_now
	incl	%r12d
	subq	$40, %rbx
	cmpl	%r13d, %r12d
	jne	L87
L85:
	movq	-96(%rbp), %rax
	movq	%rax, (%r14)
	movq	-88(%rbp), %rax
	movq	%rax, 8(%r14)
	movq	-80(%rbp), %rax
	movq	%rax, 16(%r14)
	movq	-72(%rbp), %rax
	movq	%rax, 24(%r14)
	movq	-64(%rbp), %rax
	movq	%rax, 32(%r14)
	movq	%r14, %rax
	addq	$152, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
LFE97:
	.cstring
LC27:
	.ascii "in\0"
LC28:
	.ascii "dotimes\0"
LC29:
	.ascii "if\0"
LC30:
	.ascii "GenericError\0"
LC31:
	.ascii "RuntimeError\0"
LC32:
	.ascii "ArgumentError\0"
	.text
	.align 4,0x90
.globl _init_values
_init_values:
LFB74:
	pushq	%rbp
LCFI56:
	movq	%rsp, %rbp
LCFI57:
	pushq	%r13
LCFI58:
	pushq	%r12
LCFI59:
	pushq	%rbx
LCFI60:
	subq	$344, %rsp
LCFI61:
	xorl	%edi, %edi
	call	_mpfr_set_default_rounding_mode
	movq	_default_prec@GOTPCREL(%rip), %rax
	movq	$53, (%rax)
	movl	$53, %edi
	call	_mpfr_set_default_prec
	movb	$11, -80(%rbp)
	leaq	-72(%rbp), %rdi
	movabsq	$-9223372036854775808, %rsi
	call	___gmpz_init_set_si
	movq	-80(%rbp), %r8
	movq	%r8, -128(%rbp)
	movq	-72(%rbp), %rdi
	movq	%rdi, -120(%rbp)
	movq	-64(%rbp), %rsi
	movq	%rsi, -112(%rbp)
	movq	-56(%rbp), %rcx
	movq	%rcx, -104(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rdx, -96(%rbp)
	movq	_value_long_min@GOTPCREL(%rip), %rax
	movq	%r8, (%rax)
	movq	%rdi, 8(%rax)
	movq	%rsi, 16(%rax)
	movq	%rcx, 24(%rax)
	movq	%rdx, 32(%rax)
	movb	$11, -176(%rbp)
	leaq	-168(%rbp), %rdi
	xorl	%esi, %esi
	call	___gmpz_init_set_si
	movq	-176(%rbp), %r8
	movq	%r8, -224(%rbp)
	movq	-168(%rbp), %rdi
	movq	%rdi, -216(%rbp)
	movq	-160(%rbp), %rsi
	movq	%rsi, -208(%rbp)
	movq	-152(%rbp), %rcx
	movq	%rcx, -200(%rbp)
	movq	-144(%rbp), %rdx
	movq	%rdx, -192(%rbp)
	movq	_value_zero@GOTPCREL(%rip), %rax
	movq	%r8, (%rax)
	movq	%rdi, 8(%rax)
	movq	%rsi, 16(%rax)
	movq	%rcx, 24(%rax)
	movq	%rdx, 32(%rax)
	movb	$11, -272(%rbp)
	leaq	-264(%rbp), %rdi
	movabsq	$9223372036854775807, %rsi
	call	___gmpz_init_set_si
	movq	-272(%rbp), %r8
	movq	%r8, -320(%rbp)
	movq	-264(%rbp), %rdi
	movq	%rdi, -312(%rbp)
	movq	-256(%rbp), %rsi
	movq	%rsi, -304(%rbp)
	movq	-248(%rbp), %rcx
	movq	%rcx, -296(%rbp)
	movq	-240(%rbp), %rdx
	movq	%rdx, -288(%rbp)
	movq	_value_long_max@GOTPCREL(%rip), %rax
	movq	%r8, (%rax)
	movq	%rdi, 8(%rax)
	movq	%rsi, 16(%rax)
	movq	%rcx, 24(%rax)
	movq	%rdx, 32(%rax)
	movq	_value_symbol_in@GOTPCREL(%rip), %rbx
	leaq	-368(%rbp), %r13
	leaq	LC27(%rip), %rsi
	movq	%r13, %rdi
	call	_value_set_symbol
	movq	-368(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-360(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-352(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-344(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-336(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	_value_symbol_dotimes@GOTPCREL(%rip), %rbx
	leaq	LC28(%rip), %rsi
	movq	%r13, %rdi
	call	_value_set_symbol
	movq	-368(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-360(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-352(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-344(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-336(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	_value_symbol_if@GOTPCREL(%rip), %rbx
	leaq	LC29(%rip), %rsi
	movq	%r13, %rdi
	call	_value_set_symbol
	movq	-368(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-360(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-352(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-344(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-336(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	_value_nil_function_spec@GOTPCREL(%rip), %rax
	movb	$0, (%rax)
	andb	$-16, 1(%rax)
	movl	$0, 4(%rax)
	movl	$2147483647, 8(%rax)
	andb	$-16, 12(%rax)
	movb	$0, 13(%rax)
	movl	$0, 16(%rax)
	movq	_generic_error@GOTPCREL(%rip), %rbx
	leaq	LC30(%rip), %rdx
	xorl	%esi, %esi
	movq	%r13, %rdi
	call	_exception_init
	movq	-368(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-360(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-352(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-344(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	_runtime_error@GOTPCREL(%rip), %r12
	leaq	LC31(%rip), %rdx
	movq	%rbx, %rsi
	movq	%r13, %rdi
	call	_exception_init
	movq	-368(%rbp), %rax
	movq	%rax, (%r12)
	movq	-360(%rbp), %rax
	movq	%rax, 8(%r12)
	movq	-352(%rbp), %rax
	movq	%rax, 16(%r12)
	movq	-344(%rbp), %rax
	movq	%rax, 24(%r12)
	movq	_argument_error@GOTPCREL(%rip), %rbx
	leaq	LC32(%rip), %rdx
	movq	%r12, %rsi
	movq	%r13, %rdi
	call	_exception_init
	movq	-368(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-360(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-352(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-344(%rbp), %rax
	movq	%rax, 24(%rbx)
	xorl	%eax, %eax
	addq	$344, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	leave
	ret
LFE74:
	.cstring
	.align 3
LC33:
	.ascii "Error: In format string, undefined specifier %s.\0"
LC34:
	.ascii "%ld\0"
LC35:
	.ascii "e%s\0"
LC36:
	.ascii "'%s'\0"
LC37:
	.ascii ":%s\0"
LC38:
	.ascii "%s)\0"
	.align 3
LC39:
	.ascii "Spec [ needs variables? %d, keep arg? %d, delay eval? %d, argc %d, optional %d, rest? %d, associativity %c, precedence %d ]\0"
	.text
	.align 4,0x90
.globl _value_put
_value_put:
LFB133:
	pushq	%rbp
LCFI62:
	movq	%rsp, %rbp
LCFI63:
	pushq	%r15
LCFI64:
	pushq	%r14
LCFI65:
	pushq	%r13
LCFI66:
	pushq	%r12
LCFI67:
	pushq	%rbx
LCFI68:
	subq	$328, %rsp
LCFI69:
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movq	%rdx, %rbx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rdx
	movq	%rdx, -56(%rbp)
	xorl	%edx, %edx
	testq	%rsi, %rsi
	je	L93
	movb	$0, (%rdi)
	decq	%rsi
	movq	%rsi, -272(%rbp)
	testq	%rbx, %rbx
	je	L414
	movzbl	(%rbx), %r15d
	movsbl	%r15b,%eax
	cmpl	$255, %eax
	jbe	L415
L98:
	movq	%rbx, %rdi
L106:
	movl	$10, %r13d
	cmpb	$46, %r15b
	je	L416
L109:
	leal	-98(%r15), %edx
	cmpb	$22, %dl
	jbe	L417
L115:
	movb	%r15b, -176(%rbp)
	movb	$0, -175(%rbp)
	leaq	-176(%rbp), %rdx
	leaq	LC33(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movl	$-2, %eax
	jmp	L119
L435:
	movl	24(%rbp), %eax
	incl	%eax
	cmpl	$42, %eax
	jbe	L418
L277:
	leaq	LC1(%rip), %rbx
L305:
	movq	%rbx, %rdi
	call	_strlen
	movq	-288(%rbp), %rdx
	incq	%rdx
	cmpq	%rdx, %rax
	jbe	L412
	.align 4,0x90
L93:
	movl	$-1, %eax
L119:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	-56(%rbp), %rdx
	xorq	(%rdi), %rdx
	jne	L419
	addq	$328, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
	.align 4,0x90
L415:
	movq	__DefaultRuneLocale@GOTPCREL(%rip), %rsi
	cltq
	testb	$4, 61(%rsi,%rax,4)
	je	L98
	leaq	1(%rbx), %rdi
	movzbl	1(%rbx), %r15d
	movsbl	%r15b,%eax
	cmpl	$255, %eax
	ja	L101
	cltq
	movq	$0, -272(%rbp)
	testb	$4, 61(%rsi,%rax,4)
	jne	L104
	jmp	L101
	.align 4,0x90
L403:
	cltq
	testb	$4, 61(%rsi,%rax,4)
	je	L106
L104:
	movq	-272(%rbp), %rcx
	leaq	(%rcx,%rcx,4), %rdx
	movsbq	%r15b,%rax
	leaq	-48(%rax,%rdx,2), %rdx
	movq	%rdx, -272(%rbp)
	incq	%rdi
	movzbl	(%rdi), %r15d
	movsbl	%r15b,%eax
	cmpl	$255, %eax
	jbe	L403
	jmp	L106
	.align 4,0x90
L417:
	movl	$1, %eax
	movl	%edx, %ecx
	salq	%cl, %rax
	testl	$5709833, %eax
	je	L115
	movl	$2, %r14d
	cmpb	$98, %r15b
	je	L97
	movl	$8, %r14d
	cmpb	$111, %r15b
	je	L97
	movb	$16, %r14b
	cmpb	$120, %r15b
	je	L97
	movb	$10, %r14b
	cmpb	$116, %r15b
	jne	L97
	movb	$115, (%rdi)
	.align 4,0x90
L97:
	movzbl	16(%rbp), %edx
	testb	%dl, %dl
	jne	L126
	leal	-114(%r15), %eax
	cmpb	$2, %al
	jbe	L420
L128:
	cmpb	$114, %r15b
	je	L333
	cmpb	$116, %r15b
	je	L333
L331:
	movq	-280(%rbp), %rcx
	movq	-272(%rbp), %rsi
	movb	$0, (%rcx,%rsi)
	xorl	%eax, %eax
	jmp	L119
	.align 4,0x90
L126:
	cmpb	$10, %dl
	je	L421
	cmpb	$11, %dl
	je	L422
	cmpb	$12, %dl
	je	L423
	cmpb	$13, %dl
	je	L424
	cmpb	$16, %dl
	je	L425
	cmpb	$17, %dl
	je	L426
	cmpb	$18, %dl
	je	L427
	cmpb	$19, %dl
	je	L428
	cmpb	$20, %dl
	je	L429
	cmpb	$23, %dl
	je	L430
	cmpb	$22, %dl
	je	L431
	cmpb	$24, %dl
	je	L432
	cmpb	$1, %dl
	je	L433
	cmpb	$2, %dl
	je	L434
	cmpb	$3, %dl
	je	L435
	cmpb	$14, %dl
	je	L436
	cmpb	$15, %dl
	je	L437
	cmpb	$4, %dl
	je	L438
	cmpb	$30, %dl
	je	L439
	leal	-31(%rdx), %eax
	cmpb	$1, %al
	jbe	L440
	incb	%dl
	je	L441
	movq	-288(%rbp), %rax
	incq	%rax
	cmpq	$6, %rax
	jbe	L93
	movq	-280(%rbp), %rdi
	movabsq	$31093567915781749, %rax
	movq	%rax, (%rdi)
	jmp	L128
L424:
	leal	-114(%r15), %eax
	cmpb	$2, %al
	ja	L166
	movq	24(%rbp), %r12
	decq	%r12
	movq	-280(%rbp), %rdi
	movb	$34, (%rdi)
	movl	$1, %ebx
	.align 4,0x90
L413:
	incq	%r12
	movzbl	(%r12), %ecx
	testb	%cl, %cl
	je	L442
L169:
	cmpq	-288(%rbp), %rbx
	jae	L93
	movsbl	%cl,%edi
	testl	$-128, %edi
	jne	L171
	movslq	%edi,%rdx
	movq	__DefaultRuneLocale@GOTPCREL(%rip), %rax
	mov	60(%rax,%rdx,4), %eax
	shrq	$18, %rax
	andl	$1, %eax
L173:
	testl	%eax, %eax
	je	L174
	movq	-280(%rbp), %rax
	movb	%cl, (%rbx,%rax)
	incq	%rbx
	incq	%r12
	movzbl	(%r12), %ecx
	testb	%cl, %cl
	jne	L169
L442:
	cmpq	-288(%rbp), %rbx
	jae	L93
	movq	-280(%rbp), %rdi
	movb	$34, (%rbx,%rdi)
	leaq	1(%rbx), %rax
	cmpq	%rax, -288(%rbp)
	jbe	L93
	movb	$0, (%rdi,%rax)
	jmp	L128
	.align 4,0x90
L174:
	cmpb	$10, %cl
	je	L177
	cmpb	$13, %cl
	je	L178
	cmpb	$9, %cl
	jne	L413
	movq	-280(%rbp), %rsi
	movb	$92, (%rbx,%rsi)
	leaq	1(%rbx), %rax
	cmpq	%rax, -288(%rbp)
	jbe	L93
	movb	$116, 1(%rbx,%rsi)
	addq	$2, %rbx
	jmp	L413
	.align 4,0x90
L171:
	movl	$262144, %esi
	call	___maskrune
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movzbl	(%r12), %ecx
	jmp	L173
L178:
	movq	-280(%rbp), %rcx
	movb	$92, (%rbx,%rcx)
	leaq	1(%rbx), %rax
	cmpq	%rax, -288(%rbp)
	jbe	L93
	movb	$114, 1(%rbx,%rcx)
	addq	$2, %rbx
	jmp	L413
	.align 4,0x90
L177:
	movq	-280(%rbp), %rdx
	movb	$92, (%rbx,%rdx)
	leaq	1(%rbx), %rax
	cmpq	%rax, -288(%rbp)
	jbe	L93
	movb	$110, 1(%rbx,%rdx)
	addq	$2, %rbx
	jmp	L413
L416:
	incq	%rdi
	movzbl	(%rdi), %r15d
	movsbl	%r15b,%eax
	cmpl	$255, %eax
	ja	L110
	movq	__DefaultRuneLocale@GOTPCREL(%rip), %rsi
	cltq
	andq	$0xffffffffffffff00, %r13
	testb	$4, 61(%rsi,%rax,4)
	jne	L113
	jmp	L110
	.align 4,0x90
L404:
	cltq
	testb	$4, 61(%rsi,%rax,4)
	je	L109
L113:
	leaq	(%r13,%r13,4), %rdx
	movsbq	%r15b,%rax
	leaq	-48(%rax,%rdx,2), %r13
	incq	%rdi
	movzbl	(%rdi), %r15d
	movsbl	%r15b,%eax
	cmpl	$255, %eax
	jbe	L404
	jmp	L109
L414:
	movl	$10, %r14d
	movl	$115, %r15d
	movl	$10, %r13d
	jmp	L97
L421:
	movl	24(%rbp), %r8d
	testl	%r8d, %r8d
	je	L133
	cmpq	$4, -288(%rbp)
	jbe	L93
	movq	-280(%rbp), %rdi
	movl	$1702195828, (%rdi)
	movb	$0, 4(%rdi)
	jmp	L128
L133:
	cmpq	$5, -288(%rbp)
	jbe	L93
	movq	-280(%rbp), %rax
	movl	$1936482662, (%rax)
	movw	$101, 4(%rax)
	jmp	L128
L441:
	movq	-288(%rbp), %rax
	incq	%rax
	cmpq	$4, %rax
	jbe	L93
	movq	-280(%rbp), %rsi
	movl	$1869771365, (%rsi)
	movw	$114, 4(%rsi)
	jmp	L128
L425:
	leal	-114(%r15), %eax
	cmpb	$2, %al
	ja	L188
	movq	24(%rbp), %rbx
	movq	%rbx, %rdi
	call	_strlen
	addq	$3, %rax
	cmpq	%rax, -288(%rbp)
	jb	L93
	movq	%rbx, %rdx
	leaq	LC36(%rip), %rsi
	movq	-280(%rbp), %rdi
	xorl	%eax, %eax
	call	_sprintf
	jmp	L128
L188:
	movq	24(%rbp), %rbx
	movq	%rbx, %rdi
	call	_strlen
	incq	%rax
	cmpq	%rax, -288(%rbp)
	jb	L93
L412:
	movq	%rbx, %rsi
	movq	-280(%rbp), %rdi
	call	_strcpy
	jmp	L128
L419:
	call	___stack_chk_fail
L440:
	movq	24(%rbp), %rax
	movq	(%rax), %r12
	testq	%r12, %r12
	jne	L443
L323:
	leal	-114(%r15), %eax
	cmpb	$2, %al
	ja	L128
	movq	-280(%rbp), %rdi
	call	_strlen
	movq	-288(%rbp), %rsi
	subq	%rax, %rsi
	movq	-280(%rbp), %rdi
	addq	%rax, %rdi
	movq	24(%rbp), %rdx
	movq	32(%rdx), %rax
	movq	%rax, (%rsp)
	movq	40(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	48(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	56(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	64(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdx
	call	_value_put
	testl	%eax, %eax
	je	L128
	jmp	L93
	.align 4,0x90
L110:
	xorl	%r13d, %r13d
	jmp	L109
L439:
	movq	16(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	_primitive_names@GOTPCREL(%rip), %rdx
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	movq	%rax, %rdx
	testq	%rax, %rax
	je	L444
	movq	(%rax), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdx
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rdi
	call	_value_put
	testl	%eax, %eax
	je	L128
	jmp	L119
L420:
	cmpq	$3, -288(%rbp)
	jbe	L93
	movq	-280(%rbp), %rsi
	movl	$7104878, (%rsi)
	jmp	L128
L101:
	movq	$0, -272(%rbp)
	jmp	L106
	.align 4,0x90
L333:
	movq	-280(%rbp), %rdi
	call	_strlen
	movq	-280(%rbp), %rdx
	leaq	(%rax,%rdx), %r12
	movzbl	16(%rbp), %ebx
	leal	1(%rbx), %eax
	cmpb	$42, %al
	jbe	L445
L334:
	leaq	LC1(%rip), %rdi
L362:
	movq	%r12, %rax
	subq	-280(%rbp), %rax
	subq	%rax, -288(%rbp)
	call	_strlen
	cmpq	%rax, -288(%rbp)
	jbe	L93
	leal	1(%rbx), %eax
	cmpb	$42, %al
	jbe	L446
L364:
	leaq	LC1(%rip), %rdx
L392:
	leaq	LC37(%rip), %rsi
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	_sprintf
	jmp	L331
L445:
	movzbl	%al, %eax
	leaq	L361(%rip), %rdx
	movslq	(%rdx,%rax,4),%rax
	addq	%rdx, %rax
	jmp	*%rax
	.align 2,0x90
L361:
	.long	L335-L361
	.long	L336-L361
	.long	L337-L361
	.long	L338-L361
	.long	L339-L361
	.long	L340-L361
	.long	L334-L361
	.long	L334-L361
	.long	L334-L361
	.long	L334-L361
	.long	L334-L361
	.long	L341-L361
	.long	L342-L361
	.long	L343-L361
	.long	L344-L361
	.long	L345-L361
	.long	L346-L361
	.long	L347-L361
	.long	L348-L361
	.long	L349-L361
	.long	L350-L361
	.long	L351-L361
	.long	L352-L361
	.long	L353-L361
	.long	L354-L361
	.long	L355-L361
	.long	L356-L361
	.long	L334-L361
	.long	L334-L361
	.long	L334-L361
	.long	L334-L361
	.long	L357-L361
	.long	L358-L361
	.long	L359-L361
	.long	L334-L361
	.long	L334-L361
	.long	L334-L361
	.long	L334-L361
	.long	L334-L361
	.long	L334-L361
	.long	L334-L361
	.long	L334-L361
	.long	L360-L361
L360:
	leaq	LC0(%rip), %rdi
	jmp	L362
L359:
	leaq	LC25(%rip), %rdi
	jmp	L362
L358:
	leaq	LC24(%rip), %rdi
	jmp	L362
L357:
	leaq	LC23(%rip), %rdi
	jmp	L362
L356:
	leaq	LC21(%rip), %rdi
	jmp	L362
L355:
	leaq	LC16(%rip), %rdi
	jmp	L362
L354:
	leaq	LC15(%rip), %rdi
	jmp	L362
L353:
	leaq	LC14(%rip), %rdi
	jmp	L362
L352:
	leaq	LC13(%rip), %rdi
	jmp	L362
L351:
	leaq	LC12(%rip), %rdi
	jmp	L362
L350:
	leaq	LC11(%rip), %rdi
	jmp	L362
L349:
	leaq	LC10(%rip), %rdi
	jmp	L362
L348:
	leaq	LC9(%rip), %rdi
	jmp	L362
L347:
	leaq	LC8(%rip), %rdi
	jmp	L362
L346:
	leaq	LC20(%rip), %rdi
	jmp	L362
L345:
	leaq	LC19(%rip), %rdi
	jmp	L362
L344:
	leaq	LC7(%rip), %rdi
	jmp	L362
L343:
	leaq	LC6(%rip), %rdi
	jmp	L362
L342:
	leaq	LC5(%rip), %rdi
	jmp	L362
L341:
	leaq	LC4(%rip), %rdi
	jmp	L362
L340:
	leaq	LC22(%rip), %rdi
	jmp	L362
L339:
	leaq	LC26(%rip), %rdi
	jmp	L362
L338:
	leaq	LC18(%rip), %rdi
	jmp	L362
L337:
	leaq	LC17(%rip), %rdi
	jmp	L362
L336:
	leaq	LC3(%rip), %rdi
	jmp	L362
L335:
	leaq	LC2(%rip), %rdi
	jmp	L362
	.align 4,0x90
L423:
	cmpq	$7, -288(%rbp)
	jbe	L93
	cmpb	$101, %r15b
	je	L143
	leaq	-176(%rbp), %rbx
	movq	%rbx, %rdi
	call	___gmpz_init
	leaq	24(%rbp), %rsi
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	_mpfr_get_z
	movl	%r14d, %esi
	movq	%rbx, %rdi
	call	___gmpz_sizeinbase
	movq	%rax, %r12
	movq	%rbx, %rdi
	call	___gmpz_clear
	cmpq	%r12, -288(%rbp)
	jb	L93
L143:
	leaq	1(%r13), %rbx
	leaq	3(%r13), %rax
	movq	-288(%rbp), %rdx
	subq	$3, %rdx
	cmpq	%rax, -288(%rbp)
	cmovb	%rdx, %rbx
	movl	$8, %esi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, %r12
	movl	$-3, %eax
	testq	%r12, %r12
	je	L119
	xorl	%r9d, %r9d
	leaq	24(%rbp), %r8
	movq	%rbx, %rcx
	movl	%r14d, %edx
	movq	%r12, %rsi
	movq	-280(%rbp), %rdi
	call	_mpfr_get_str
	testq	%rax, %rax
	je	L447
	movq	-280(%rbp), %rdi
	call	_strlen
	movq	%rax, %rbx
	cmpb	$101, %r15b
	je	L448
	movq	(%r12), %rcx
	cmpq	%rcx, %rax
	jle	L161
	movq	-280(%rbp), %rdx
	addq	%rcx, %rdx
	movl	$46, %esi
L163:
	movzbl	(%rdx), %eax
	movb	%sil, (%rdx)
	incq	%rcx
	incq	%rdx
	movl	%eax, %esi
	cmpq	%rcx, %rbx
	jne	L163
L161:
	movq	%r12, %rdi
	call	_free
	jmp	L128
L446:
	movzbl	%al, %eax
	leaq	L391(%rip), %rdx
	movslq	(%rdx,%rax,4),%rax
	addq	%rdx, %rax
	jmp	*%rax
	.align 2,0x90
L391:
	.long	L365-L391
	.long	L366-L391
	.long	L367-L391
	.long	L368-L391
	.long	L369-L391
	.long	L370-L391
	.long	L364-L391
	.long	L364-L391
	.long	L364-L391
	.long	L364-L391
	.long	L364-L391
	.long	L371-L391
	.long	L372-L391
	.long	L373-L391
	.long	L374-L391
	.long	L375-L391
	.long	L376-L391
	.long	L377-L391
	.long	L378-L391
	.long	L379-L391
	.long	L380-L391
	.long	L381-L391
	.long	L382-L391
	.long	L383-L391
	.long	L384-L391
	.long	L385-L391
	.long	L386-L391
	.long	L364-L391
	.long	L364-L391
	.long	L364-L391
	.long	L364-L391
	.long	L387-L391
	.long	L388-L391
	.long	L389-L391
	.long	L364-L391
	.long	L364-L391
	.long	L364-L391
	.long	L364-L391
	.long	L364-L391
	.long	L364-L391
	.long	L364-L391
	.long	L364-L391
	.long	L390-L391
L390:
	leaq	LC0(%rip), %rdx
	jmp	L392
L389:
	leaq	LC25(%rip), %rdx
	jmp	L392
L388:
	leaq	LC24(%rip), %rdx
	jmp	L392
L387:
	leaq	LC23(%rip), %rdx
	jmp	L392
L386:
	leaq	LC21(%rip), %rdx
	jmp	L392
L385:
	leaq	LC16(%rip), %rdx
	jmp	L392
L384:
	leaq	LC15(%rip), %rdx
	jmp	L392
L383:
	leaq	LC14(%rip), %rdx
	jmp	L392
L382:
	leaq	LC13(%rip), %rdx
	jmp	L392
L381:
	leaq	LC12(%rip), %rdx
	jmp	L392
L380:
	leaq	LC11(%rip), %rdx
	jmp	L392
L379:
	leaq	LC10(%rip), %rdx
	jmp	L392
L378:
	leaq	LC9(%rip), %rdx
	jmp	L392
L377:
	leaq	LC8(%rip), %rdx
	jmp	L392
L376:
	leaq	LC20(%rip), %rdx
	jmp	L392
L375:
	leaq	LC19(%rip), %rdx
	jmp	L392
L374:
	leaq	LC7(%rip), %rdx
	jmp	L392
L373:
	leaq	LC6(%rip), %rdx
	jmp	L392
L372:
	leaq	LC5(%rip), %rdx
	jmp	L392
L371:
	leaq	LC4(%rip), %rdx
	jmp	L392
L370:
	leaq	LC22(%rip), %rdx
	jmp	L392
L369:
	leaq	LC26(%rip), %rdx
	jmp	L392
L368:
	leaq	LC18(%rip), %rdx
	jmp	L392
L367:
	leaq	LC17(%rip), %rdx
	jmp	L392
L366:
	leaq	LC3(%rip), %rdx
	jmp	L392
L365:
	leaq	LC2(%rip), %rdx
	jmp	L392
	.align 4,0x90
L444:
	movq	-280(%rbp), %rcx
	movabsq	$31093567915781749, %rdx
	movq	%rdx, (%rcx)
	jmp	L128
L427:
	cmpq	$7, -288(%rbp)
	jbe	L93
	movq	-280(%rbp), %rax
	movl	$1920098600, (%rax)
	movw	$31073, 4(%rax)
	movb	$0, 6(%rax)
	movq	%rax, %rdi
	call	_strlen
	movq	-280(%rbp), %rdx
	addq	%rax, %rdx
	movq	-288(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, %rax
	cmpq	$0, 32(%rbp)
	je	L198
	movq	$0, -264(%rbp)
	xorl	%r13d, %r13d
	cmpq	$2, %rcx
	ja	L201
	jmp	L93
	.align 4,0x90
L202:
	addq	$40, %r13
	cmpq	$2, %rax
	jbe	L93
L201:
	movb	$32, (%rdx)
	leaq	1(%rdx), %r12
	leaq	-1(%rax), %r14
	movq	24(%rbp), %rdx
	movq	(%rdx,%r13), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx,%r13), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx,%r13), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx,%r13), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx,%r13), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movq	%r12, %rdi
	call	_value_put
	testl	%eax, %eax
	jne	L119
	movq	%r12, %rdi
	call	_strlen
	leaq	(%r12,%rax), %rdx
	subq	%rax, %r14
	movq	%r14, %rax
	incq	-264(%rbp)
	movq	-264(%rbp), %rsi
	cmpq	%rsi, 32(%rbp)
	ja	L202
L198:
	cmpq	$1, %rax
	jbe	L93
L410:
	movw	$41, (%rdx)
	jmp	L128
	.align 4,0x90
L428:
	cmpq	$6, -288(%rbp)
	jbe	L93
	movq	-280(%rbp), %rdi
	movl	$1936288808, (%rdi)
	movw	$116, 4(%rdi)
	movq	-280(%rbp), %rdi
	call	_strlen
	movq	-280(%rbp), %rcx
	addq	%rax, %rcx
	movq	-288(%rbp), %rdx
	subq	%rax, %rdx
	movq	16(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	24(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	32(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	40(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	48(%rbp), %rax
	movq	%rax, -192(%rbp)
	cmpb	$0, -224(%rbp)
	jne	L211
	jmp	L208
	.align 4,0x90
L449:
	movb	$32, (%rcx)
	leaq	1(%rcx), %r13
	leaq	-1(%rdx), %r14
	movq	-216(%rbp), %r12
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movq	%r13, %rdi
	call	_value_put
	testl	%eax, %eax
	jne	L119
	movq	%r13, %rdi
	call	_strlen
	leaq	(%r13,%rax), %rcx
	movq	%r14, %rdx
	subq	%rax, %rdx
	movq	40(%r12), %rax
	movq	%rax, -224(%rbp)
	movq	48(%r12), %rax
	movq	%rax, -216(%rbp)
	movq	56(%r12), %rax
	movq	%rax, -208(%rbp)
	movq	64(%r12), %rax
	movq	%rax, -200(%rbp)
	movq	72(%r12), %rax
	movq	%rax, -192(%rbp)
	cmpb	$0, -224(%rbp)
	je	L208
L211:
	cmpq	$2, %rdx
	ja	L449
	jmp	L93
L429:
	cmpq	$6, -288(%rbp)
	jbe	L93
	movq	-280(%rbp), %rax
	movl	$1935763496, (%rax)
	movw	$104, 4(%rax)
	movq	%rax, %rdi
	call	_strlen
	movq	-280(%rbp), %rdx
	addq	%rax, %rdx
	movq	-288(%rbp), %rcx
	subq	%rax, %rcx
	cmpq	$0, 32(%rbp)
	je	L218
	movq	$0, -256(%rbp)
	movl	$1, %esi
	movq	$0, -232(%rbp)
L220:
	movq	-232(%rbp), %rax
	addq	24(%rbp), %rax
	cmpb	$0, (%rax)
	je	L221
	cmpq	$0, 16(%rax)
	je	L221
	movq	$0, -248(%rbp)
	xorl	%r14d, %r14d
	jmp	L224
L450:
	cmpq	$2, %rcx
	jbe	L93
	movb	$32, (%rdx)
	leaq	1(%rdx), %r12
	leaq	-1(%rcx), %r13
L230:
	movq	24(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	8(%rdx,%rax), %rax
	movq	8(%r14,%rax), %rdx
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdx
	movq	%r13, %rsi
	movq	%r12, %rdi
	call	_value_put
	testl	%eax, %eax
	jne	L119
	movq	%r12, %rdi
	call	_strlen
	movq	%r13, %rdx
	subq	%rax, %rdx
	cmpq	$4, %rdx
	jbe	L93
	leaq	(%r12,%rax), %rax
	movb	$32, (%rax)
	movb	$45, 1(%rax)
	movb	$62, 2(%rax)
	movb	$32, 3(%rax)
	leaq	4(%rax), %r12
	leaq	-4(%rdx), %r13
	movq	24(%rbp), %rax
	movq	-232(%rbp), %rcx
	movq	8(%rcx,%rax), %rax
	movq	8(%r14,%rax), %rdx
	movq	40(%rdx), %rax
	movq	%rax, (%rsp)
	movq	48(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	56(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	64(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	72(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdx
	movq	%r13, %rsi
	movq	%r12, %rdi
	call	_value_put
	testl	%eax, %eax
	jne	L119
	movq	%r12, %rdi
	call	_strlen
	leaq	(%r12,%rax), %rdx
	movq	%r13, %rcx
	subq	%rax, %rcx
	xorl	%esi, %esi
L225:
	incq	-248(%rbp)
	movq	-232(%rbp), %rax
	addq	24(%rbp), %rax
	addq	$40, %r14
	movq	-248(%rbp), %rdi
	cmpq	%rdi, 16(%rax)
	jbe	L221
L224:
	movq	8(%rax), %rax
	cmpb	$0, (%r14,%rax)
	je	L225
	testl	%esi, %esi
	jne	L450
	cmpq	$3, %rcx
	jbe	L93
	movb	$44, (%rdx)
	movb	$32, 1(%rdx)
	leaq	2(%rdx), %r12
	leaq	-2(%rcx), %r13
	jmp	L230
L434:
	movq	-288(%rbp), %rax
	incq	%rax
	cmpq	$7, %rax
	jbe	L93
	movq	-280(%rbp), %rdx
	movabsq	$8751735898823356009, %rcx
	movq	%rcx, (%rdx)
	movb	$0, 8(%rdx)
	jmp	L128
L433:
	movq	-288(%rbp), %rax
	incq	%rax
	cmpq	$2, %rax
	jbe	L93
	movq	-280(%rbp), %rax
	movl	$5136718, (%rax)
	jmp	L128
L432:
	cmpq	$2, -288(%rbp)
	jbe	L93
	movq	-280(%rbp), %rsi
	movw	$40, (%rsi)
	movq	%rsi, %rdi
	call	_strlen
	movq	-280(%rbp), %r13
	addq	%rax, %r13
	movq	-288(%rbp), %r12
	subq	%rax, %r12
	movq	40(%rbp), %r14
	testq	%r14, %r14
	jne	L255
	cmpq	$0, 32(%rbp)
	je	L257
	movq	$0, -240(%rbp)
	cmpq	$2, %r12
	ja	L260
	jmp	L93
	.align 4,0x90
L263:
	addq	$40, %r14
	cmpq	$2, %r12
	jbe	L93
L260:
	cmpq	$0, -240(%rbp)
	je	L264
	movb	$32, (%r13)
	incq	%r13
	decq	%r12
L264:
	movq	24(%rbp), %rdx
	movq	(%r14,%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%r14,%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14,%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14,%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14,%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdx
	movq	%r12, %rsi
	movq	%r13, %rdi
	call	_value_put
	testl	%eax, %eax
	jne	L119
	movq	%r13, %rdi
	call	_strlen
	addq	%rax, %r13
	subq	%rax, %r12
	incq	-240(%rbp)
	movq	-240(%rbp), %rdi
	cmpq	%rdi, 32(%rbp)
	ja	L263
L257:
	cmpq	$1, %r12
	jbe	L93
	movw	$41, (%r13)
	movq	%r13, %rdi
	call	_strlen
	addq	%rax, %r13
L262:
	movb	$0, (%r13)
	jmp	L128
	.align 4,0x90
L431:
	cmpq	$10, -288(%rbp)
	jbe	L93
	movq	-280(%rbp), %rdx
	movabsq	$2338042707301724016, %rsi
	movq	%rsi, (%rdx)
	movw	$40, 8(%rdx)
	movq	%rdx, %rdi
	call	_strlen
	movq	-288(%rbp), %rsi
	subq	%rax, %rsi
	movq	-280(%rbp), %rdi
	addq	%rax, %rdi
	movq	24(%rbp), %rdx
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdx
	call	_value_put
	testl	%eax, %eax
	jne	L119
	movq	-280(%rbp), %rdi
	call	_strlen
	movq	%rax, %rdx
	leaq	2(%rax), %rax
	cmpq	%rax, -288(%rbp)
	jb	L93
	movq	-280(%rbp), %rcx
	movw	$41, (%rcx,%rdx)
	jmp	L128
	.align 4,0x90
L221:
	incq	-256(%rbp)
	addq	$40, -232(%rbp)
	movq	-256(%rbp), %rax
	cmpq	%rax, 32(%rbp)
	ja	L220
L218:
	cmpq	$1, %rcx
	ja	L410
	jmp	L93
	.align 4,0x90
L422:
	leaq	24(%rbp), %rbx
	movl	%r14d, %esi
	movq	%rbx, %rdi
	call	___gmpz_sizeinbase
	cmpq	%rax, -288(%rbp)
	jb	L93
	movq	%rbx, %rdx
	movl	%r14d, %esi
	movq	-280(%rbp), %rdi
	call	___gmpz_get_str
	jmp	L128
L438:
	cmpq	$99, -288(%rbp)
	jbe	L93
	movzbl	25(%rbp), %r8d
	sall	$4, %r8d
	sarb	$4, %r8b
	movzbl	24(%rbp), %edx
	movl	%edx, %ecx
	sarb	$4, %cl
	movsbl	%cl,%ecx
	sall	$4, %edx
	sarb	$4, %dl
	movsbl	%dl,%edx
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movsbl	37(%rbp),%eax
	movl	%eax, 16(%rsp)
	movzbl	36(%rbp), %eax
	sall	$4, %eax
	sarb	$4, %al
	movsbl	%al,%eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, (%rsp)
	movl	28(%rbp), %r9d
	movsbl	%r8b,%r8d
	leaq	LC39(%rip), %rsi
	movq	-280(%rbp), %rdi
	xorl	%eax, %eax
	call	_sprintf
	jmp	L128
L443:
	movq	%r12, %rdi
	call	_strlen
	incq	%rax
	cmpq	%rax, -288(%rbp)
	jbe	L93
	movq	%r12, %rsi
	movq	-280(%rbp), %rdi
	call	_strcpy
	jmp	L323
L166:
	movq	24(%rbp), %rbx
	movq	%rbx, %rdi
	call	_strlen
	incq	%rax
	cmpq	%rax, -288(%rbp)
	jb	L93
	jmp	L412
L430:
	movq	24(%rbp), %rdx
	movq	8(%rdx), %rax
	movq	%rax, (%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	40(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdx
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rdi
	call	_value_put
	testl	%eax, %eax
	jne	L93
	movq	-280(%rbp), %rdi
	call	_strlen
	movq	-288(%rbp), %r14
	subq	%rax, %r14
	cmpq	$3, %r14
	jbe	L93
	movq	-280(%rbp), %r12
	addq	%rax, %r12
	movq	24(%rbp), %r13
	movl	(%r13), %edi
	testl	%edi, %edi
	je	L242
	movw	$11822, (%r12)
	movb	$0, 2(%r12)
L244:
	movq	%r12, %rdi
	call	_strlen
	subq	%rax, %r14
	leaq	(%r12,%rax), %rdi
	movq	48(%r13), %rax
	movq	%rax, (%rsp)
	movq	56(%r13), %rax
	movq	%rax, 8(%rsp)
	movq	64(%r13), %rax
	movq	%rax, 16(%rsp)
	movq	72(%r13), %rax
	movq	%rax, 24(%rsp)
	movq	80(%r13), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdx
	movq	%r14, %rsi
	call	_value_put
	testl	%eax, %eax
	je	L128
	jmp	L119
	.align 4,0x90
L418:
	mov	%eax, %eax
	leaq	L304(%rip), %rdx
	movslq	(%rdx,%rax,4),%rax
	addq	%rdx, %rax
	jmp	*%rax
	.align 2,0x90
L304:
	.long	L278-L304
	.long	L279-L304
	.long	L280-L304
	.long	L281-L304
	.long	L282-L304
	.long	L283-L304
	.long	L277-L304
	.long	L277-L304
	.long	L277-L304
	.long	L277-L304
	.long	L277-L304
	.long	L284-L304
	.long	L285-L304
	.long	L286-L304
	.long	L287-L304
	.long	L288-L304
	.long	L289-L304
	.long	L290-L304
	.long	L291-L304
	.long	L292-L304
	.long	L293-L304
	.long	L294-L304
	.long	L295-L304
	.long	L296-L304
	.long	L297-L304
	.long	L298-L304
	.long	L299-L304
	.long	L277-L304
	.long	L277-L304
	.long	L277-L304
	.long	L277-L304
	.long	L300-L304
	.long	L301-L304
	.long	L302-L304
	.long	L277-L304
	.long	L277-L304
	.long	L277-L304
	.long	L277-L304
	.long	L277-L304
	.long	L277-L304
	.long	L277-L304
	.long	L277-L304
	.long	L303-L304
L426:
	movq	24(%rbp), %rbx
	movq	%rbx, %rdi
	call	_strlen
	addq	$2, %rax
	cmpq	%rax, -288(%rbp)
	jb	L93
	movq	%rbx, %rdx
	leaq	LC37(%rip), %rsi
	movq	-280(%rbp), %rdi
	xorl	%eax, %eax
	call	_sprintf
	jmp	L128
L437:
	movq	24(%rbp), %rbx
	movq	%rbx, %rdi
	call	_strlen
	incq	%rax
	cmpq	%rax, -288(%rbp)
	jb	L93
	jmp	L412
L436:
	movq	24(%rbp), %rbx
	movq	%rbx, %rdi
	call	_strlen
	incq	%rax
	cmpq	%rax, -288(%rbp)
	jb	L93
	jmp	L412
L208:
	cmpq	$1, %rdx
	jbe	L93
	movw	$41, (%rcx)
	jmp	L128
L255:
	movq	%r14, %rdi
	call	_strlen
	addq	$2, %rax
	cmpq	%rax, %r12
	jb	L93
	movq	%r14, %rdx
	leaq	LC38(%rip), %rsi
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	_sprintf
	jmp	L262
L242:
	movl	$3026478, (%r12)
	jmp	L244
L448:
	cmpq	$1, %rax
	jle	L153
	movl	$1, %edx
	movl	$46, %ecx
L155:
	movq	-280(%rbp), %rsi
	movzbl	(%rdx,%rsi), %eax
	movb	%cl, (%rdx,%rsi)
	incq	%rdx
	movl	%eax, %ecx
	cmpq	%rdx, %rbx
	jne	L155
L153:
	movq	(%r12), %r8
	decq	%r8
	movq	%r8, (%r12)
	leaq	-160(%rbp), %r13
	leaq	LC34(%rip), %rcx
	movl	$100, %edx
	xorl	%esi, %esi
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	___sprintf_chk
	movq	-288(%rbp), %rsi
	subq	%rbx, %rsi
	movq	%r13, %rcx
L156:
	movl	(%rcx), %eax
	addq	$4, %rcx
	leal	-16843009(%rax), %edx
	notl	%eax
	andl	%eax, %edx
	andl	$-2139062144, %edx
	je	L156
	movl	%edx, %eax
	shrl	$16, %eax
	testl	$32896, %edx
	cmove	%eax, %edx
	leaq	2(%rcx), %rax
	cmove	%rax, %rcx
	addb	%dl, %dl
	sbbq	$3, %rcx
	subq	%r13, %rcx
	leaq	2(%rcx), %rax
	cmpq	%rax, %rsi
	jb	L93
	movq	-280(%rbp), %rax
	addq	%rbx, %rax
	leaq	-1(%rax), %rdx
	cmpb	$48, -1(%rax)
	jne	L159
L396:
	decq	%rdx
	cmpb	$48, (%rdx)
	je	L396
L159:
	leaq	1(%rdx), %rdi
	movq	%r13, %rdx
	leaq	LC35(%rip), %rsi
	xorl	%eax, %eax
	call	_sprintf
	jmp	L161
L447:
	movq	%r12, %rdi
	call	_free
	movl	$-4, %eax
	jmp	L119
L303:
	leaq	LC0(%rip), %rbx
	jmp	L305
L302:
	leaq	LC25(%rip), %rbx
	jmp	L305
L301:
	leaq	LC24(%rip), %rbx
	jmp	L305
L300:
	leaq	LC23(%rip), %rbx
	jmp	L305
L299:
	leaq	LC21(%rip), %rbx
	jmp	L305
L298:
	leaq	LC16(%rip), %rbx
	jmp	L305
L297:
	leaq	LC15(%rip), %rbx
	jmp	L305
L296:
	leaq	LC14(%rip), %rbx
	jmp	L305
L295:
	leaq	LC13(%rip), %rbx
	jmp	L305
L294:
	leaq	LC12(%rip), %rbx
	jmp	L305
L293:
	leaq	LC11(%rip), %rbx
	jmp	L305
L292:
	leaq	LC10(%rip), %rbx
	jmp	L305
L291:
	leaq	LC9(%rip), %rbx
	jmp	L305
L290:
	leaq	LC8(%rip), %rbx
	jmp	L305
L289:
	leaq	LC20(%rip), %rbx
	jmp	L305
L288:
	leaq	LC19(%rip), %rbx
	jmp	L305
L287:
	leaq	LC7(%rip), %rbx
	jmp	L305
L286:
	leaq	LC6(%rip), %rbx
	jmp	L305
L285:
	leaq	LC5(%rip), %rbx
	jmp	L305
L284:
	leaq	LC4(%rip), %rbx
	jmp	L305
L283:
	leaq	LC22(%rip), %rbx
	jmp	L305
L282:
	leaq	LC26(%rip), %rbx
	jmp	L305
L281:
	leaq	LC18(%rip), %rbx
	jmp	L305
L280:
	leaq	LC17(%rip), %rbx
	jmp	L305
L279:
	leaq	LC3(%rip), %rbx
	jmp	L305
L278:
	leaq	LC2(%rip), %rbx
	jmp	L305
LFE133:
	.cstring
	.align 3
LC40:
	.ascii "Error: In formatted output, too many format tags.\0"
LC41:
	.ascii "%%\0"
	.align 3
LC42:
	.ascii "IO Error: In print, op is too big to output.\0"
	.text
	.align 4,0x90
.globl _value_vprintf_generic
_value_vprintf_generic:
LFB143:
	pushq	%rbp
LCFI70:
	movq	%rsp, %rbp
LCFI71:
	pushq	%r15
LCFI72:
	pushq	%r14
LCFI73:
	pushq	%r13
LCFI74:
	pushq	%r12
LCFI75:
	pushq	%rbx
LCFI76:
	subq	$424, %rsp
LCFI77:
	movq	%rdi, -384(%rbp)
	movq	%rsi, -392(%rbp)
	movl	%ecx, -396(%rbp)
	movq	%r8, %r15
	movq	%r9, -408(%rbp)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rcx
	movq	%rcx, -56(%rbp)
	xorl	%ecx, %ecx
	leaq	-1(%rdx), %rsi
	movl	$0, -372(%rbp)
	leaq	-320(%rbp), %r14
	jmp	L452
	.align 4,0x90
L498:
	cmpq	$0, -384(%rbp)
	je	L456
	movsbl	%al,%edi
	call	_putchar
L458:
	movq	%rbx, %rsi
L452:
	leaq	1(%rsi), %rbx
	movzbl	1(%rsi), %eax
	testb	%al, %al
	je	L497
	cmpb	$37, %al
	jne	L498
	testq	%r15, %r15
	je	L459
	movl	-396(%rbp), %ecx
	cmpl	%ecx, -372(%rbp)
	jge	L499
	movslq	-372(%rbp),%rax
	leaq	(%rax,%rax,4), %rax
	leaq	0(,%rax,8), %rdx
	movq	(%r15,%rax,8), %rax
	movq	%rax, -368(%rbp)
	movq	8(%rdx,%r15), %rax
	movq	%rax, -360(%rbp)
	movq	16(%rdx,%r15), %rax
	movq	%rax, -352(%rbp)
	movq	24(%rdx,%r15), %rax
	movq	%rax, -344(%rbp)
	movq	32(%rdx,%r15), %rax
	movq	%rax, -336(%rbp)
	incl	-372(%rbp)
L464:
	xorl	%ecx, %ecx
	.align 4,0x90
L496:
	incq	%rbx
	movzbl	2(%rcx,%rsi), %eax
	testb	%al, %al
	je	L470
	movb	%al, (%rcx,%r14)
	incq	%rcx
	movzbl	1(%rcx,%rsi), %eax
	cmpb	$46, %al
	je	L496
	movsbl	%al,%eax
	cmpl	$255, %eax
	ja	L468
	movslq	%eax,%rdx
	movq	__DefaultRuneLocale@GOTPCREL(%rip), %rax
	testb	$4, 61(%rax,%rdx,4)
	jne	L496
L468:
	incq	%rbx
L470:
	movb	$0, -320(%rbp,%rcx)
	decq	%rbx
	cmpb	$37, -320(%rbp)
	jne	L471
	cmpq	$0, -384(%rbp)
	je	L473
	leaq	LC41(%rip), %rsi
	movq	-384(%rbp), %rdi
	xorl	%eax, %eax
	call	_fprintf
	jmp	L458
L456:
	movq	-392(%rbp), %rdx
	movb	%al, (%rdx)
	incq	%rdx
	movq	%rdx, -392(%rbp)
	jmp	L458
L471:
	movq	%rsp, -416(%rbp)
	subq	$272, %rsp
	leaq	48(%rsp), %r13
	movq	-368(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-360(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-352(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-344(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-336(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdx
	movl	$256, %esi
	movq	%r13, %rdi
	call	_value_put
	testl	%eax, %eax
	je	L475
	incl	%eax
	jne	L477
	movq	-416(%rbp), %rsp
	subq	$4112, %rsp
	leaq	48(%rsp), %r13
	movq	-368(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-360(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-352(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-344(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-336(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdx
	movl	$4096, %esi
	movq	%r13, %rdi
	call	_value_put
	testl	%eax, %eax
	je	L475
	incl	%eax
	jne	L477
	movq	-416(%rbp), %rsp
	subq	$65552, %rsp
	leaq	48(%rsp), %r13
	movq	-368(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-360(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-352(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-344(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-336(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdx
	movl	$65536, %esi
	movq	%r13, %rdi
	call	_value_put
	testl	%eax, %eax
	je	L475
	incl	%eax
	jne	L477
	movq	-416(%rbp), %rsp
	subq	$1048592, %rsp
	leaq	48(%rsp), %r13
	movq	-368(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-360(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-352(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-344(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-336(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdx
	movl	$1048576, %esi
	movq	%r13, %rdi
	call	_value_put
	movl	%eax, %r12d
	testl	%eax, %eax
	je	L475
	cmpl	$-1, %eax
	jne	L477
	movq	-416(%rbp), %rsp
	leaq	LC42(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movl	%r12d, %eax
L463:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdx
	movq	-56(%rbp), %rcx
	xorq	(%rdx), %rcx
	jne	L500
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
L459:
	movq	-408(%rbp), %rax
	movq	8(%rax), %rdx
	leaq	40(%rdx), %rax
	movq	-408(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	(%rdx), %rax
	movq	%rax, -368(%rbp)
	movq	8(%rdx), %rax
	movq	%rax, -360(%rbp)
	movq	16(%rdx), %rax
	movq	%rax, -352(%rbp)
	movq	24(%rdx), %rax
	movq	%rax, -344(%rbp)
	movq	32(%rdx), %rax
	movq	%rax, -336(%rbp)
	jmp	L464
L473:
	movq	-392(%rbp), %rax
	movb	$37, (%rax)
	incq	%rax
	movq	%rax, -392(%rbp)
	jmp	L458
L497:
	xorl	%eax, %eax
	jmp	L463
L475:
	cmpq	$0, -384(%rbp)
	je	L484
	movq	-384(%rbp), %rsi
	movq	%r13, %rdi
	call	_fputs
L486:
	movq	-416(%rbp), %rsp
	jmp	L458
L477:
	movq	-416(%rbp), %rsp
	movl	$-1, %eax
	jmp	L463
L499:
	leaq	LC40(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movl	$-1, %eax
	jmp	L463
L500:
	call	___stack_chk_fail
L484:
	movq	%r13, %rsi
	movq	-392(%rbp), %rdi
	call	_strcpy
	movq	-392(%rbp), %rdi
	call	_strlen
	addq	%rax, -392(%rbp)
	jmp	L486
LFE143:
	.align 4,0x90
.globl _value_sprintf
_value_sprintf:
LFB142:
	pushq	%rbp
LCFI78:
	movq	%rsp, %rbp
LCFI79:
	subq	$208, %rsp
LCFI80:
	movq	%rdx, -160(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	movzbl	%al, %edx
	leaq	0(,%rdx,4), %rax
	leaq	L502(%rip), %rdx
	subq	%rax, %rdx
	leaq	-1(%rbp), %rax
	jmp	*%rdx
	movaps	%xmm7, -15(%rax)
	movaps	%xmm6, -31(%rax)
	movaps	%xmm5, -47(%rax)
	movaps	%xmm4, -63(%rax)
	movaps	%xmm3, -79(%rax)
	movaps	%xmm2, -95(%rax)
	movaps	%xmm1, -111(%rax)
	movaps	%xmm0, -127(%rax)
L502:
	movl	$16, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %r9
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	%rsi, %rdx
	movq	%rdi, %rsi
	xorl	%edi, %edi
	call	_value_vprintf_generic
	leave
	ret
LFE142:
	.align 4,0x90
.globl _value_vfprintf
_value_vfprintf:
LFB141:
	pushq	%rbp
LCFI81:
	movq	%rsp, %rbp
LCFI82:
	movq	%rdx, %r9
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	%rsi, %rdx
	xorl	%esi, %esi
	leave
	jmp	_value_vprintf_generic
LFE141:
	.cstring
LC43:
	.ascii "On line %d, \0"
LC44:
	.ascii "%d\0"
	.text
	.align 4,0x90
.globl _value_error
_value_error:
LFB144:
	pushq	%rbp
LCFI83:
	movq	%rsp, %rbp
LCFI84:
	pushq	%r14
LCFI85:
	pushq	%r13
LCFI86:
	pushq	%r12
LCFI87:
	pushq	%rbx
LCFI88:
	subq	$224, %rsp
LCFI89:
	movq	%rdx, -192(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -176(%rbp)
	movq	%r9, -168(%rbp)
	movzbl	%al, %edx
	leaq	0(,%rdx,4), %rax
	leaq	L507(%rip), %rdx
	subq	%rax, %rdx
	leaq	-33(%rbp), %rax
	jmp	*%rdx
	movaps	%xmm7, -15(%rax)
	movaps	%xmm6, -31(%rax)
	movaps	%xmm5, -47(%rax)
	movaps	%xmm4, -63(%rax)
	movaps	%xmm3, -79(%rax)
	movaps	%xmm2, -95(%rax)
	movaps	%xmm1, -111(%rax)
	movaps	%xmm0, -127(%rax)
L507:
	movq	%rsi, %rbx
	movl	$1, %edx
	movq	_print_errors_p@GOTPCREL(%rip), %rax
	movl	(%rax), %r9d
	testl	%r9d, %r9d
	jne	L540
L510:
	movl	%edx, %eax
	addq	$224, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L540:
	movl	$16, -256(%rbp)
	movl	$48, -252(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -248(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	_error_count@GOTPCREL(%rip), %rax
	addl	%edi, (%rax)
	movq	_linenum@GOTPCREL(%rip), %rax
	movl	(%rax), %edx
	testl	%edx, %edx
	jne	L541
	movq	___stderrp@GOTPCREL(%rip), %r12
L511:
	decq	%rbx
	leaq	-256(%rbp), %r13
	leaq	-224(%rbp), %r14
	.align 4,0x90
L539:
	incq	%rbx
	movzbl	(%rbx), %eax
	testb	%al, %al
	je	L542
L514:
	cmpb	$37, %al
	je	L515
	movsbl	%al,%edi
	movq	(%r12), %rsi
	call	_fputc
	incq	%rbx
	movzbl	(%rbx), %eax
	testb	%al, %al
	jne	L514
L542:
	movq	(%r12), %rsi
	movl	$10, %edi
	call	_fputc
	xorl	%edx, %edx
	jmp	L510
	.align 4,0x90
L515:
	incq	%rbx
	movzbl	(%rbx), %eax
	cmpb	$100, %al
	je	L543
	cmpb	$99, %al
	je	L544
	cmpb	$108, %al
	jne	L527
	incq	%rbx
	cmpb	$100, (%rbx)
	jne	L539
	movl	-256(%rbp), %eax
	cmpl	$48, %eax
	jae	L530
	mov	%eax, %edx
	addq	-240(%rbp), %rdx
	addl	$8, %eax
	movl	%eax, -256(%rbp)
L532:
	movq	(%rdx), %rdx
	leaq	LC34(%rip), %rsi
	movq	(%r12), %rdi
	xorl	%eax, %eax
	call	_fprintf
	jmp	L539
	.align 4,0x90
L543:
	movl	-256(%rbp), %eax
	cmpl	$48, %eax
	jae	L519
	mov	%eax, %edx
	addq	-240(%rbp), %rdx
	addl	$8, %eax
	movl	%eax, -256(%rbp)
L521:
	movl	(%rdx), %edx
	leaq	LC44(%rip), %rsi
	movq	(%r12), %rdi
	xorl	%eax, %eax
	call	_fprintf
	jmp	L539
	.align 4,0x90
L527:
	movb	$37, -224(%rbp)
	movb	%al, -223(%rbp)
	movb	$0, -222(%rbp)
	movq	%r13, %r9
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	%r14, %rdx
	xorl	%esi, %esi
	movq	(%r12), %rdi
	call	_value_vprintf_generic
	jmp	L539
L544:
	movl	-256(%rbp), %eax
	cmpl	$48, %eax
	jae	L524
	mov	%eax, %edx
	addq	-240(%rbp), %rdx
	addl	$8, %eax
	movl	%eax, -256(%rbp)
L526:
	movq	(%r12), %rsi
	movq	(%rdx), %rdi
	call	_fputs
	jmp	L539
L519:
	movq	-248(%rbp), %rdx
	leaq	8(%rdx), %rax
	movq	%rax, -248(%rbp)
	jmp	L521
L524:
	movq	-248(%rbp), %rdx
	leaq	8(%rdx), %rax
	movq	%rax, -248(%rbp)
	jmp	L526
L541:
	movq	___stderrp@GOTPCREL(%rip), %r12
	leaq	LC43(%rip), %rsi
	movq	(%r12), %rdi
	xorl	%eax, %eax
	call	_fprintf
	jmp	L511
L530:
	movq	-248(%rbp), %rdx
	leaq	8(%rdx), %rax
	movq	%rax, -248(%rbp)
	jmp	L532
LFE144:
	.cstring
	.align 3
LC45:
	.ascii "Argument Error: Cannot get an unsigned long from non-number %t.\0"
	.text
	.align 4,0x90
.globl _value_get_ulong
_value_get_ulong:
LFB132:
	pushq	%rbp
LCFI90:
	movq	%rsp, %rbp
LCFI91:
	subq	$48, %rsp
LCFI92:
	movzbl	16(%rbp), %eax
	cmpb	$11, %al
	je	L547
	cmpb	$12, %al
	je	L555
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC45(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L553:
	xorl	%eax, %eax
	leave
	ret
	.align 4,0x90
L547:
	movq	32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rbp), %r10d
	testl	%r10d, %r10d
	je	L553
	leave
	ret
	.align 4,0x90
L555:
	leaq	24(%rbp), %rdi
	xorl	%esi, %esi
	call	_mpfr_get_ui
	leave
	ret
LFE132:
	.cstring
	.align 3
LC46:
	.ascii "Argument Error: Cannot get a long from %t (number expected).\0"
	.text
	.align 4,0x90
.globl _value_get_long
_value_get_long:
LFB130:
	pushq	%rbp
LCFI93:
	movq	%rsp, %rbp
LCFI94:
	subq	$48, %rsp
LCFI95:
	movzbl	16(%rbp), %eax
	cmpb	$11, %al
	je	L563
	cmpb	$12, %al
	je	L564
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC46(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	xorl	%eax, %eax
	leave
	ret
	.align 4,0x90
L564:
	leaq	24(%rbp), %rdi
	xorl	%esi, %esi
	call	_mpfr_get_si
	leave
	ret
	.align 4,0x90
L563:
	leaq	24(%rbp), %rdi
	call	___gmpz_get_si
	leave
	ret
LFE130:
	.cstring
	.align 3
LC47:
	.ascii "Argument Error: Cannot get a double from %t (number expected).\0"
	.text
	.align 4,0x90
.globl _value_get_double
_value_get_double:
LFB129:
	pushq	%rbp
LCFI96:
	movq	%rsp, %rbp
LCFI97:
	subq	$48, %rsp
LCFI98:
	movzbl	16(%rbp), %eax
	cmpb	$11, %al
	je	L572
	cmpb	$12, %al
	je	L573
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC47(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	xorpd	%xmm0, %xmm0
	leave
	ret
	.align 4,0x90
L573:
	leaq	24(%rbp), %rdi
	xorl	%esi, %esi
	call	_mpfr_get_d
	leave
	ret
	.align 4,0x90
L572:
	leaq	24(%rbp), %rdi
	call	___gmpz_get_d
	leave
	ret
LFE129:
	.cstring
	.align 3
LC49:
	.ascii "Error: Cannot dereference a null pointer.\0"
	.align 3
LC50:
	.ascii "Argument Error: Cannot dereference %t (pointer expected).\0"
	.text
	.align 4,0x90
.globl _value_deref
_value_deref:
LFB125:
	pushq	%rbp
LCFI99:
	movq	%rsp, %rbp
LCFI100:
	subq	$144, %rsp
LCFI101:
	movzbl	16(%rbp), %eax
	cmpb	$22, %al
	je	L580
	movb	%al, 16(%rbp)
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	leaq	-96(%rbp), %rax
L577:
	leave
	ret
	.align 4,0x90
L580:
	movq	24(%rbp), %rax
	testq	%rax, %rax
	jne	L577
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	call	_value_error
	leaq	-48(%rbp), %rax
	leave
	ret
LFE125:
	.cstring
	.align 3
LC51:
	.ascii "Type Error: import is undefined where op is %t (string expected).\0"
LC52:
	.ascii "r\0"
	.align 3
LC53:
	.ascii "IO Error: Cannot access file %s.\0"
	.text
	.align 4,0x90
.globl _value_import
_value_import:
LFB94:
	pushq	%rbp
LCFI102:
	movq	%rsp, %rbp
LCFI103:
	movq	%rbx, -32(%rbp)
LCFI104:
	movq	%r12, -24(%rbp)
LCFI105:
	movq	%r13, -16(%rbp)
LCFI106:
	movq	%r14, -8(%rbp)
LCFI107:
	subq	$224, %rsp
LCFI108:
	movq	%rdi, %r13
	cmpb	$13, 16(%rbp)
	je	L582
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC51(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, (%r13)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%r13)
L581:
	movq	%r13, %rax
	movq	-32(%rbp), %rbx
	movq	-24(%rbp), %r12
	movq	-16(%rbp), %r13
	movq	-8(%rbp), %r14
	leave
	ret
	.align 4,0x90
L582:
	movq	24(%rbp), %rdi
	leaq	LC52(%rip), %rsi
	call	_fopen
	movq	%rax, %r14
	testq	%rax, %rax
	je	L588
	movq	_input_stream@GOTPCREL(%rip), %rbx
	movq	(%rbx), %r12
	movq	%rax, (%rbx)
	xorl	%eax, %eax
	call	_run_interpreter
	movq	%r14, %rdi
	call	_fclose
	movq	%r12, (%rbx)
	movq	_is_eof@GOTPCREL(%rip), %rax
	movl	$0, (%rax)
	movb	$0, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%r13)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L581
L588:
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC53(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, (%r13)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L581
LFE94:
	.cstring
	.align 3
LC54:
	.ascii "Error: In value_clear(), undefined op type %d.\0"
	.text
	.align 4,0x90
.globl _value_clear
_value_clear:
LFB83:
	pushq	%rbp
LCFI109:
	movq	%rsp, %rbp
LCFI110:
	movq	%rbx, -32(%rbp)
LCFI111:
	movq	%r12, -24(%rbp)
LCFI112:
	movq	%r13, -16(%rbp)
LCFI113:
	movq	%r14, -8(%rbp)
LCFI114:
	subq	$176, %rsp
LCFI115:
	movq	%rdi, %r13
	movzbl	(%rdi), %ecx
	leal	1(%rcx), %eax
	cmpb	$41, %al
	jbe	L637
L590:
	movsbl	%cl,%edx
	leaq	LC54(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movl	$-1, %eax
	.align 4,0x90
L628:
	movq	-32(%rbp), %rbx
	movq	-24(%rbp), %r12
	movq	-16(%rbp), %r13
	movq	-8(%rbp), %r14
	leave
	ret
	.align 4,0x90
L637:
	movzbl	%al, %eax
	leaq	L606(%rip), %rdx
	movslq	(%rdx,%rax,4),%rax
	addq	%rdx, %rax
	jmp	*%rax
	.align 2,0x90
L606:
	.long	L591-L606
	.long	L591-L606
	.long	L591-L606
	.long	L591-L606
	.long	L591-L606
	.long	L591-L606
	.long	L590-L606
	.long	L590-L606
	.long	L590-L606
	.long	L590-L606
	.long	L590-L606
	.long	L592-L606
	.long	L593-L606
	.long	L594-L606
	.long	L634-L606
	.long	L634-L606
	.long	L634-L606
	.long	L634-L606
	.long	L634-L606
	.long	L596-L606
	.long	L597-L606
	.long	L598-L606
	.long	L590-L606
	.long	L599-L606
	.long	L600-L606
	.long	L601-L606
	.long	L602-L606
	.long	L590-L606
	.long	L590-L606
	.long	L590-L606
	.long	L590-L606
	.long	L603-L606
	.long	L604-L606
	.long	L604-L606
	.long	L590-L606
	.long	L590-L606
	.long	L590-L606
	.long	L590-L606
	.long	L590-L606
	.long	L590-L606
	.long	L590-L606
	.long	L605-L606
L600:
	movq	8(%rdi), %rdi
	addq	$8, %rdi
	call	_value_clear
	movq	8(%r13), %rdi
	addq	$48, %rdi
	call	_value_clear
L634:
	movq	8(%r13), %rdi
L636:
	call	_free
	.align 4,0x90
L591:
	movb	$0, (%r13)
	xorl	%eax, %eax
	jmp	L628
L596:
	cmpq	$0, 8(%rdi)
	je	L591
	cmpq	$0, 16(%rdi)
	je	L634
	xorl	%r12d, %r12d
	xorl	%ebx, %ebx
	.align 4,0x90
L610:
	movq	%rbx, %rdi
	addq	8(%r13), %rdi
	call	_value_clear
	incq	%r12
	addq	$40, %rbx
	cmpq	%r12, 16(%r13)
	ja	L610
	jmp	L634
L597:
	movq	(%rdi), %rax
	movq	%rax, -80(%rbp)
	movq	8(%rdi), %rax
	movq	%rax, -72(%rbp)
	movq	16(%rdi), %rax
	movq	%rax, -64(%rbp)
	movq	24(%rdi), %rax
	movq	%rax, -56(%rbp)
	movq	32(%rdi), %rax
	movq	%rax, -48(%rbp)
	movzbl	-80(%rbp), %r12d
	cmpb	$19, %r12b
	jne	L591
	.align 4,0x90
L630:
	movq	-72(%rbp), %rbx
	movq	%rbx, %rdi
	call	_value_clear
	movb	%r12b, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-72(%rbp), %rdi
	movq	%rdi, -120(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	40(%rbx), %rax
	movq	%rax, -80(%rbp)
	movq	48(%rbx), %rax
	movq	%rax, -72(%rbp)
	movq	56(%rbx), %rax
	movq	%rax, -64(%rbp)
	movq	64(%rbx), %rax
	movq	%rax, -56(%rbp)
	movq	72(%rbx), %rax
	movq	%rax, -48(%rbp)
	movzbl	-80(%rbp), %r12d
	call	_free
	cmpb	$19, %r12b
	je	L630
	jmp	L591
L598:
	call	_value_hash_clear
	jmp	L591
L599:
	movq	8(%rdi), %rdi
	call	_value_clear
	movq	$0, 8(%r13)
	jmp	L591
L601:
	movq	(%rdi), %rax
	movq	%rax, (%rsp)
	movq	8(%rdi), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdi), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdi), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdi), %rax
	movq	%rax, 32(%rsp)
	call	_value_length
	movq	%rax, %r14
	testq	%rax, %rax
	je	L612
	xorl	%r12d, %r12d
	xorl	%ebx, %ebx
	.align 4,0x90
L614:
	movq	%rbx, %rdi
	addq	8(%r13), %rdi
	call	_value_clear
	incq	%r12
	addq	$40, %rbx
	cmpq	%r14, %r12
	jne	L614
L612:
	movq	8(%r13), %rdi
	testq	%rdi, %rdi
	je	L615
	call	_free
L615:
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	jne	L636
	jmp	L591
L602:
	movq	16(%rdi), %rdi
	testq	%rdi, %rdi
	je	L591
	call	_value_clear
	movq	16(%r13), %rdi
	jmp	L636
L603:
	movq	8(%rdi), %rdi
	testq	%rdi, %rdi
	jne	L636
	jmp	L591
L604:
	movq	8(%rdi), %rax
	movq	(%rax), %rdi
	testq	%rdi, %rdi
	je	L620
	call	_free
L620:
	movq	8(%r13), %rdi
	addq	$32, %rdi
	call	_value_clear
	movq	8(%r13), %rdi
	addq	$72, %rdi
	call	_value_clear
	movq	8(%r13), %rdi
	call	_free
	jmp	L591
L605:
	movq	16(%rdi), %rdi
	testq	%rdi, %rdi
	je	L622
	call	_free
L622:
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	je	L624
	call	_free
L624:
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	L626
	call	_value_clear
	movq	32(%r13), %rdi
	call	_free
L626:
	movq	$0, 8(%r13)
	movq	$0, 16(%r13)
	movq	$0, 24(%r13)
	movq	$0, 32(%r13)
	jmp	L591
L593:
	leaq	8(%rdi), %rdi
	call	___gmpz_clear
	jmp	L591
L592:
	movl	$0, 8(%rdi)
	jmp	L591
L594:
	leaq	8(%rdi), %rdi
	call	_mpfr_clear
	jmp	L591
LFE83:
	.cstring
	.align 3
LC55:
	.ascii "Memory Error: Allocation failed.\0"
	.align 3
LC56:
	.ascii "Memory Error: String allocation failed.\0"
	.align 3
LC57:
	.ascii "Memory Error: Array allocation failed.\0"
	.align 3
LC58:
	.ascii "Memory Error: List allocation failed.\0"
	.align 3
LC59:
	.ascii "Memory Error: Hash allocation failed.\0"
	.align 3
LC60:
	.ascii "Memory Error: Range allocation failed.\0"
	.align 3
LC61:
	.ascii "Memory Error: Block allocation failed.\0"
	.align 3
LC62:
	.ascii "Type Error: malloc() is undefined where op is %t (linear container expected).\0"
	.text
	.align 4,0x90
.globl _value_realloc
_value_realloc:
LFB93:
	pushq	%rbp
LCFI116:
	movq	%rsp, %rbp
LCFI117:
	pushq	%r12
LCFI118:
	pushq	%rbx
LCFI119:
	subq	$720, %rsp
LCFI120:
	movq	%rdi, %r12
	testq	%rdi, %rdi
	je	L673
	movzbl	(%rdi), %eax
	cmpb	$13, %al
	je	L643
	cmpb	$16, %al
	je	L643
	cmpb	$17, %al
	je	L643
	cmpb	$14, %al
	je	L643
	cmpb	$15, %al
	je	L643
	cmpb	$18, %al
	je	L674
	cmpb	$19, %al
	je	L675
	cmpb	$20, %al
	je	L676
	cmpb	$23, %al
	je	L677
	cmpb	$24, %al
	je	L678
	movq	(%rdi), %rax
	movq	%rax, (%rsp)
	movq	8(%rdi), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdi), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdi), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdi), %rax
	movq	%rax, 32(%rsp)
	leaq	LC62(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movq	%r12, %rdi
	call	_value_clear
	movb	$-1, -640(%rbp)
	movq	-640(%rbp), %rdi
	movq	%rdi, -688(%rbp)
	movq	-632(%rbp), %rsi
	movq	%rsi, -680(%rbp)
	movq	-624(%rbp), %rcx
	movq	%rcx, -672(%rbp)
	movq	-616(%rbp), %rdx
	movq	%rdx, -664(%rbp)
	movq	-608(%rbp), %rax
	movq	%rax, -656(%rbp)
L672:
	movq	%rdi, (%r12)
	movq	%rsi, 8(%r12)
	movq	%rcx, 16(%r12)
	movq	%rdx, 24(%r12)
	movq	%rax, 32(%r12)
	jmp	L641
	.align 4,0x90
L643:
	movq	8(%r12), %rdi
	call	_realloc
	movq	%rax, 8(%r12)
	movq	%rax, %rbx
	testq	%rax, %rax
	je	L679
L641:
	movq	%rbx, %rax
	addq	$720, %rsp
	popq	%rbx
	popq	%r12
	leave
	ret
L673:
	movq	%rsi, %rdi
	call	_malloc
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	L641
	leaq	LC55(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L641
	.align 4,0x90
L674:
	leaq	(%rsi,%rsi,4), %rsi
	salq	$3, %rsi
	movq	8(%rdi), %rdi
	call	_realloc
	movq	%rax, 8(%r12)
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	L641
	leaq	LC57(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -160(%rbp)
	movq	-160(%rbp), %rcx
	movq	%rcx, -208(%rbp)
	movq	-152(%rbp), %rsi
	movq	%rsi, -200(%rbp)
	movq	-144(%rbp), %rdi
	movq	%rdi, -192(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-128(%rbp), %rdx
	movq	%rdx, -176(%rbp)
L671:
	movq	%rcx, (%r12)
	movq	%rsi, 8(%r12)
	movq	%rdi, 16(%r12)
	movq	%rax, 24(%r12)
	movq	%rdx, 32(%r12)
	jmp	L641
	.align 4,0x90
L678:
	leaq	(%rsi,%rsi,4), %rsi
	salq	$3, %rsi
	movq	8(%rdi), %rdi
	call	_realloc
	movq	%rax, 8(%r12)
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	L641
	leaq	LC61(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -544(%rbp)
	movq	-544(%rbp), %rcx
	movq	%rcx, -592(%rbp)
	movq	-536(%rbp), %rsi
	movq	%rsi, -584(%rbp)
	movq	-528(%rbp), %rdi
	movq	%rdi, -576(%rbp)
	movq	-520(%rbp), %rax
	movq	%rax, -568(%rbp)
	movq	-512(%rbp), %rdx
	movq	%rdx, -560(%rbp)
	jmp	L671
	.align 4,0x90
L675:
	leaq	(%rsi,%rsi,4), %rsi
	salq	$3, %rsi
	movq	8(%rdi), %rdi
	call	_realloc
	movq	%rax, 8(%r12)
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	L641
	leaq	LC58(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -256(%rbp)
	movq	-256(%rbp), %rcx
	movq	%rcx, -304(%rbp)
	movq	-248(%rbp), %rsi
	movq	%rsi, -296(%rbp)
	movq	-240(%rbp), %rdi
	movq	%rdi, -288(%rbp)
	movq	-232(%rbp), %rax
	movq	%rax, -280(%rbp)
	movq	-224(%rbp), %rdx
	movq	%rdx, -272(%rbp)
	jmp	L671
	.align 4,0x90
L676:
	leaq	(%rsi,%rsi,4), %rsi
	salq	$3, %rsi
	movq	8(%rdi), %rdi
	call	_realloc
	movq	%rax, 8(%r12)
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	L641
	leaq	LC59(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -352(%rbp)
	movq	-352(%rbp), %rcx
	movq	%rcx, -400(%rbp)
	movq	-344(%rbp), %rsi
	movq	%rsi, -392(%rbp)
	movq	-336(%rbp), %rdi
	movq	%rdi, -384(%rbp)
	movq	-328(%rbp), %rax
	movq	%rax, -376(%rbp)
	movq	-320(%rbp), %rdx
	movq	%rdx, -368(%rbp)
	jmp	L671
	.align 4,0x90
L677:
	imulq	$88, %rsi, %rsi
	movq	8(%rdi), %rdi
	call	_realloc
	movq	%rax, 8(%r12)
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	L641
	leaq	LC60(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -448(%rbp)
	movq	-448(%rbp), %rcx
	movq	%rcx, -496(%rbp)
	movq	-440(%rbp), %rsi
	movq	%rsi, -488(%rbp)
	movq	-432(%rbp), %rdi
	movq	%rdi, -480(%rbp)
	movq	-424(%rbp), %rax
	movq	%rax, -472(%rbp)
	movq	-416(%rbp), %rdx
	movq	%rdx, -464(%rbp)
	jmp	L671
	.align 4,0x90
L679:
	leaq	LC56(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rdi
	movq	%rdi, -112(%rbp)
	movq	-56(%rbp), %rsi
	movq	%rsi, -104(%rbp)
	movq	-48(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	-40(%rbp), %rdx
	movq	%rdx, -88(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -80(%rbp)
	jmp	L672
LFE93:
	.align 4,0x90
.globl _value_malloc
_value_malloc:
LFB92:
	pushq	%rbp
LCFI121:
	movq	%rsp, %rbp
LCFI122:
	pushq	%rbx
LCFI123:
	subq	$152, %rsp
LCFI124:
	movq	%rdi, %rbx
	testq	%rdi, %rdi
	je	L681
	movzbl	(%rdi), %eax
	cmpb	$13, %al
	je	L700
	cmpb	$16, %al
	je	L700
	cmpb	$17, %al
	je	L700
	cmpb	$14, %al
	je	L700
	cmpb	$15, %al
	je	L700
	cmpb	$18, %al
	je	L700
	cmpb	$19, %al
	je	L700
	cmpb	$20, %al
	je	L700
	cmpb	$23, %al
	je	L700
	cmpb	$24, %al
	je	L700
	movq	(%rdi), %rax
	movq	%rax, (%rsp)
	movq	8(%rdi), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdi), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdi), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdi), %rax
	movq	%rax, 32(%rsp)
	leaq	LC62(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movq	%rbx, %rdi
	call	_value_clear
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
	xorl	%eax, %eax
	addq	$152, %rsp
	popq	%rbx
	leave
	ret
	.align 4,0x90
L700:
	movq	$0, 8(%rbx)
L681:
	movq	%rbx, %rdi
	addq	$152, %rsp
	popq	%rbx
	leave
	jmp	_value_realloc
LFE92:
	.cstring
	.align 3
LC63:
	.ascii "Error: Cannot initialize a range.\0"
LC64:
	.ascii "0l15\0"
	.align 3
LC65:
	.ascii "Type Error: init() is undefined for type %d.\0"
	.text
	.align 4,0x90
.globl _value_init
_value_init:
LFB82:
	pushq	%rbp
LCFI125:
	movq	%rsp, %rbp
LCFI126:
	pushq	%r12
LCFI127:
	pushq	%rbx
LCFI128:
	subq	$336, %rsp
LCFI129:
	movq	%rdi, %r12
	movb	%sil, -64(%rbp)
	leal	1(%rsi), %eax
	cmpl	$42, %eax
	jbe	L725
L702:
	movl	%esi, %edx
	leaq	LC65(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -64(%rbp)
	.align 4,0x90
L703:
	movq	-64(%rbp), %rax
	movq	%rax, (%r12)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%r12)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%r12)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%r12)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%r12)
L701:
	movq	%r12, %rax
	addq	$336, %rsp
	popq	%rbx
	popq	%r12
	leave
	ret
	.align 4,0x90
L725:
	mov	%eax, %eax
	leaq	L716(%rip), %rdx
	movslq	(%rdx,%rax,4),%rax
	addq	%rdx, %rax
	jmp	*%rax
	.align 2,0x90
L716:
	.long	L703-L716
	.long	L703-L716
	.long	L703-L716
	.long	L703-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L704-L716
	.long	L705-L716
	.long	L706-L716
	.long	L707-L716
	.long	L707-L716
	.long	L707-L716
	.long	L707-L716
	.long	L707-L716
	.long	L708-L716
	.long	L709-L716
	.long	L710-L716
	.long	L702-L716
	.long	L714-L716
	.long	L712-L716
	.long	L713-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L714-L716
	.long	L715-L716
	.long	L715-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L702-L716
	.long	L703-L716
L713:
	movq	$0, -56(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
L714:
	movq	$0, -56(%rbp)
	jmp	L703
L715:
	movl	$112, %esi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, -56(%rbp)
	testq	%rax, %rax
	je	L726
	movq	$0, (%rax)
	movq	-56(%rbp), %rdx
	movb	$0, -160(%rbp)
	movq	-160(%rbp), %rcx
	movq	%rcx, -208(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -176(%rbp)
	movq	%rcx, 32(%rdx)
	movq	-200(%rbp), %rax
	movq	%rax, 40(%rdx)
	movq	-192(%rbp), %rax
	movq	%rax, 48(%rdx)
	movq	-184(%rbp), %rax
	movq	%rax, 56(%rdx)
	movq	-176(%rbp), %rax
	movq	%rax, 64(%rdx)
	movq	-56(%rbp), %rdx
	movb	$0, -256(%rbp)
	movq	-256(%rbp), %rcx
	movq	%rcx, -304(%rbp)
	movq	-248(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-240(%rbp), %rax
	movq	%rax, -288(%rbp)
	movq	-232(%rbp), %rax
	movq	%rax, -280(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, -272(%rbp)
	movq	%rcx, 72(%rdx)
	movq	-296(%rbp), %rax
	movq	%rax, 80(%rdx)
	movq	-288(%rbp), %rax
	movq	%rax, 88(%rdx)
	movq	-280(%rbp), %rax
	movq	%rax, 96(%rdx)
	movq	-272(%rbp), %rax
	movq	%rax, 104(%rdx)
	movq	-56(%rbp), %rbx
	leaq	-352(%rbp), %rdi
	leaq	LC64(%rip), %rsi
	call	_compile_spec
	movq	-352(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-344(%rbp), %rax
	movq	%rax, 16(%rbx)
	movl	-336(%rbp), %eax
	movl	%eax, 24(%rbx)
	jmp	L703
L704:
	movl	$0, -56(%rbp)
	jmp	L703
L705:
	leaq	-56(%rbp), %rdi
	call	___gmpz_init
	jmp	L703
L706:
	leaq	-56(%rbp), %rdi
	call	_mpfr_init
	jmp	L703
L707:
	leaq	-64(%rbp), %rdi
	movl	$1, %esi
	call	_value_malloc
	cmpb	$-1, -64(%rbp)
	je	L703
	movq	-56(%rbp), %rax
	movb	$0, (%rax)
	jmp	L703
L708:
	movq	$0, -56(%rbp)
	movq	$0, -48(%rbp)
	jmp	L703
L709:
	leaq	-64(%rbp), %rdi
	movl	$2, %esi
	call	_value_malloc
	cmpb	$-1, -64(%rbp)
	je	L703
	movq	-56(%rbp), %rax
	movb	$0, (%rax)
	movb	$0, 40(%rax)
	jmp	L703
L710:
	leaq	-352(%rbp), %rdi
	xorl	%eax, %eax
	call	_value_hash_init
	movq	-352(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-328(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-320(%rbp), %rax
	movq	%rax, -32(%rbp)
	jmp	L703
L712:
	leaq	LC63(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -64(%rbp)
	jmp	L703
L726:
	movb	$-1, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, (%r12)
	movq	-104(%rbp), %rax
	movq	%rax, 8(%r12)
	movq	-96(%rbp), %rax
	movq	%rax, 16(%r12)
	movq	-88(%rbp), %rax
	movq	%rax, 24(%r12)
	movq	-80(%rbp), %rax
	movq	%rax, 32(%r12)
	jmp	L701
LFE82:
	.cstring
	.align 3
LC66:
	.ascii "Argument Error: in %c, %d missing argument (%d expected, %d found).\0"
	.align 3
LC67:
	.ascii "Argument Error: in %c, %d missing arguments (%d expected, %d found).\0"
	.text
	.align 4,0x90
.globl _missing_arguments
_missing_arguments:
LFB75:
	pushq	%rbp
LCFI130:
	movq	%rsp, %rbp
LCFI131:
	testl	%edi, %edi
	jle	L728
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L730
	.align 4,0x90
L731:
	incb	%al
	je	L744
	incl	%r8d
	addq	$40, %rsi
	cmpl	%edi, %r8d
	je	L745
L730:
	movzbl	(%rsi), %eax
	cmpb	$41, %al
	jne	L731
	incl	%ecx
	incl	%r8d
	addq	$40, %rsi
	cmpl	%edi, %r8d
	jne	L730
L745:
	testl	%ecx, %ecx
	jle	L728
	cmpl	$1, %ecx
	je	L746
	movl	%edi, %r9d
	subl	%ecx, %r9d
	movl	%edi, %r8d
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L744:
	movl	$1, %eax
L735:
	leave
	ret
L746:
	leal	-1(%rdi), %r9d
	movl	%edi, %r8d
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movl	$1, %eax
	jmp	L735
L728:
	xorl	%eax, %eax
	leave
	ret
LFE75:
	.cstring
	.align 3
LC68:
	.ascii "Type Error: set_default_prec() is undefined where prec is %t (integer expected).\0"
	.text
	.align 4,0x90
.globl _value_set_default_prec
_value_set_default_prec:
LFB127:
	pushq	%rbp
LCFI132:
	movq	%rsp, %rbp
LCFI133:
	pushq	%rbx
LCFI134:
	subq	$200, %rsp
LCFI135:
	movq	%rdi, %rbx
	movzbl	16(%rbp), %eax
	cmpb	$11, %al
	je	L759
	movb	%al, 16(%rbp)
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC68(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-88(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-80(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$200, %rsp
	popq	%rbx
	leave
	ret
	.align 4,0x90
L759:
	movb	$11, 16(%rbp)
	movq	16(%rbp), %r8
	movq	%r8, -160(%rbp)
	movq	24(%rbp), %rdi
	movq	%rdi, -152(%rbp)
	movq	32(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	40(%rbp), %rsi
	movq	%rsi, -136(%rbp)
	movq	48(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	movzbl	-160(%rbp), %edx
	cmpb	$11, %dl
	je	L751
	cmpb	$12, %dl
	je	L760
	movq	%r8, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rax, 16(%rsp)
	movq	%rsi, 24(%rsp)
	movq	%rcx, 32(%rsp)
	leaq	LC45(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L758:
	xorl	%edi, %edi
L753:
	call	_mpfr_set_default_prec
	movb	$0, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$200, %rsp
	popq	%rbx
	leave
	ret
	.align 4,0x90
L751:
	movq	(%rax), %rdi
	movl	-148(%rbp), %r11d
	testl	%r11d, %r11d
	jne	L753
	jmp	L758
	.align 4,0x90
L760:
	leaq	-152(%rbp), %rdi
	xorl	%esi, %esi
	call	_mpfr_get_ui
	movq	%rax, %rdi
	jmp	L753
LFE127:
	.cstring
	.align 3
LC69:
	.ascii "Type Error: to_string_base() is undefined where base is %t (integer expected).\0"
	.align 3
LC70:
	.ascii "Type Error: to_string_base() is undefined where base equals %s (0 or 2-36 expected).\0"
	.align 3
LC71:
	.ascii "Type Error: to_string_base() is undefined where op is %t (integer expected).\0"
	.text
	.align 4,0x90
.globl _value_to_string_base
_value_to_string_base:
LFB135:
	pushq	%rbp
LCFI136:
	movq	%rsp, %rbp
LCFI137:
	pushq	%r12
LCFI138:
	pushq	%rbx
LCFI139:
	subq	$1049008, %rsp
LCFI140:
	movq	___stack_chk_guard@GOTPCREL(%rip), %r12
	movq	(%r12), %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpb	$11, 56(%rbp)
	je	L762
	movq	56(%rbp), %rax
	movq	%rax, (%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	88(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC69(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$11, -1048800(%rbp)
	leaq	-1048792(%rbp), %rdi
	xorl	%esi, %esi
	call	___gmpz_init_set_si
	movq	-1048800(%rbp), %rax
	movq	%rax, -1048656(%rbp)
	movq	-1048792(%rbp), %rax
	movq	%rax, -1048648(%rbp)
	movq	-1048784(%rbp), %rax
	movq	%rax, -1048640(%rbp)
	movq	-1048776(%rbp), %rax
	movq	%rax, -1048632(%rbp)
	movq	-1048768(%rbp), %rax
	movq	%rax, -1048624(%rbp)
	movb	$11, -1048848(%rbp)
	leaq	-1048840(%rbp), %rdi
	movl	$1, %esi
	call	___gmpz_init_set_si
	movq	-1048848(%rbp), %rax
	movq	%rax, -1048704(%rbp)
	movq	-1048840(%rbp), %rax
	movq	%rax, -1048696(%rbp)
	movq	-1048832(%rbp), %rax
	movq	%rax, -1048688(%rbp)
	movq	-1048824(%rbp), %rax
	movq	%rax, -1048680(%rbp)
	movq	-1048816(%rbp), %rax
	movq	%rax, -1048672(%rbp)
	movb	$11, -1048896(%rbp)
	leaq	-1048888(%rbp), %rdi
	movl	$36, %esi
	call	___gmpz_init_set_si
	movq	-1048896(%rbp), %rax
	movq	%rax, -1048752(%rbp)
	movq	-1048888(%rbp), %rax
	movq	%rax, -1048744(%rbp)
	movq	-1048880(%rbp), %rax
	movq	%rax, -1048736(%rbp)
	movq	-1048872(%rbp), %rax
	movq	%rax, -1048728(%rbp)
	movq	-1048864(%rbp), %rax
	movq	%rax, -1048720(%rbp)
	movl	$1, %ebx
L764:
	leaq	-1048656(%rbp), %rdi
	call	_value_clear
	leaq	-1048704(%rbp), %rdi
	call	_value_clear
	leaq	-1048752(%rbp), %rdi
	call	_value_clear
	movq	56(%rbp), %r8
	movq	%r8, -1048944(%rbp)
	movq	64(%rbp), %rdi
	movq	%rdi, -1048936(%rbp)
	movq	72(%rbp), %rdx
	movq	%rdx, -1048928(%rbp)
	movq	80(%rbp), %rsi
	movq	%rsi, -1048920(%rbp)
	movq	88(%rbp), %rcx
	movq	%rcx, -1048912(%rbp)
	movzbl	-1048944(%rbp), %eax
	cmpb	$11, %al
	je	L770
	cmpb	$12, %al
	je	L783
	movq	%r8, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rdx, 16(%rsp)
	movq	%rsi, 24(%rsp)
	movq	%rcx, 32(%rsp)
	leaq	LC45(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	xorl	%esi, %esi
L774:
	cmpb	$11, 16(%rbp)
	je	L784
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC71(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	xorl	%eax, %eax
L779:
	movq	-24(%rbp), %rdx
	xorq	(%r12), %rdx
	jne	L785
	addq	$1049008, %rsp
	popq	%rbx
	popq	%r12
	leave
	ret
	.align 4,0x90
L784:
	xorl	%eax, %eax
	testl	%ebx, %ebx
	jne	L779
	leaq	24(%rbp), %rdx
	leaq	-1048608(%rbp), %rbx
	movq	%rbx, %rdi
	call	___gmpz_get_str
	movq	%rbx, %rax
	jmp	L779
	.align 4,0x90
L783:
	leaq	-1048936(%rbp), %rdi
	xorl	%esi, %esi
	call	_mpfr_get_ui
	movl	%eax, %esi
	jmp	L774
	.align 4,0x90
L770:
	xorl	%eax, %eax
	movl	-1048932(%rbp), %ecx
	testl	%ecx, %ecx
	cmovne	(%rdx), %rax
	movl	%eax, %esi
	jmp	L774
	.align 4,0x90
L762:
	movb	$11, -1048800(%rbp)
	leaq	-1048792(%rbp), %rdi
	xorl	%esi, %esi
	call	___gmpz_init_set_si
	movq	-1048800(%rbp), %rax
	movq	%rax, -1048656(%rbp)
	movq	-1048792(%rbp), %rax
	movq	%rax, -1048648(%rbp)
	movq	-1048784(%rbp), %rax
	movq	%rax, -1048640(%rbp)
	movq	-1048776(%rbp), %rax
	movq	%rax, -1048632(%rbp)
	movq	-1048768(%rbp), %rax
	movq	%rax, -1048624(%rbp)
	movb	$11, -1048848(%rbp)
	leaq	-1048840(%rbp), %rdi
	movl	$1, %esi
	call	___gmpz_init_set_si
	movq	-1048848(%rbp), %rax
	movq	%rax, -1048704(%rbp)
	movq	-1048840(%rbp), %rax
	movq	%rax, -1048696(%rbp)
	movq	-1048832(%rbp), %rax
	movq	%rax, -1048688(%rbp)
	movq	-1048824(%rbp), %rax
	movq	%rax, -1048680(%rbp)
	movq	-1048816(%rbp), %rax
	movq	%rax, -1048672(%rbp)
	movb	$11, -1048896(%rbp)
	leaq	-1048888(%rbp), %rdi
	movl	$36, %esi
	call	___gmpz_init_set_si
	movq	-1048896(%rbp), %rax
	movq	%rax, -1048752(%rbp)
	movq	-1048888(%rbp), %rax
	movq	%rax, -1048744(%rbp)
	movq	-1048880(%rbp), %rax
	movq	%rax, -1048736(%rbp)
	movq	-1048872(%rbp), %rax
	movq	%rax, -1048728(%rbp)
	movq	-1048864(%rbp), %rax
	movq	%rax, -1048720(%rbp)
	movq	-1048656(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-1048648(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-1048640(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-1048632(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-1048624(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, (%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	88(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_lt
	testl	%eax, %eax
	je	L786
L765:
	movq	56(%rbp), %rax
	movq	%rax, (%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	88(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC70(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movl	$1, %ebx
	jmp	L764
	.align 4,0x90
L786:
	movq	-1048704(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-1048696(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-1048688(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-1048680(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-1048672(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, (%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	88(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_eq
	testl	%eax, %eax
	jne	L765
	movq	-1048752(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-1048744(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-1048736(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-1048728(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-1048720(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, (%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	88(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_gt
	xorl	%ebx, %ebx
	testl	%eax, %eax
	je	L764
	jmp	L765
L785:
	call	___stack_chk_fail
LFE135:
	.align 4,0x90
.globl _value_fprintf
_value_fprintf:
LFB140:
	pushq	%rbp
LCFI141:
	movq	%rsp, %rbp
LCFI142:
	subq	$208, %rsp
LCFI143:
	movq	%rdx, -160(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	movzbl	%al, %edx
	leaq	0(,%rdx,4), %rax
	leaq	L788(%rip), %rdx
	subq	%rax, %rdx
	leaq	-1(%rbp), %rax
	jmp	*%rdx
	movaps	%xmm7, -15(%rax)
	movaps	%xmm6, -31(%rax)
	movaps	%xmm5, -47(%rax)
	movaps	%xmm4, -63(%rax)
	movaps	%xmm3, -79(%rax)
	movaps	%xmm2, -95(%rax)
	movaps	%xmm1, -111(%rax)
	movaps	%xmm0, -127(%rax)
L788:
	movl	$16, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %r9
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	%rsi, %rdx
	xorl	%esi, %esi
	call	_value_vprintf_generic
	leave
	ret
LFE140:
	.align 4,0x90
.globl _value_printf
_value_printf:
LFB139:
	pushq	%rbp
LCFI144:
	movq	%rsp, %rbp
LCFI145:
	subq	$208, %rsp
LCFI146:
	movq	%rsi, -168(%rbp)
	movq	%rdx, -160(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	movzbl	%al, %edx
	leaq	0(,%rdx,4), %rax
	leaq	L791(%rip), %rdx
	subq	%rax, %rdx
	leaq	-1(%rbp), %rax
	jmp	*%rdx
	movaps	%xmm7, -15(%rax)
	movaps	%xmm6, -31(%rax)
	movaps	%xmm5, -47(%rax)
	movaps	%xmm4, -63(%rax)
	movaps	%xmm3, -79(%rax)
	movaps	%xmm2, -95(%rax)
	movaps	%xmm1, -111(%rax)
	movaps	%xmm0, -127(%rax)
L791:
	movl	$8, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %r9
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	%rdi, %rdx
	xorl	%esi, %esi
	movq	___stdoutp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	call	_value_vprintf_generic
	leave
	ret
LFE139:
	.cstring
LC72:
	.ascii "%s \0"
	.text
	.align 4,0x90
.globl _print_values
_print_values:
LFB148:
	pushq	%rbp
LCFI147:
	movq	%rsp, %rbp
LCFI148:
	pushq	%r13
LCFI149:
	pushq	%r12
LCFI150:
	pushq	%rbx
LCFI151:
	subq	$56, %rsp
LCFI152:
	movq	%rsi, %r13
	testq	%rsi, %rsi
	je	L794
	movq	%rdi, %rbx
	xorl	%r12d, %r12d
	.align 4,0x90
L796:
	movq	(%rbx), %rax
	movq	%rax, (%rsp)
	movq	8(%rbx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rbx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rbx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rbx), %rax
	movq	%rax, 32(%rsp)
	leaq	LC72(%rip), %rdi
	xorl	%eax, %eax
	call	_value_printf
	incq	%r12
	addq	$40, %rbx
	cmpq	%r13, %r12
	jne	L796
L794:
	movl	$10, %edi
	call	_putchar
	xorl	%eax, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	leave
	ret
LFE148:
	.cstring
LC73:
	.ascii "%v\0"
	.text
	.align 4,0x90
.globl _value_println
_value_println:
LFB138:
	pushq	%rbp
LCFI153:
	movq	%rsp, %rbp
LCFI154:
	subq	$96, %rsp
LCFI155:
	movq	16(%rbp), %rdi
	movq	%rdi, -48(%rbp)
	movq	24(%rbp), %rsi
	movq	%rsi, -40(%rbp)
	movq	32(%rbp), %rcx
	movq	%rcx, -32(%rbp)
	movq	40(%rbp), %rdx
	movq	%rdx, -24(%rbp)
	movq	48(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	%rdi, (%rsp)
	movq	%rsi, 8(%rsp)
	movq	%rcx, 16(%rsp)
	movq	%rdx, 24(%rsp)
	movq	%rax, 32(%rsp)
	leaq	LC73(%rip), %rdi
	xorl	%eax, %eax
	call	_value_printf
	movl	$10, %edi
	call	_putchar
	xorl	%eax, %eax
	leave
	ret
LFE138:
	.align 4,0x90
.globl _value_print
_value_print:
LFB137:
	pushq	%rbp
LCFI156:
	movq	%rsp, %rbp
LCFI157:
	leaq	LC73(%rip), %rdi
	xorl	%eax, %eax
	leave
	jmp	_value_printf
LFE137:
	.cstring
	.align 3
LC74:
	.ascii "IO Error: In to_string(), op is too big to output.\0"
	.text
	.align 4,0x90
.globl _value_to_string_safe
_value_to_string_safe:
LFB136:
	pushq	%rbp
LCFI158:
	movq	%rsp, %rbp
LCFI159:
	pushq	%rbx
LCFI160:
	subq	$152, %rsp
LCFI161:
	movl	$256, %esi
	xorl	%edi, %edi
	call	_value_malloc
	testq	%rax, %rax
	je	L804
	movq	%rax, %rbx
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	xorl	%edx, %edx
	movl	$256, %esi
	movq	%rbx, %rdi
	call	_value_put
	testl	%eax, %eax
	je	L806
	movq	%rbx, %rdi
	call	_free
	movl	$4096, %esi
	xorl	%edi, %edi
	call	_value_malloc
	testq	%rax, %rax
	je	L804
	movq	%rax, %rbx
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	xorl	%edx, %edx
	movl	$4096, %esi
	movq	%rbx, %rdi
	call	_value_put
	testl	%eax, %eax
	je	L806
	movq	%rbx, %rdi
	call	_free
	movl	$65536, %esi
	xorl	%edi, %edi
	call	_value_malloc
	testq	%rax, %rax
	je	L804
	movq	%rax, %rbx
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	xorl	%edx, %edx
	movl	$65536, %esi
	movq	%rbx, %rdi
	call	_value_put
	testl	%eax, %eax
	je	L806
	movq	%rbx, %rdi
	call	_free
	movl	$1048576, %esi
	xorl	%edi, %edi
	call	_value_malloc
	testq	%rax, %rax
	je	L804
	movq	%rax, %rbx
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	xorl	%edx, %edx
	movl	$1048576, %esi
	movq	%rbx, %rdi
	call	_value_put
	testl	%eax, %eax
	je	L806
	movq	%rbx, %rdi
	call	_free
	leaq	LC74(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -112(%rbp)
	movq	-112(%rbp), %rdi
	movq	%rdi, -64(%rbp)
	movq	-104(%rbp), %rsi
	movq	%rsi, -56(%rbp)
	movq	-96(%rbp), %rcx
	movq	%rcx, -48(%rbp)
	movq	-88(%rbp), %rdx
	movq	%rdx, -40(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	%rdi, 16(%rbp)
	movq	%rsi, 24(%rbp)
	movq	%rcx, 32(%rbp)
	movq	%rdx, 40(%rbp)
	movq	%rax, 48(%rbp)
	addq	$152, %rsp
	popq	%rbx
	leave
	jmp	_value_to_string_safe
L804:
	xorl	%ebx, %ebx
L806:
	movq	%rbx, %rax
	addq	$152, %rsp
	popq	%rbx
	leave
	ret
LFE136:
	.align 4,0x90
.globl _value_to_string
_value_to_string:
LFB134:
	pushq	%rbp
LCFI162:
	movq	%rsp, %rbp
LCFI163:
	pushq	%r13
LCFI164:
	pushq	%r12
LCFI165:
	pushq	%rbx
LCFI166:
	subq	$152, %rsp
LCFI167:
	movq	___stack_chk_guard@GOTPCREL(%rip), %r13
	movq	(%r13), %rax
	movq	%rax, -40(%rbp)
	xorl	%eax, %eax
	movq	%rsp, %r12
	subq	$272, %rsp
	leaq	48(%rsp), %rbx
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	xorl	%edx, %edx
	movl	$256, %esi
	movq	%rbx, %rdi
	call	_value_put
	testl	%eax, %eax
	je	L816
	movq	%r12, %rsp
	subq	$4112, %rsp
	leaq	48(%rsp), %rbx
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	xorl	%edx, %edx
	movl	$4096, %esi
	movq	%rbx, %rdi
	call	_value_put
	testl	%eax, %eax
	je	L816
	movq	%r12, %rsp
	subq	$65552, %rsp
	leaq	48(%rsp), %rbx
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	xorl	%edx, %edx
	movl	$65536, %esi
	movq	%rbx, %rdi
	call	_value_put
	testl	%eax, %eax
	je	L816
	movq	%r12, %rsp
	subq	$1048592, %rsp
	leaq	48(%rsp), %rbx
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	xorl	%edx, %edx
	movl	$1048576, %esi
	movq	%rbx, %rdi
	call	_value_put
	testl	%eax, %eax
	je	L816
	movq	%r12, %rsp
	leaq	LC74(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -128(%rbp)
	movq	-128(%rbp), %rdx
	movq	%rdx, -80(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	%rdx, (%rsp)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_to_string
	movq	%rax, %rbx
L821:
	movq	%rbx, %rax
	movq	-40(%rbp), %rdx
	xorq	(%r13), %rdx
	jne	L824
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	leave
	ret
L816:
	movq	%r12, %rsp
	jmp	L821
L824:
	call	___stack_chk_fail
LFE134:
	.cstring
	.align 3
LC75:
	.ascii "Argument Error: Cannot get a string from %t (string expected).\0"
	.text
	.align 4,0x90
.globl _value_get_string
_value_get_string:
LFB131:
	pushq	%rbp
LCFI168:
	movq	%rsp, %rbp
LCFI169:
	pushq	%rbx
LCFI170:
	subq	$56, %rsp
LCFI171:
	movzbl	16(%rbp), %eax
	subl	$13, %eax
	cmpb	$2, %al
	ja	L826
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_length
	movq	%rax, %rsi
	xorl	%edi, %edi
	call	_value_malloc
	xorl	%ebx, %ebx
	testq	%rax, %rax
	je	L830
	movq	%rax, %rbx
	movq	24(%rbp), %rsi
	movq	%rax, %rdi
	call	_strcpy
L830:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	leave
	ret
	.align 4,0x90
L826:
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC75(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	xorl	%ebx, %ebx
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	leave
	ret
LFE131:
	.align 4,0x90
.globl _value_set_id
_value_set_id:
LFB90:
	pushq	%rbp
LCFI172:
	movq	%rsp, %rbp
LCFI173:
	pushq	%r12
LCFI174:
	pushq	%rbx
LCFI175:
	subq	$96, %rsp
LCFI176:
	movq	%rdi, %rbx
	movq	%rsi, %r12
	movq	%rsi, %rdi
	call	_strlen
	leaq	1(%rax), %rsi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, -56(%rbp)
	testq	%rax, %rax
	je	L837
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	_strcpy
	movb	$14, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$96, %rsp
	popq	%rbx
	popq	%r12
	leave
	ret
	.align 4,0x90
L837:
	movb	$-1, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-88(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-80(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$96, %rsp
	popq	%rbx
	popq	%r12
	leave
	ret
LFE90:
	.cstring
LC76:
	.ascii "true\0"
LC77:
	.ascii "false\0"
LC78:
	.ascii "nil\0"
	.text
	.align 4,0x90
.globl _value_set_str_smart
_value_set_str_smart:
LFB89:
	pushq	%rbp
LCFI177:
	movq	%rsp, %rbp
LCFI178:
	movq	%rbx, -32(%rbp)
LCFI179:
	movq	%r12, -24(%rbp)
LCFI180:
	movq	%r13, -16(%rbp)
LCFI181:
	movq	%r14, -8(%rbp)
LCFI182:
	subq	$656, %rsp
LCFI183:
	movq	%rdi, %r13
	movq	%rsi, %r12
	movl	%edx, %r14d
	movb	$-1, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	_same_type_determiner@GOTPCREL(%rip), %rax
	movl	(%rax), %esi
	testl	%esi, %esi
	jne	L839
	movq	%r12, %rdi
	call	_isnumeric
	cmpl	$1, %eax
	je	L844
L874:
	cmpl	$2, %eax
	je	L845
	cmpl	$-1, %eax
	je	L873
	movq	%r12, %rdi
	call	_is_string_literal
	testl	%eax, %eax
	je	L850
	movq	%r12, %rdi
	call	_strlen
	movq	%rax, %r14
	movb	$0, (%r12,%rax)
	movb	$13, -80(%rbp)
	leaq	-1(%rax), %rsi
	leaq	-80(%rbp), %rdi
	call	_value_malloc
	cmpb	$-1, -80(%rbp)
	je	L872
	leaq	1(%r12), %rsi
	movq	-72(%rbp), %rdi
	call	_strcpy
	movq	-72(%rbp), %rbx
	movb	$0, -2(%rbx,%r14)
	movq	%rbx, %rdi
	call	_convert_to_literal
	movq	%rax, -72(%rbp)
	movq	%rbx, %rdi
	call	_free
L872:
	movq	-80(%rbp), %rax
	jmp	L846
	.align 4,0x90
L839:
	movq	%r12, %rdi
	call	_minus_isnumeric
	cmpl	$1, %eax
	jne	L874
L844:
	movb	$11, -80(%rbp)
	leaq	-72(%rbp), %rbx
	movq	%rbx, %rdi
	call	___gmpz_init
	movl	%r14d, %edx
	movq	%r12, %rsi
	movq	%rbx, %rdi
	call	___gmpz_set_str
	movq	-80(%rbp), %rax
	jmp	L846
	.align 4,0x90
L873:
	movb	%al, -176(%rbp)
	movq	-176(%rbp), %rdi
	movq	%rdi, -224(%rbp)
	movq	-168(%rbp), %rsi
	movq	%rsi, -216(%rbp)
	movq	-160(%rbp), %rcx
	movq	%rcx, -208(%rbp)
	movq	-152(%rbp), %rdx
	movq	%rdx, -200(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -192(%rbp)
L870:
	movq	%rdi, -80(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rdi, %rax
	.align 4,0x90
L846:
	movq	%rax, (%r13)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%r13)
L838:
	movq	%r13, %rax
	movq	-32(%rbp), %rbx
	movq	-24(%rbp), %r12
	movq	-16(%rbp), %r13
	movq	-8(%rbp), %r14
	leave
	ret
	.align 4,0x90
L845:
	movb	$12, -80(%rbp)
	movq	%r12, %rdi
	call	_strlen
	leaq	0(,%rax,4), %rsi
	movq	_default_prec@GOTPCREL(%rip), %rax
	cmpq	(%rax), %rsi
	ja	L875
	leaq	-80(%rbp), %rbx
	leaq	8(%rbx), %rdi
	call	_mpfr_init
L849:
	leaq	8(%rbx), %rdi
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	movq	%r12, %rsi
	call	_mpfr_set_str
	movq	-80(%rbp), %rax
	jmp	L846
	.align 4,0x90
L875:
	leaq	-80(%rbp), %rbx
	leaq	8(%rbx), %rdi
	call	_mpfr_init2
	jmp	L849
	.align 4,0x90
L850:
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	_is_regex_literal
	testl	%eax, %eax
	jne	L876
	cmpb	$58, (%r12)
	je	L877
	leaq	LC76(%rip), %rsi
	movq	%r12, %rdi
	call	_strcmp
	testl	%eax, %eax
	jne	L863
	movl	$1, -360(%rbp)
	movb	$10, -368(%rbp)
	movq	-368(%rbp), %rdi
	movq	%rdi, -416(%rbp)
	movq	-360(%rbp), %rsi
	movq	%rsi, -408(%rbp)
	movq	-352(%rbp), %rcx
	movq	%rcx, -400(%rbp)
	movq	-344(%rbp), %rdx
	movq	%rdx, -392(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -384(%rbp)
	jmp	L870
L863:
	leaq	LC77(%rip), %rsi
	movq	%r12, %rdi
	call	_strcmp
	testl	%eax, %eax
	jne	L865
	movl	$0, -456(%rbp)
	movb	$10, -464(%rbp)
	movq	-464(%rbp), %rdi
	movq	%rdi, -512(%rbp)
	movq	-456(%rbp), %rsi
	movq	%rsi, -504(%rbp)
	movq	-448(%rbp), %rcx
	movq	%rcx, -496(%rbp)
	movq	-440(%rbp), %rdx
	movq	%rdx, -488(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -480(%rbp)
	jmp	L870
L876:
	movq	%r12, %rdi
	call	_strlen
	movq	%rax, %r14
	movb	$0, (%r12,%rax)
	movb	$16, -80(%rbp)
	leaq	-1(%rax), %rsi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, -72(%rbp)
	testq	%rax, %rax
	je	L878
	leaq	1(%r12), %rsi
	movq	%rax, %rdi
	call	_strcpy
	movq	-72(%rbp), %rbx
	movb	$0, -2(%rbx,%r14)
	movq	%rbx, %rdi
	call	_convert_regex_to_literal
	movq	%rax, -72(%rbp)
	movq	%rbx, %rdi
	call	_free
	jmp	L872
L877:
	movq	%r12, %rdi
	call	_strlen
	movq	%rax, %rsi
	movb	$17, -80(%rbp)
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, -72(%rbp)
	testq	%rax, %rax
	je	L879
	leaq	1(%r12), %rsi
	movq	%rax, %rdi
	call	_strcpy
	movq	-80(%rbp), %rax
	jmp	L846
L878:
	movb	$-1, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, (%r13)
	movq	-264(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-256(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-248(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-240(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L838
L879:
	movb	$-1, -320(%rbp)
	movq	-320(%rbp), %rax
	movq	%rax, (%r13)
	movq	-312(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-304(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-296(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-288(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L838
L865:
	leaq	LC78(%rip), %rsi
	movq	%r12, %rdi
	call	_strcmp
	testl	%eax, %eax
	jne	L867
	movb	$0, -560(%rbp)
	movq	-560(%rbp), %rcx
	movq	%rcx, -608(%rbp)
	movq	-552(%rbp), %rsi
	movq	%rsi, -600(%rbp)
	movq	-544(%rbp), %rdi
	movq	%rdi, -592(%rbp)
	movq	-536(%rbp), %rdx
	movq	%rdx, -584(%rbp)
	movq	-528(%rbp), %rax
	movq	%rax, -576(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rcx, %rax
	jmp	L846
L867:
	movb	$-1, -656(%rbp)
	movq	-656(%rbp), %rax
	movq	%rax, (%r13)
	movq	-648(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-640(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-632(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-624(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L838
LFE89:
	.cstring
	.align 3
LC79:
	.ascii "Error: In value_set(), undefined op type %d.\0"
	.text
	.align 4,0x90
.globl _value_set
_value_set:
LFB84:
	pushq	%rbp
LCFI184:
	movq	%rsp, %rbp
LCFI185:
	pushq	%r15
LCFI186:
	pushq	%r14
LCFI187:
	pushq	%r13
LCFI188:
	pushq	%r12
LCFI189:
	pushq	%rbx
LCFI190:
	subq	$744, %rsp
LCFI191:
	movq	%rdi, %r13
	movzbl	16(%rbp), %ecx
	movb	%cl, -96(%rbp)
	leal	1(%rcx), %eax
	cmpb	$42, %al
	jbe	L964
L881:
	movsbl	%cl,%edx
	leaq	LC79(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -96(%rbp)
	.align 4,0x90
L882:
	movq	-96(%rbp), %rax
	movq	%rax, (%r13)
	movq	-88(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-80(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-72(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-64(%rbp), %rax
	movq	%rax, 32(%r13)
L880:
	movq	%r13, %rax
	addq	$744, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
	.align 4,0x90
L964:
	movzbl	%al, %eax
	leaq	L900(%rip), %rdx
	movslq	(%rdx,%rax,4),%rax
	addq	%rdx, %rax
	jmp	*%rax
	.align 2,0x90
L900:
	.long	L882-L900
	.long	L884-L900
	.long	L882-L900
	.long	L882-L900
	.long	L884-L900
	.long	L885-L900
	.long	L881-L900
	.long	L881-L900
	.long	L881-L900
	.long	L881-L900
	.long	L881-L900
	.long	L884-L900
	.long	L887-L900
	.long	L888-L900
	.long	L889-L900
	.long	L889-L900
	.long	L889-L900
	.long	L889-L900
	.long	L889-L900
	.long	L890-L900
	.long	L891-L900
	.long	L892-L900
	.long	L881-L900
	.long	L893-L900
	.long	L894-L900
	.long	L895-L900
	.long	L896-L900
	.long	L881-L900
	.long	L881-L900
	.long	L881-L900
	.long	L881-L900
	.long	L897-L900
	.long	L898-L900
	.long	L898-L900
	.long	L881-L900
	.long	L881-L900
	.long	L881-L900
	.long	L881-L900
	.long	L881-L900
	.long	L881-L900
	.long	L881-L900
	.long	L899-L900
	.long	L882-L900
L884:
	movl	24(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	L882
L885:
	movq	24(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	32(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	40(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	L882
L899:
	movq	24(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	32(%rbp), %rdi
	testq	%rdi, %rdi
	je	L946
	call	_strlen
	leaq	1(%rax), %rsi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, -80(%rbp)
	testq	%rax, %rax
	je	L965
	movq	32(%rbp), %rsi
	movq	%rax, %rdi
	call	_strcpy
L950:
	movq	40(%rbp), %rdi
	testq	%rdi, %rdi
	je	L951
	call	_strlen
	leaq	1(%rax), %rsi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, -72(%rbp)
	testq	%rax, %rax
	je	L966
	movq	40(%rbp), %rsi
	movq	%rax, %rdi
	call	_strcpy
L955:
	cmpq	$0, 48(%rbp)
	je	L956
	movl	$40, %esi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, %rbx
	movq	%rax, -64(%rbp)
	testq	%rax, %rax
	je	L967
	leaq	-720(%rbp), %rdi
	movq	48(%rbp), %rdx
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	call	_value_set
	movq	-720(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-712(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-704(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-696(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-688(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L882
L887:
	leaq	24(%rbp), %rsi
	leaq	-88(%rbp), %rdi
	call	___gmpz_init_set
	jmp	L882
L888:
	leaq	-88(%rbp), %rbx
	movq	%rbx, %rdi
	call	_mpfr_init
	movl	32(%rbp), %ecx
	leaq	24(%rbp), %rsi
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	_mpfr_set4
	jmp	L882
L889:
	movq	24(%rbp), %rdi
	call	_strlen
	leaq	1(%rax), %rsi
	leaq	-96(%rbp), %rdi
	call	_value_malloc
	cmpb	$-1, -96(%rbp)
	je	L882
	movq	24(%rbp), %rsi
	movq	-88(%rbp), %rdi
	call	_strcpy
	jmp	L882
L890:
	cmpq	$0, 24(%rbp)
	je	L904
	movq	32(%rbp), %rdi
	call	_next_size
	movq	%rax, %rsi
	leaq	-96(%rbp), %rdi
	call	_value_malloc
	cmpb	$-1, -96(%rbp)
	je	L882
	movq	32(%rbp), %rax
	testq	%rax, %rax
	je	L909
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	leaq	-720(%rbp), %rax
	movq	%rax, -728(%rbp)
	.align 4,0x90
L910:
	movq	-88(%rbp), %rbx
	movq	24(%rbp), %rdx
	movq	(%rdx,%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx,%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx,%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx,%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx,%r12), %rax
	movq	%rax, 32(%rsp)
	movq	-728(%rbp), %rdi
	call	_value_set
	movq	-720(%rbp), %rax
	movq	%rax, (%rbx,%r12)
	movq	-712(%rbp), %rax
	movq	%rax, 8(%rbx,%r12)
	movq	-704(%rbp), %rax
	movq	%rax, 16(%rbx,%r12)
	movq	-696(%rbp), %rax
	movq	%rax, 24(%rbx,%r12)
	movq	-688(%rbp), %rax
	movq	%rax, 32(%rbx,%r12)
	incq	%r14
	movq	32(%rbp), %rax
	addq	$40, %r12
	cmpq	%r14, %rax
	ja	L910
L909:
	movq	%rax, -80(%rbp)
	jmp	L882
L891:
	movb	$19, -96(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, -736(%rbp)
	movl	$2, %esi
	movq	%rax, %rdi
	call	_value_malloc
	cmpb	$-1, -96(%rbp)
	je	L882
	movq	-96(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -112(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, -728(%rbp)
	movq	%rax, %rdi
	jmp	L912
	.align 4,0x90
L969:
	leaq	40(%rbx), %r12
	movb	$19, 40(%rbx)
	movl	$2, %esi
	movq	%r12, %rdi
	call	_value_malloc
	cmpb	$-1, 40(%rbx)
	je	L968
	movq	40(%rbx), %rax
	movq	%rax, -144(%rbp)
	movq	8(%r12), %rax
	movq	%rax, -136(%rbp)
	movq	16(%r12), %rax
	movq	%rax, -128(%rbp)
	movq	24(%r12), %rax
	movq	%rax, -120(%rbp)
	movq	32(%r12), %rax
	movq	%rax, -112(%rbp)
	movq	24(%rbp), %rdx
	movq	40(%rdx), %rax
	movq	%rax, 16(%rbp)
	movq	48(%rdx), %rax
	movq	%rax, 24(%rbp)
	movq	56(%rdx), %rax
	movq	%rax, 32(%rbp)
	movq	64(%rdx), %rax
	movq	%rax, 40(%rbp)
	movq	72(%rdx), %rax
	movq	%rax, 48(%rbp)
	movq	-728(%rbp), %rdi
L912:
	movq	-136(%rbp), %rbx
	movq	24(%rbp), %rdx
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	call	_value_set
	movq	-720(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-712(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-704(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-696(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-688(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	24(%rbp), %rax
	cmpb	$19, 40(%rax)
	je	L969
	movb	$0, -288(%rbp)
	movq	-288(%rbp), %rdx
	movq	%rdx, -336(%rbp)
	movq	-280(%rbp), %rax
	movq	%rax, -328(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-264(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	-256(%rbp), %rax
	movq	%rax, -304(%rbp)
	movq	%rdx, 40(%rbx)
	movq	-328(%rbp), %rax
	movq	%rax, 48(%rbx)
	movq	-320(%rbp), %rax
	movq	%rax, 56(%rbx)
	movq	-312(%rbp), %rax
	movq	%rax, 64(%rbx)
	movq	-304(%rbp), %rax
	movq	%rax, 72(%rbx)
	jmp	L882
L892:
	movq	32(%rbp), %rsi
	leaq	-96(%rbp), %rdi
	call	_value_malloc
	cmpb	$-1, -96(%rbp)
	je	L882
	movq	32(%rbp), %rax
	testq	%rax, %rax
	je	L920
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	leaq	-720(%rbp), %rax
	movq	%rax, -728(%rbp)
	.align 4,0x90
L921:
	movq	-88(%rbp), %rbx
	movq	24(%rbp), %rdx
	movq	(%rdx,%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx,%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx,%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx,%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx,%r12), %rax
	movq	%rax, 32(%rsp)
	movq	-728(%rbp), %rdi
	call	_value_set
	movq	-720(%rbp), %rax
	movq	%rax, (%rbx,%r12)
	movq	-712(%rbp), %rax
	movq	%rax, 8(%rbx,%r12)
	movq	-704(%rbp), %rax
	movq	%rax, 16(%rbx,%r12)
	movq	-696(%rbp), %rax
	movq	%rax, 24(%rbx,%r12)
	movq	-688(%rbp), %rax
	movq	%rax, 32(%rbx,%r12)
	incq	%r14
	movq	32(%rbp), %rax
	addq	$40, %r12
	cmpq	%r14, %rax
	ja	L921
L920:
	movq	%rax, -80(%rbp)
	movq	48(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	40(%rbp), %rax
	movq	%rax, -72(%rbp)
	jmp	L882
L893:
	movq	24(%rbp), %rax
	movq	%rax, -88(%rbp)
	jmp	L882
L894:
	leaq	-96(%rbp), %rdi
	movl	$88, %esi
	call	_value_malloc
	cmpb	$-1, -96(%rbp)
	je	L882
	movq	24(%rbp), %rax
	movl	(%rax), %edx
	movq	-88(%rbp), %rax
	movl	%edx, (%rax)
	movq	-88(%rbp), %rbx
	leaq	-720(%rbp), %r12
	movq	24(%rbp), %rdx
	movq	8(%rdx), %rax
	movq	%rax, (%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	40(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%r12, %rdi
	call	_value_set
	movq	-720(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-712(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-704(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-696(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	-688(%rbp), %rax
	movq	%rax, 40(%rbx)
	movq	-88(%rbp), %rbx
	movq	24(%rbp), %rdx
	movq	48(%rdx), %rax
	movq	%rax, (%rsp)
	movq	56(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	64(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	72(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	80(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%r12, %rdi
	call	_value_set
	movq	-720(%rbp), %rax
	movq	%rax, 48(%rbx)
	movq	-712(%rbp), %rax
	movq	%rax, 56(%rbx)
	movq	-704(%rbp), %rax
	movq	%rax, 64(%rbx)
	movq	-696(%rbp), %rax
	movq	%rax, 72(%rbx)
	movq	-688(%rbp), %rax
	movq	%rax, 80(%rbx)
	jmp	L882
L895:
	movq	32(%rbp), %r15
	movq	%r15, -80(%rbp)
	movq	%r15, %rdi
	call	_next_size
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	movq	%rax, -736(%rbp)
	movq	%rax, %rdi
	call	_value_malloc
	cmpb	$-1, -96(%rbp)
	je	L882
	testq	%r15, %r15
	je	L927
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	leaq	-720(%rbp), %rax
	movq	%rax, -728(%rbp)
	.align 4,0x90
L928:
	movq	-88(%rbp), %rbx
	movq	24(%rbp), %rdx
	movq	(%rdx,%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx,%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx,%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx,%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx,%r12), %rax
	movq	%rax, 32(%rsp)
	movq	-728(%rbp), %rdi
	call	_value_set
	movq	-720(%rbp), %rax
	movq	%rax, (%rbx,%r12)
	movq	-712(%rbp), %rax
	movq	%rax, 8(%rbx,%r12)
	movq	-704(%rbp), %rax
	movq	%rax, 16(%rbx,%r12)
	movq	-696(%rbp), %rax
	movq	%rax, 24(%rbx,%r12)
	movq	-688(%rbp), %rax
	movq	%rax, 32(%rbx,%r12)
	incq	%r14
	addq	$40, %r12
	cmpq	%r15, %r14
	jne	L928
L927:
	movq	40(%rbp), %rdi
	testq	%rdi, %rdi
	je	L970
	call	_strlen
	leaq	1(%rax), %rsi
	movq	-736(%rbp), %rdi
	call	_value_malloc
	cmpb	$-1, -96(%rbp)
	je	L882
	movq	40(%rbp), %rsi
	movq	-72(%rbp), %rdi
	call	_strcpy
	jmp	L882
L896:
	movzbl	24(%rbp), %eax
	movb	%al, -88(%rbp)
	cmpq	$0, 32(%rbp)
	je	L882
	movl	$40, %esi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, %rcx
	movq	%rax, -80(%rbp)
	testq	%rax, %rax
	je	L971
	movq	32(%rbp), %rdx
	movq	(%rdx), %rax
	movq	%rax, (%rcx)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rcx)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rcx)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rcx)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rcx)
	jmp	L882
L897:
	movl	$32, %esi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, %rdx
	movq	%rax, -88(%rbp)
	testq	%rax, %rax
	je	L972
	movq	24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, 24(%rdx)
	movq	-88(%rbp), %rcx
	movq	24(%rbp), %rdx
	movq	(%rdx), %rax
	movq	%rax, (%rcx)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rcx)
	movl	16(%rdx), %eax
	movl	%eax, 16(%rcx)
	jmp	L882
L898:
	movl	$112, %esi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, %rbx
	movq	%rax, -88(%rbp)
	testq	%rax, %rax
	je	L973
	movq	24(%rbp), %rax
	movq	(%rax), %rdi
	call	_strlen
	leaq	1(%rax), %rsi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, (%rbx)
	movq	-88(%rbp), %rax
	movq	(%rax), %rdi
	testq	%rdi, %rdi
	je	L974
	movq	24(%rbp), %rax
	movq	(%rax), %rsi
	call	_strcpy
	movq	-88(%rbp), %rbx
	leaq	-720(%rbp), %r12
	movq	24(%rbp), %rdx
	movq	32(%rdx), %rax
	movq	%rax, (%rsp)
	movq	40(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	48(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	56(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	64(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%r12, %rdi
	call	_value_set
	movq	-720(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	-712(%rbp), %rax
	movq	%rax, 40(%rbx)
	movq	-704(%rbp), %rax
	movq	%rax, 48(%rbx)
	movq	-696(%rbp), %rax
	movq	%rax, 56(%rbx)
	movq	-688(%rbp), %rax
	movq	%rax, 64(%rbx)
	movq	-88(%rbp), %rbx
	cmpb	$-1, 32(%rbx)
	jne	L942
	movq	32(%rbx), %rax
	movq	%rax, (%r13)
	movq	40(%rbx), %rax
	movq	%rax, 8(%r13)
	movq	48(%rbx), %rax
	movq	%rax, 16(%r13)
	movq	56(%rbx), %rax
	movq	%rax, 24(%r13)
	movq	64(%rbx), %rax
	movq	%rax, 32(%r13)
	jmp	L880
L946:
	movq	$0, -80(%rbp)
	jmp	L950
L973:
	movb	$-1, -480(%rbp)
	movq	-480(%rbp), %rax
	movq	%rax, (%r13)
	movq	-472(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-464(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-456(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-448(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L880
L904:
	movq	$0, -88(%rbp)
	jmp	L882
L972:
	movb	$-1, -432(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, (%r13)
	movq	-424(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-416(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-408(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-400(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L880
L968:
	movb	$0, 40(%rbx)
	movq	-736(%rbp), %rdi
	call	_value_clear
	movb	$-1, -192(%rbp)
	movq	-192(%rbp), %rdi
	movq	%rdi, -240(%rbp)
	movq	-184(%rbp), %rsi
	movq	%rsi, -232(%rbp)
	movq	-176(%rbp), %rcx
	movq	%rcx, -224(%rbp)
	movq	-168(%rbp), %rdx
	movq	%rdx, -216(%rbp)
	movq	-160(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	%rdi, -96(%rbp)
	movq	%rsi, -88(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rax, -64(%rbp)
	jmp	L882
L951:
	movq	$0, -72(%rbp)
	jmp	L955
L970:
	movq	$0, -72(%rbp)
	jmp	L882
L974:
	movb	$-1, -528(%rbp)
	movq	-528(%rbp), %rax
	movq	%rax, (%r13)
	movq	-520(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-512(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-504(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-496(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L880
L965:
	movb	$-1, -576(%rbp)
	movq	-576(%rbp), %rax
	movq	%rax, (%r13)
	movq	-568(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-560(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-552(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-544(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L880
L942:
	movq	24(%rbp), %rdx
	movq	72(%rdx), %rax
	movq	%rax, (%rsp)
	movq	80(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	88(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	96(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	104(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%r12, %rdi
	call	_value_set
	movq	-720(%rbp), %rax
	movq	%rax, 72(%rbx)
	movq	-712(%rbp), %rax
	movq	%rax, 80(%rbx)
	movq	-704(%rbp), %rax
	movq	%rax, 88(%rbx)
	movq	-696(%rbp), %rax
	movq	%rax, 96(%rbx)
	movq	-688(%rbp), %rax
	movq	%rax, 104(%rbx)
	movq	-88(%rbp), %rcx
	cmpb	$-1, 72(%rcx)
	je	L975
	movq	24(%rbp), %rdx
	movq	8(%rdx), %rax
	movq	%rax, 8(%rcx)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rcx)
	movl	24(%rdx), %eax
	movl	%eax, 24(%rcx)
	jmp	L882
L956:
	movq	$0, -64(%rbp)
	jmp	L882
L966:
	movb	$-1, -624(%rbp)
	movq	-624(%rbp), %rax
	movq	%rax, (%r13)
	movq	-616(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-608(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-600(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-592(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L880
L967:
	movb	$-1, -672(%rbp)
	movq	-672(%rbp), %rax
	movq	%rax, (%r13)
	movq	-664(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-656(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-648(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-640(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L880
L971:
	movb	$-1, -384(%rbp)
	movq	-384(%rbp), %rax
	movq	%rax, (%r13)
	movq	-376(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-368(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-360(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-352(%rbp), %rax
	movq	%rax, 32(%r13)
	jmp	L880
L975:
	movq	72(%rcx), %rax
	movq	%rax, (%r13)
	movq	80(%rcx), %rax
	movq	%rax, 8(%r13)
	movq	88(%rcx), %rax
	movq	%rax, 16(%r13)
	movq	96(%rcx), %rax
	movq	%rax, 24(%r13)
	movq	104(%rcx), %rax
	movq	%rax, 32(%r13)
	jmp	L880
LFE84:
	.cstring
	.align 3
LC80:
	.ascii "Argument Error: assignment is undefined for %t (variable expected).\0"
	.text
	.align 4,0x90
.globl _value_assign
_value_assign:
LFB112:
	pushq	%rbp
LCFI192:
	movq	%rsp, %rbp
LCFI193:
	pushq	%rbx
LCFI194:
	subq	$184, %rsp
LCFI195:
	movq	%rdi, %rbx
	cmpb	$15, 16(%rbp)
	je	L986
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC80(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-88(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-80(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$184, %rsp
	popq	%rbx
	leave
	ret
	.align 4,0x90
L986:
	cmpb	$-1, 56(%rbp)
	je	L979
	movq	24(%rbp), %rdx
	cmpb	$36, (%rdx)
	je	L987
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	88(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdx, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	%rsi, %rdi
	call	_value_hash_put
L983:
	movq	56(%rbp), %rax
	movq	%rax, (%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	88(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdi
	call	_value_set
	movq	%rbx, %rax
	addq	$184, %rsp
	popq	%rbx
	leave
	ret
	.align 4,0x90
L979:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rdi)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rdi)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rdi)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rdi)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rdi)
	movq	%rbx, %rax
	addq	$184, %rsp
	popq	%rbx
	leave
	ret
	.align 4,0x90
L987:
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	88(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdx, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	_global_variables@GOTPCREL(%rip), %rdi
	call	_value_hash_put
	jmp	L983
LFE112:
	.cstring
	.align 3
LC81:
	.ascii "Argument Error: Unsupported cast from %t to %t.\0"
	.text
	.align 4,0x90
.globl _value_cast
_value_cast:
LFB99:
	pushq	%rbp
LCFI196:
	movq	%rsp, %rbp
LCFI197:
	pushq	%r15
LCFI198:
	pushq	%r14
LCFI199:
	pushq	%r13
LCFI200:
	pushq	%r12
LCFI201:
	pushq	%rbx
LCFI202:
	subq	$1416, %rsp
LCFI203:
	movq	%rdi, %r15
	movl	%esi, %r12d
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rdx
	movq	%rdx, -56(%rbp)
	xorl	%edx, %edx
	movb	$-1, -720(%rbp)
	movq	-720(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-712(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-704(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-696(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-688(%rbp), %rax
	movq	%rax, -64(%rbp)
	cmpl	$20, %esi
	jbe	L1125
L989:
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movl	%r12d, %edx
	leaq	LC81(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	leaq	-96(%rbp), %rdi
	call	_value_clear
	movb	$-1, -1248(%rbp)
	movq	-1248(%rbp), %rax
	movq	%rax, (%r15)
	movq	-1240(%rbp), %rax
	movq	%rax, 8(%r15)
	movq	-1232(%rbp), %rax
	movq	%rax, 16(%r15)
	movq	-1224(%rbp), %rax
	movq	%rax, 24(%r15)
	movq	-1216(%rbp), %rax
	movq	%rax, 32(%r15)
	.align 4,0x90
L988:
	movq	%r15, %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	-56(%rbp), %rdx
	xorq	(%rcx), %rdx
	jne	L1126
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
	.align 4,0x90
L1125:
	mov	%esi, %eax
	leaq	L999(%rip), %rdx
	movslq	(%rdx,%rax,4),%rax
	addq	%rdx, %rax
	jmp	*%rax
	.align 2,0x90
L999:
	.long	L990-L999
	.long	L989-L999
	.long	L989-L999
	.long	L989-L999
	.long	L989-L999
	.long	L989-L999
	.long	L989-L999
	.long	L989-L999
	.long	L989-L999
	.long	L989-L999
	.long	L991-L999
	.long	L992-L999
	.long	L993-L999
	.long	L994-L999
	.long	L989-L999
	.long	L989-L999
	.long	L995-L999
	.long	L989-L999
	.long	L996-L999
	.long	L997-L999
	.long	L998-L999
L998:
	movzbl	16(%rbp), %eax
	cmpb	$20, %al
	je	L1123
	cmpb	$18, %al
	je	L1127
	cmpb	$19, %al
	je	L1128
	leaq	-1296(%rbp), %rdi
	xorl	%eax, %eax
	call	_value_hash_init
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	movb	$0, -1200(%rbp)
	movq	-1200(%rbp), %rdx
	movq	%rdx, -672(%rbp)
	movq	-1192(%rbp), %rax
	movq	%rax, -664(%rbp)
	movq	-1184(%rbp), %rax
	movq	%rax, -656(%rbp)
	movq	-1176(%rbp), %rax
	movq	%rax, -648(%rbp)
	movq	-1168(%rbp), %rax
	movq	%rax, -640(%rbp)
	leaq	-96(%rbp), %rdi
	movq	%rdx, 40(%rsp)
	movq	-664(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-656(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-648(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-640(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_put
	.align 4,0x90
L1000:
	movq	-96(%rbp), %rax
	movq	%rax, (%r15)
	movq	-88(%rbp), %rax
	movq	%rax, 8(%r15)
	movq	-80(%rbp), %rax
	movq	%rax, 16(%r15)
	movq	-72(%rbp), %rax
	movq	%rax, 24(%r15)
	movq	-64(%rbp), %rax
	movq	%rax, 32(%r15)
	jmp	L988
L990:
	leaq	-96(%rbp), %rdi
	call	_value_clear
	movb	$0, -96(%rbp)
	jmp	L1000
L994:
	movzbl	16(%rbp), %edx
	cmpb	$13, %dl
	je	L1123
	leal	-16(%rdx), %eax
	cmpb	$1, %al
	jbe	L1025
	cmpb	$14, %dl
	je	L1025
	cmpb	$15, %dl
	je	L1025
	movb	$13, -96(%rbp)
	movl	$256, %r12d
	jmp	L1028
	.align 4,0x90
L1029:
	salq	$4, %r12
	movq	%r13, %rsp
L1028:
	movq	%rsp, %r13
	leaq	16(%r12), %rax
	subq	%rax, %rsp
	leaq	80(%rsp), %rbx
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	xorl	%edx, %edx
	movq	%r12, %rsi
	movq	%rbx, %rdi
	call	_value_put
	testl	%eax, %eax
	jne	L1029
	movq	%rbx, %rdi
	call	_strlen
	leaq	1(%rax), %rsi
	xorl	%edi, %edi
	call	_value_malloc
	movq	%rax, -88(%rbp)
	testq	%rax, %rax
	je	L1129
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	_strcpy
	movq	%r13, %rsp
	jmp	L1000
L995:
	cmpb	$13, 16(%rbp)
	jne	L989
	leaq	-1296(%rbp), %rdi
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_set
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	movb	$16, -96(%rbp)
	jmp	L1000
L996:
	movzbl	16(%rbp), %eax
	cmpb	$18, %al
	je	L1123
	cmpb	$13, %al
	je	L1130
	cmpb	$19, %al
	je	L1131
	cmpb	$20, %al
	je	L1132
	cmpb	$23, %al
	je	L1133
	cmpb	$24, %al
	je	L1134
	leaq	-1296(%rbp), %rdi
	movl	$1, %edx
	leaq	16(%rbp), %rsi
	call	_value_set_ary
	jmp	L1124
L997:
	movzbl	16(%rbp), %eax
	cmpb	$19, %al
	je	L1123
	cmpb	$18, %al
	je	L1135
	cmpb	$24, %al
	je	L1136
	leaq	-1296(%rbp), %r12
	movl	$19, %esi
	movq	%r12, %rdi
	call	_value_init
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rbx
	movq	%rbx, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	%r12, %rdi
	call	_value_set
	movq	-1296(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-1288(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-1280(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-1272(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-1264(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	-88(%rbp), %rbx
	movl	$19, %esi
	movq	%r12, %rdi
	call	_value_init
	movq	-1296(%rbp), %rax
	movq	%rax, 40(%rbx)
	movq	-1288(%rbp), %rax
	movq	%rax, 48(%rbx)
	movq	-1280(%rbp), %rax
	movq	%rax, 56(%rbx)
	movq	-1272(%rbp), %rax
	movq	%rax, 64(%rbx)
	movq	-1264(%rbp), %rax
	movq	%rax, 72(%rbx)
	jmp	L1000
L992:
	movzbl	16(%rbp), %eax
	cmpb	$11, %al
	je	L1137
	cmpb	$12, %al
	je	L1138
	movl	$1, %edx
	cmpb	$13, %al
	je	L1139
L1010:
	movb	$11, -96(%rbp)
L1015:
	testl	%edx, %edx
	je	L1000
	jmp	L989
L993:
	movzbl	16(%rbp), %eax
	cmpb	$12, %al
	je	L1140
	cmpb	$11, %al
	je	L1141
	movl	$1, %edx
	cmpb	$13, %al
	je	L1142
L1018:
	movb	$12, -96(%rbp)
	jmp	L1015
L991:
	movb	$10, -96(%rbp)
	movq	16(%rbp), %rax
	movq	%rax, -768(%rbp)
	movq	24(%rbp), %rax
	movq	%rax, -760(%rbp)
	movq	32(%rbp), %rax
	movq	%rax, -752(%rbp)
	movq	40(%rbp), %rax
	movq	%rax, -744(%rbp)
	movq	48(%rbp), %rax
	movq	%rax, -736(%rbp)
	movzbl	-768(%rbp), %eax
	incl	%eax
	cmpb	$24, %al
	jbe	L1143
L1001:
	movl	$1, %eax
L1007:
	movl	%eax, -88(%rbp)
	jmp	L1000
L1123:
	leaq	-1296(%rbp), %rdi
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_set
L1124:
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	jmp	L1000
L1143:
	movzbl	%al, %eax
	leaq	L1006(%rip), %rdx
	movslq	(%rdx,%rax,4),%rax
	addq	%rdx, %rax
	jmp	*%rax
	.align 2,0x90
L1006:
	.long	L1002-L1006
	.long	L1002-L1006
	.long	L1001-L1006
	.long	L1001-L1006
	.long	L1001-L1006
	.long	L1001-L1006
	.long	L1001-L1006
	.long	L1001-L1006
	.long	L1001-L1006
	.long	L1001-L1006
	.long	L1001-L1006
	.long	L1003-L1006
	.long	L1004-L1006
	.long	L1004-L1006
	.long	L1005-L1006
	.long	L1001-L1006
	.long	L1001-L1006
	.long	L1001-L1006
	.long	L1001-L1006
	.long	L1005-L1006
	.long	L1005-L1006
	.long	L1005-L1006
	.long	L1005-L1006
	.long	L1001-L1006
	.long	L1005-L1006
L1025:
	leaq	-1296(%rbp), %rdi
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_set
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	movb	$13, -96(%rbp)
	jmp	L1000
L1005:
	movq	-768(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-760(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-752(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-744(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-736(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_empty_p
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	jmp	L1007
L1004:
	movq	_value_zero@GOTPCREL(%rip), %rdx
	movq	(%rdx), %rax
	movq	%rax, 40(%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 48(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 56(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 64(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 72(%rsp)
	movq	-768(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-760(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-752(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-744(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-736(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_ne
	jmp	L1007
L1003:
	movl	-760(%rbp), %eax
	jmp	L1007
L1002:
	xorl	%eax, %eax
	jmp	L1007
L1133:
	movq	%rsp, -1328(%rbp)
	movq	24(%rbp), %rdx
	leaq	-240(%rbp), %rbx
	movq	8(%rdx), %rax
	movq	%rax, 40(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 48(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 56(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 64(%rsp)
	movq	40(%rdx), %rax
	movq	%rax, 72(%rsp)
	movq	48(%rdx), %rax
	movq	%rax, (%rsp)
	movq	56(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	64(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	72(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	80(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdi
	call	_value_sub
	leaq	-288(%rbp), %rdi
	movq	-240(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-232(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-224(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-216(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-208(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_abs
	movq	%rbx, %rdi
	call	_value_clear
	movq	-288(%rbp), %rdx
	movq	%rdx, -864(%rbp)
	movq	-280(%rbp), %rax
	movq	%rax, -856(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, -848(%rbp)
	movq	-264(%rbp), %rax
	movq	%rax, -840(%rbp)
	movq	-256(%rbp), %rax
	movq	%rax, -832(%rbp)
	movzbl	-864(%rbp), %eax
	cmpb	$11, %al
	je	L1144
	cmpb	$12, %al
	je	L1145
	movq	%rdx, (%rsp)
	movq	-856(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-848(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-840(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-832(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	LC46(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	xorl	%r13d, %r13d
L1066:
	movq	24(%rbp), %rdx
	cmpl	$1, (%rdx)
	sbbq	$-1, %r13
	leaq	(%r13,%r13,4), %rax
	leaq	30(,%rax,8), %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	leaq	80(%rsp), %r14
	movq	48(%rdx), %rax
	movq	%rax, 40(%rsp)
	movq	56(%rdx), %rax
	movq	%rax, 48(%rsp)
	movq	64(%rdx), %rax
	movq	%rax, 56(%rsp)
	movq	72(%rdx), %rax
	movq	%rax, 64(%rsp)
	movq	80(%rdx), %rax
	movq	%rax, 72(%rsp)
	movq	8(%rdx), %rax
	movq	%rax, (%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	40(%rdx), %rax
	movq	%rax, 32(%rsp)
	call	_value_le
	testl	%eax, %eax
	je	L1071
	leaq	-336(%rbp), %rdx
	movq	%rdx, -1352(%rbp)
	movq	24(%rbp), %rdx
	movq	8(%rdx), %rax
	movq	%rax, (%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	40(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	-1352(%rbp), %rdi
	call	_value_set
	movq	-336(%rbp), %rax
	movq	%rax, (%r14)
	movq	-328(%rbp), %rax
	movq	%rax, 8(%r14)
	movq	-320(%rbp), %rax
	movq	%rax, 16(%r14)
	movq	-312(%rbp), %rax
	movq	%rax, 24(%r14)
	movq	-304(%rbp), %rax
	movq	%rax, 32(%r14)
	cmpq	$1, %r13
	jbe	L1077
	movq	%r14, %rbx
	movl	$1, %r12d
L1075:
	movq	-336(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-328(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-320(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-312(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-304(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	-1352(%rbp), %rdi
	call	_value_inc
	movq	-336(%rbp), %rax
	movq	%rax, 40(%rbx)
	movq	-328(%rbp), %rax
	movq	%rax, 48(%rbx)
	movq	-320(%rbp), %rax
	movq	%rax, 56(%rbx)
	movq	-312(%rbp), %rax
	movq	%rax, 64(%rbx)
	movq	-304(%rbp), %rax
	movq	%rax, 72(%rbx)
	incq	%r12
	addq	$40, %rbx
	cmpq	%r13, %r12
	jne	L1075
L1077:
	leaq	-1296(%rbp), %rdi
	movq	%r13, %rdx
	movq	%r14, %rsi
	call	_value_set_ary_ref
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-1328(%rbp), %rsp
	jmp	L1000
L1128:
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_length
	leaq	-1296(%rbp), %rdi
	leaq	(%rax,%rax), %rsi
	call	_value_hash_init_capacity
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	16(%rbp), %rax
	movq	%rax, -528(%rbp)
	movq	24(%rbp), %rax
	movq	%rax, -520(%rbp)
	movq	32(%rbp), %rax
	movq	%rax, -512(%rbp)
	movq	40(%rbp), %rax
	movq	%rax, -504(%rbp)
	movq	48(%rbp), %rax
	movq	%rax, -496(%rbp)
	leaq	-96(%rbp), %r12
	jmp	L1108
	.align 4,0x90
L1109:
	movb	$0, -1152(%rbp)
	movq	-1152(%rbp), %rdx
	movq	%rdx, -624(%rbp)
	movq	-1144(%rbp), %rax
	movq	%rax, -616(%rbp)
	movq	-1136(%rbp), %rax
	movq	%rax, -608(%rbp)
	movq	-1128(%rbp), %rax
	movq	%rax, -600(%rbp)
	movq	-1120(%rbp), %rax
	movq	%rax, -592(%rbp)
	movq	-520(%rbp), %rbx
	movq	%rdx, 40(%rsp)
	movq	-616(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-608(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-600(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-592(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%rbx), %rax
	movq	%rax, (%rsp)
	movq	8(%rbx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rbx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rbx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rbx), %rax
	movq	%rax, 32(%rsp)
	movq	%r12, %rdi
	call	_value_hash_put
	movq	40(%rbx), %rax
	movq	%rax, -528(%rbp)
	movq	48(%rbx), %rax
	movq	%rax, -520(%rbp)
	movq	56(%rbx), %rax
	movq	%rax, -512(%rbp)
	movq	64(%rbx), %rax
	movq	%rax, -504(%rbp)
	movq	72(%rbx), %rax
	movq	%rax, -496(%rbp)
L1108:
	movq	-528(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-520(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-512(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-504(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-496(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_empty_p
	testl	%eax, %eax
	je	L1109
	jmp	L1000
L1136:
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_length
	movq	%rax, -1304(%rbp)
	leaq	-1296(%rbp), %rax
	movq	%rax, -1360(%rbp)
	movl	$19, %esi
	movq	%rax, %rdi
	call	_value_init
	movq	-1296(%rbp), %rdi
	movq	%rdi, -96(%rbp)
	movq	-1288(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	-1280(%rbp), %rcx
	movq	%rcx, -80(%rbp)
	movq	-1272(%rbp), %rdx
	movq	%rdx, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -1304(%rbp)
	je	L1000
	movq	%rdi, -480(%rbp)
	movq	%rsi, -472(%rbp)
	movq	%rcx, -464(%rbp)
	movq	%rdx, -456(%rbp)
	movq	%rax, -448(%rbp)
	cmpq	$1, -1304(%rbp)
	je	L1097
	movl	$1, %r14d
	xorl	%r13d, %r13d
L1099:
	movq	-472(%rbp), %r12
	movq	24(%rbp), %rdx
	movq	(%r13,%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%r13,%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r13,%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r13,%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r13,%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	-1360(%rbp), %rdi
	call	_value_set
	movq	-1296(%rbp), %rax
	movq	%rax, (%r12)
	movq	-1288(%rbp), %rax
	movq	%rax, 8(%r12)
	movq	-1280(%rbp), %rax
	movq	%rax, 16(%r12)
	movq	-1272(%rbp), %rax
	movq	%rax, 24(%r12)
	movq	-1264(%rbp), %rax
	movq	%rax, 32(%r12)
	leaq	40(%r12), %rbx
	movl	$19, %esi
	movq	-1360(%rbp), %rdi
	call	_value_init
	movq	-1296(%rbp), %rax
	movq	%rax, 40(%r12)
	movq	-1288(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-1280(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-1272(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-1264(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	40(%r12), %rax
	movq	%rax, -480(%rbp)
	movq	8(%rbx), %rax
	movq	%rax, -472(%rbp)
	movq	16(%rbx), %rax
	movq	%rax, -464(%rbp)
	movq	24(%rbx), %rax
	movq	%rax, -456(%rbp)
	movq	32(%rbx), %rax
	movq	%rax, -448(%rbp)
	incq	%r14
	addq	$40, %r13
	cmpq	-1304(%rbp), %r14
	jne	L1099
L1097:
	movq	-472(%rbp), %rbx
	movq	-1304(%rbp), %rdx
	leaq	(%rdx,%rdx,4), %rax
	salq	$3, %rax
	addq	24(%rbp), %rax
	movq	-40(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	-32(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	-24(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	-16(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	-8(%rax), %rax
	movq	%rax, 32(%rsp)
	movq	-1360(%rbp), %rdi
	call	_value_set
	movq	-1296(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-1288(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-1280(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-1272(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-1264(%rbp), %rax
	movq	%rax, 32(%rbx)
	movb	$0, -1008(%rbp)
	movq	-1008(%rbp), %rdx
	movq	%rdx, -1056(%rbp)
	movq	-1000(%rbp), %rax
	movq	%rax, -1048(%rbp)
	movq	-992(%rbp), %rax
	movq	%rax, -1040(%rbp)
	movq	-984(%rbp), %rax
	movq	%rax, -1032(%rbp)
	movq	-976(%rbp), %rax
	movq	%rax, -1024(%rbp)
	movq	%rdx, 40(%rbx)
	movq	-1048(%rbp), %rax
	movq	%rax, 48(%rbx)
	movq	-1040(%rbp), %rax
	movq	%rax, 56(%rbx)
	movq	-1032(%rbp), %rax
	movq	%rax, 64(%rbx)
	movq	-1024(%rbp), %rax
	movq	%rax, 72(%rbx)
	jmp	L1000
L1126:
	call	___stack_chk_fail
L1137:
	leaq	-1296(%rbp), %rdi
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_set
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	xorl	%edx, %edx
	jmp	L1010
L1140:
	leaq	-1296(%rbp), %rdi
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_set
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	xorl	%edx, %edx
	jmp	L1018
L1134:
	movb	$18, -96(%rbp)
	movq	32(%rbp), %rdi
	movq	%rdi, -80(%rbp)
	call	_next_size
	movq	%rax, %rsi
	leaq	-96(%rbp), %rdi
	call	_value_malloc
	cmpb	$-1, -96(%rbp)
	je	L1000
	cmpq	$0, -80(%rbp)
	je	L1000
	xorl	%r13d, %r13d
	xorl	%r12d, %r12d
	leaq	-1296(%rbp), %rax
	movq	%rax, -1360(%rbp)
L1085:
	movq	-88(%rbp), %rbx
	movq	24(%rbp), %rdx
	movq	(%r12,%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%r12,%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12,%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12,%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12,%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	-1360(%rbp), %rdi
	call	_value_set
	movq	-1296(%rbp), %rax
	movq	%rax, (%r12,%rbx)
	movq	-1288(%rbp), %rax
	movq	%rax, 8(%r12,%rbx)
	movq	-1280(%rbp), %rax
	movq	%rax, 16(%r12,%rbx)
	movq	-1272(%rbp), %rax
	movq	%rax, 24(%r12,%rbx)
	movq	-1264(%rbp), %rax
	movq	%rax, 32(%r12,%rbx)
	incq	%r13
	addq	$40, %r12
	cmpq	%r13, -80(%rbp)
	ja	L1085
	jmp	L1000
L1138:
	leaq	-88(%rbp), %rbx
	movq	%rbx, %rdi
	call	___gmpz_init
	leaq	24(%rbp), %rsi
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	_mpfr_get_z
	xorl	%edx, %edx
	jmp	L1010
L1141:
	leaq	-88(%rbp), %rbx
	movq	%rbx, %rdi
	call	_mpfr_init
	leaq	24(%rbp), %rsi
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	_mpfr_set_z
	xorl	%edx, %edx
	jmp	L1018
L1135:
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_length
	movq	%rax, -1312(%rbp)
	leaq	-1296(%rbp), %rdx
	movq	%rdx, -1360(%rbp)
	movl	$19, %esi
	movq	%rdx, %rdi
	call	_value_init
	movq	-1296(%rbp), %rdi
	movq	%rdi, -96(%rbp)
	movq	-1288(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	-1280(%rbp), %rcx
	movq	%rcx, -80(%rbp)
	movq	-1272(%rbp), %rdx
	movq	%rdx, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -1312(%rbp)
	je	L1000
	movq	%rdi, -432(%rbp)
	movq	%rsi, -424(%rbp)
	movq	%rcx, -416(%rbp)
	movq	%rdx, -408(%rbp)
	movq	%rax, -400(%rbp)
	cmpq	$1, -1312(%rbp)
	je	L1091
	movl	$1, %r14d
	xorl	%r13d, %r13d
L1093:
	movq	-424(%rbp), %r12
	movq	24(%rbp), %rdx
	movq	(%r13,%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%r13,%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r13,%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r13,%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r13,%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	-1360(%rbp), %rdi
	call	_value_set
	movq	-1296(%rbp), %rax
	movq	%rax, (%r12)
	movq	-1288(%rbp), %rax
	movq	%rax, 8(%r12)
	movq	-1280(%rbp), %rax
	movq	%rax, 16(%r12)
	movq	-1272(%rbp), %rax
	movq	%rax, 24(%r12)
	movq	-1264(%rbp), %rax
	movq	%rax, 32(%r12)
	leaq	40(%r12), %rbx
	movl	$19, %esi
	movq	-1360(%rbp), %rdi
	call	_value_init
	movq	-1296(%rbp), %rax
	movq	%rax, 40(%r12)
	movq	-1288(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-1280(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-1272(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-1264(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	40(%r12), %rax
	movq	%rax, -432(%rbp)
	movq	8(%rbx), %rax
	movq	%rax, -424(%rbp)
	movq	16(%rbx), %rax
	movq	%rax, -416(%rbp)
	movq	24(%rbx), %rax
	movq	%rax, -408(%rbp)
	movq	32(%rbx), %rax
	movq	%rax, -400(%rbp)
	incq	%r14
	addq	$40, %r13
	cmpq	-1312(%rbp), %r14
	jne	L1093
L1091:
	movq	-424(%rbp), %rbx
	movq	-1312(%rbp), %rcx
	leaq	(%rcx,%rcx,4), %rax
	salq	$3, %rax
	addq	24(%rbp), %rax
	movq	-40(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	-32(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	-24(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	-16(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	-8(%rax), %rax
	movq	%rax, 32(%rsp)
	movq	-1360(%rbp), %rdi
	call	_value_set
	movq	-1296(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-1288(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-1280(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-1272(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-1264(%rbp), %rax
	movq	%rax, 32(%rbx)
	movb	$0, -912(%rbp)
	movq	-912(%rbp), %rdx
	movq	%rdx, -960(%rbp)
	movq	-904(%rbp), %rax
	movq	%rax, -952(%rbp)
	movq	-896(%rbp), %rax
	movq	%rax, -944(%rbp)
	movq	-888(%rbp), %rax
	movq	%rax, -936(%rbp)
	movq	-880(%rbp), %rax
	movq	%rax, -928(%rbp)
	movq	%rdx, 40(%rbx)
	movq	-952(%rbp), %rax
	movq	%rax, 48(%rbx)
	movq	-944(%rbp), %rax
	movq	%rax, 56(%rbx)
	movq	-936(%rbp), %rax
	movq	%rax, 64(%rbx)
	movq	-928(%rbp), %rax
	movq	%rax, 72(%rbx)
	jmp	L1000
L1127:
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_length
	movq	%rax, %r13
	leaq	-1296(%rbp), %rdi
	leaq	(%rax,%rax), %rsi
	call	_value_hash_init_capacity
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	testq	%r13, %r13
	je	L1000
	xorl	%r12d, %r12d
	xorl	%ebx, %ebx
	leaq	-96(%rbp), %r14
	.align 4,0x90
L1105:
	movb	$0, -1104(%rbp)
	movq	-1104(%rbp), %rdx
	movq	%rdx, -576(%rbp)
	movq	-1096(%rbp), %rax
	movq	%rax, -568(%rbp)
	movq	-1088(%rbp), %rax
	movq	%rax, -560(%rbp)
	movq	-1080(%rbp), %rax
	movq	%rax, -552(%rbp)
	movq	-1072(%rbp), %rax
	movq	%rax, -544(%rbp)
	movq	%rdx, 40(%rsp)
	movq	-568(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-560(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-552(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-544(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	24(%rbp), %rdx
	movq	(%rbx,%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rbx,%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rbx,%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rbx,%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rbx,%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	incq	%r12
	addq	$40, %rbx
	cmpq	%r13, %r12
	jne	L1105
	jmp	L1000
L1130:
	movq	%rsp, -1336(%rbp)
	movq	24(%rbp), %rbx
	movq	%rbx, %rdi
	call	_strlen
	movq	%rax, -1320(%rbp)
	leaq	(%rax,%rax,4), %rax
	leaq	30(,%rax,8), %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	leaq	80(%rsp), %r13
	movb	$0, -815(%rbp)
	cmpq	$0, -1320(%rbp)
	je	L1039
	xorl	%r14d, %r14d
	leaq	-1296(%rbp), %rcx
	movq	%rcx, -1360(%rbp)
	leaq	-816(%rbp), %rax
	movq	%rax, -1368(%rbp)
	movq	%rax, %rsi
	movq	%rcx, %rdi
	jmp	L1041
	.align 4,0x90
L1112:
	movq	24(%rbp), %rbx
	movq	-1368(%rbp), %rsi
	movq	-1360(%rbp), %rdi
L1041:
	movzbl	(%r14,%rbx), %eax
	movb	%al, -816(%rbp)
	leaq	(%r14,%r14,4), %r12
	leaq	0(,%r12,8), %rbx
	call	_value_set_str
	movq	-1296(%rbp), %rax
	movq	%rax, (%r13,%r12,8)
	movq	-1288(%rbp), %rax
	movq	%rax, 8(%rbx,%r13)
	movq	-1280(%rbp), %rax
	movq	%rax, 16(%rbx,%r13)
	movq	-1272(%rbp), %rax
	movq	%rax, 24(%rbx,%r13)
	movq	-1264(%rbp), %rax
	movq	%rax, 32(%rbx,%r13)
	incq	%r14
	cmpq	-1320(%rbp), %r14
	jne	L1112
	movq	-1320(%rbp), %rdx
	movq	%r13, %rsi
	movq	-1360(%rbp), %rdi
	call	_value_set_ary
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	%r13, %rbx
	xorl	%r12d, %r12d
	.align 4,0x90
L1043:
	movq	%rbx, %rdi
	call	_value_clear
	incq	%r12
	addq	$40, %rbx
	cmpq	-1320(%rbp), %r12
	jne	L1043
L1044:
	movq	-1336(%rbp), %rsp
	jmp	L1000
L1142:
	movq	24(%rbp), %rsi
	leaq	-88(%rbp), %rdi
	xorl	%ecx, %ecx
	andq	$0xffffffffffffff00, %rdx
	call	_mpfr_init_set_str
	xorl	%edx, %edx
	jmp	L1018
L1131:
	movq	%rsp, %rbx
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_length
	movq	%rax, %r8
	leaq	(%rax,%rax,4), %rax
	leaq	30(,%rax,8), %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	leaq	80(%rsp), %rsi
	movq	16(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	24(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	32(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	40(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	48(%rbp), %rax
	movq	%rax, -112(%rbp)
	testq	%r8, %r8
	je	L1047
	movq	%rsi, %rcx
	xorl	%edi, %edi
L1049:
	movq	-136(%rbp), %rdx
	movq	(%rdx), %rax
	movq	%rax, (%rcx)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rcx)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rcx)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rcx)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rcx)
	movq	40(%rdx), %rax
	movq	%rax, -144(%rbp)
	movq	48(%rdx), %rax
	movq	%rax, -136(%rbp)
	movq	56(%rdx), %rax
	movq	%rax, -128(%rbp)
	movq	64(%rdx), %rax
	movq	%rax, -120(%rbp)
	movq	72(%rdx), %rax
	movq	%rax, -112(%rbp)
	incq	%rdi
	addq	$40, %rcx
	cmpq	%r8, %rdi
	jne	L1049
L1047:
	leaq	-1296(%rbp), %rdi
	movq	%r8, %rdx
	call	_value_set_ary
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	%rbx, %rsp
	jmp	L1000
L1139:
	movq	24(%rbp), %rsi
	leaq	-88(%rbp), %rdi
	andq	$0xffffffffffffff00, %rdx
	call	___gmpz_init_set_str
	xorl	%edx, %edx
	jmp	L1010
L1132:
	movq	%rsp, %r13
	movq	48(%rbp), %r12
	leaq	(%r12,%r12,4), %rax
	leaq	30(,%rax,8), %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	leaq	80(%rsp), %rsi
	cmpq	$0, 32(%rbp)
	je	L1052
	xorl	%r11d, %r11d
	xorl	%ebx, %ebx
	xorl	%r10d, %r10d
	jmp	L1054
L1055:
	incq	%r11
	addq	$40, %r10
	cmpq	%r11, 32(%rbp)
	jbe	L1052
L1054:
	movq	24(%rbp), %rdx
	movq	(%r10,%rdx), %rax
	movq	%rax, -192(%rbp)
	movq	8(%r10,%rdx), %rcx
	movq	%rcx, -184(%rbp)
	movq	16(%r10,%rdx), %r9
	movq	%r9, -176(%rbp)
	movq	24(%r10,%rdx), %rax
	movq	%rax, -168(%rbp)
	movq	32(%r10,%rdx), %rax
	movq	%rax, -160(%rbp)
	cmpb	$18, -192(%rbp)
	jne	L1055
	testq	%r9, %r9
	je	L1055
	movq	%rcx, %rdi
	xorl	%r8d, %r8d
	jmp	L1058
	.align 4,0x90
L1059:
	incq	%r8
	addq	$40, %rdi
	cmpq	%r9, %r8
	je	L1055
L1058:
	cmpb	$18, (%rdi)
	jne	L1059
	cmpq	$2, 16(%rdi)
	jne	L1059
	leaq	(%rbx,%rbx,4), %rdx
	leaq	0(,%rdx,8), %rcx
	movq	(%rdi), %rax
	movq	%rax, (%rsi,%rdx,8)
	movq	8(%rdi), %rax
	movq	%rax, 8(%rcx,%rsi)
	movq	16(%rdi), %rax
	movq	%rax, 16(%rcx,%rsi)
	movq	24(%rdi), %rax
	movq	%rax, 24(%rcx,%rsi)
	movq	32(%rdi), %rax
	movq	%rax, 32(%rcx,%rsi)
	incq	%rbx
	jmp	L1059
L1052:
	leaq	-1296(%rbp), %rdi
	movq	%r12, %rdx
	call	_value_set_ary
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	%r13, %rsp
	jmp	L1000
L1129:
	movb	$-1, -816(%rbp)
	movq	-816(%rbp), %rax
	movq	%rax, (%r15)
	movq	-808(%rbp), %rax
	movq	%rax, 8(%r15)
	movq	-800(%rbp), %rax
	movq	%rax, 16(%r15)
	movq	-792(%rbp), %rax
	movq	%rax, 24(%r15)
	movq	-784(%rbp), %rax
	movq	%rax, 32(%r15)
	movq	%r13, %rsp
	jmp	L988
L1071:
	leaq	-384(%rbp), %rcx
	movq	%rcx, -1344(%rbp)
	movq	24(%rbp), %rdx
	movq	8(%rdx), %rax
	movq	%rax, (%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	40(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%rcx, %rdi
	call	_value_set
	movq	-384(%rbp), %rax
	movq	%rax, (%r14)
	movq	-376(%rbp), %rax
	movq	%rax, 8(%r14)
	movq	-368(%rbp), %rax
	movq	%rax, 16(%r14)
	movq	-360(%rbp), %rax
	movq	%rax, 24(%r14)
	movq	-352(%rbp), %rax
	movq	%rax, 32(%r14)
	cmpq	$1, %r13
	jbe	L1077
	movq	%r14, %rbx
	movl	$1, %r12d
L1079:
	movq	-384(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-376(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-368(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-360(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-352(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	-1344(%rbp), %rdi
	call	_value_dec
	movq	-384(%rbp), %rax
	movq	%rax, 40(%rbx)
	movq	-376(%rbp), %rax
	movq	%rax, 48(%rbx)
	movq	-368(%rbp), %rax
	movq	%rax, 56(%rbx)
	movq	-360(%rbp), %rax
	movq	%rax, 64(%rbx)
	movq	-352(%rbp), %rax
	movq	%rax, 72(%rbx)
	incq	%r12
	addq	$40, %rbx
	cmpq	%r13, %r12
	jne	L1079
	jmp	L1077
L1145:
	leaq	-856(%rbp), %rdi
	xorl	%esi, %esi
	call	_mpfr_get_si
	movq	%rax, %r13
	jmp	L1066
L1039:
	leaq	-1296(%rbp), %rdi
	xorl	%edx, %edx
	movq	%r13, %rsi
	call	_value_set_ary
	movq	-1296(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-1288(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-1280(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-1272(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, -64(%rbp)
	jmp	L1044
L1144:
	leaq	-856(%rbp), %rdi
	call	___gmpz_get_si
	movq	%rax, %r13
	jmp	L1066
LFE99:
	.align 4,0x90
.globl _value_copy
_value_copy:
LFB91:
	pushq	%rbp
LCFI204:
	movq	%rsp, %rbp
LCFI205:
	pushq	%r15
LCFI206:
	pushq	%r14
LCFI207:
	pushq	%r13
LCFI208:
	pushq	%r12
LCFI209:
	pushq	%rbx
LCFI210:
	subq	$232, %rsp
LCFI211:
	movq	%rdi, -208(%rbp)
	movzbl	16(%rbp), %eax
	movb	%al, -96(%rbp)
	cmpb	$18, %al
	je	L1173
	cmpb	$19, %al
	je	L1174
	cmpb	$20, %al
	je	L1175
	movb	%al, 16(%rbp)
	leaq	-192(%rbp), %rdi
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_set
	movq	-192(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-184(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-168(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-160(%rbp), %rax
	movq	%rax, -64(%rbp)
L1152:
	movq	-96(%rbp), %rax
	movq	-208(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-88(%rbp), %rax
	movq	%rax, 8(%rdx)
	movq	-80(%rbp), %rax
	movq	%rax, 16(%rdx)
	movq	-72(%rbp), %rax
	movq	%rax, 24(%rdx)
	movq	-64(%rbp), %rax
	movq	%rax, 32(%rdx)
	movq	-208(%rbp), %rax
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
L1174:
	movq	-96(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -112(%rbp)
	leaq	-144(%rbp), %rbx
	jmp	L1157
	.align 4,0x90
L1176:
	movq	24(%rbp), %rcx
	movq	-136(%rbp), %rdx
	movq	(%rcx), %rax
	movq	%rax, (%rdx)
	movq	8(%rcx), %rax
	movq	%rax, 8(%rdx)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rdx)
	movq	24(%rcx), %rax
	movq	%rax, 24(%rdx)
	movq	32(%rcx), %rax
	movq	%rax, 32(%rdx)
	movq	-136(%rbp), %rdx
	movb	$19, 40(%rdx)
	movq	40(%rdx), %rax
	movq	%rax, -144(%rbp)
	movq	48(%rdx), %rax
	movq	%rax, -136(%rbp)
	movq	56(%rdx), %rax
	movq	%rax, -128(%rbp)
	movq	64(%rdx), %rax
	movq	%rax, -120(%rbp)
	movq	72(%rdx), %rax
	movq	%rax, -112(%rbp)
	movq	40(%rcx), %rax
	movq	%rax, 16(%rbp)
	movq	48(%rcx), %rax
	movq	%rax, 24(%rbp)
	movq	56(%rcx), %rax
	movq	%rax, 32(%rbp)
	movq	64(%rcx), %rax
	movq	%rax, 40(%rbp)
	movq	72(%rcx), %rax
	movq	%rax, 48(%rbp)
	cmpb	$0, 16(%rbp)
	je	L1152
L1157:
	movl	$2, %esi
	movq	%rbx, %rdi
	call	_value_malloc
	cmpb	$-1, -96(%rbp)
	jne	L1176
	jmp	L1152
L1175:
	movb	$20, 16(%rbp)
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	movq	24(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_length
	movq	%rax, -200(%rbp)
	movq	%rax, %rdi
	call	_next_size
	movq	%rax, %rsi
	leaq	-192(%rbp), %rdi
	call	_value_hash_init_capacity
	movq	-192(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-184(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-168(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-160(%rbp), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -200(%rbp)
	je	L1152
	movq	24(%rbp), %r13
	xorl	%r15d, %r15d
	leaq	-96(%rbp), %rax
	movq	%rax, -216(%rbp)
	jmp	L1163
	.align 4,0x90
L1164:
	incq	%r15
	addq	$40, %r13
	cmpq	-200(%rbp), %r15
	je	L1152
L1163:
	cmpb	$0, (%r13)
	je	L1164
	movq	(%r13), %rax
	movq	%rax, (%rsp)
	movq	8(%r13), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r13), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r13), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r13), %rax
	movq	%rax, 32(%rsp)
	call	_value_length
	movq	%rax, %r14
	testq	%rax, %rax
	je	L1164
	xorl	%r12d, %r12d
	xorl	%ebx, %ebx
	.align 4,0x90
L1167:
	movq	8(%r13), %rax
	movq	8(%rbx,%rax), %rsi
	leaq	40(%rsi), %rdx
	movq	-216(%rbp), %rdi
	call	_value_hash_put_refs
	incq	%r12
	addq	$40, %rbx
	cmpq	%r14, %r12
	jne	L1167
	jmp	L1164
L1173:
	movq	32(%rbp), %rdi
	movq	%rdi, -80(%rbp)
	call	_next_size
	movq	%rax, %rsi
	leaq	-96(%rbp), %rdi
	call	_value_malloc
	cmpb	$-1, -96(%rbp)
	je	L1152
	cmpq	$0, -80(%rbp)
	je	L1152
	movq	24(%rbp), %rsi
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	.align 4,0x90
L1154:
	movq	-88(%rbp), %rdx
	movq	(%rcx,%rsi), %rax
	movq	%rax, (%rdx,%rcx)
	movq	8(%rcx,%rsi), %rax
	movq	%rax, 8(%rdx,%rcx)
	movq	16(%rcx,%rsi), %rax
	movq	%rax, 16(%rdx,%rcx)
	movq	24(%rcx,%rsi), %rax
	movq	%rax, 24(%rdx,%rcx)
	movq	32(%rcx,%rsi), %rax
	movq	%rax, 32(%rdx,%rcx)
	incq	%rdi
	addq	$40, %rcx
	cmpq	%rdi, -80(%rbp)
	ja	L1154
	jmp	L1152
LFE91:
	.align 4,0x90
.globl _value_array_copy
_value_array_copy:
LFB78:
	pushq	%rbp
LCFI212:
	movq	%rsp, %rbp
LCFI213:
	pushq	%r15
LCFI214:
	pushq	%r14
LCFI215:
	pushq	%r13
LCFI216:
	pushq	%r12
LCFI217:
	pushq	%rbx
LCFI218:
	subq	$120, %rsp
LCFI219:
	movq	%rdi, %r13
	movq	%rsi, %r12
	movl	%edx, %r15d
	testl	%edx, %edx
	jle	L1178
	xorl	%r14d, %r14d
	xorl	%ebx, %ebx
	leaq	-96(%rbp), %rax
	movq	%rax, -104(%rbp)
	.align 4,0x90
L1180:
	movq	(%r12,%rbx), %rax
	movq	%rax, (%rsp)
	movq	8(%r12,%rbx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12,%rbx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12,%rbx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12,%rbx), %rax
	movq	%rax, 32(%rsp)
	movq	-104(%rbp), %rdi
	call	_value_set
	movq	-96(%rbp), %rax
	movq	%rax, (%r13,%rbx)
	movq	-88(%rbp), %rax
	movq	%rax, 8(%r13,%rbx)
	movq	-80(%rbp), %rax
	movq	%rax, 16(%r13,%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 24(%r13,%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 32(%r13,%rbx)
	incl	%r14d
	addq	$40, %rbx
	cmpl	%r15d, %r14d
	jne	L1180
L1178:
	xorl	%eax, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
LFE78:
	.cstring
LC82:
	.ascii "println\0"
	.align 3
LC83:
	.ascii "Type Error: printf() is undefined where op1 is %t (string expected.\0"
	.text
	.align 4,0x90
.globl _value_printf_arg
_value_printf_arg:
LFB147:
	pushq	%rbp
LCFI220:
	movq	%rsp, %rbp
LCFI221:
	pushq	%r13
LCFI222:
	pushq	%r12
LCFI223:
	pushq	%rbx
LCFI224:
	subq	$200, %rsp
LCFI225:
	movq	%rdi, %r12
	movl	%esi, %ebx
	movq	%rdx, %r13
	testl	%esi, %esi
	jle	L1184
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	jmp	L1186
	.align 4,0x90
L1187:
	incb	%al
	je	L1190
	incl	%esi
	addq	$40, %rdx
	cmpl	%ebx, %esi
	je	L1203
L1186:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1187
	incl	%ecx
	incl	%esi
	addq	$40, %rdx
	cmpl	%ebx, %esi
	jne	L1186
L1203:
	testl	%ecx, %ecx
	jle	L1184
	cmpl	$1, %ecx
	je	L1204
	movl	%ebx, %r9d
	subl	%ecx, %r9d
	movl	%ebx, %r8d
	leaq	LC82(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1190:
	movb	$-1, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, (%r12)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%r12)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%r12)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%r12)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%r12)
L1183:
	movq	%r12, %rax
	addq	$200, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	leave
	ret
L1184:
	cmpb	$13, (%r13)
	je	L1197
	movq	(%r13), %rax
	movq	%rax, (%rsp)
	movq	8(%r13), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r13), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r13), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r13), %rax
	movq	%rax, 32(%rsp)
	leaq	LC83(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1197:
	leal	-1(%rbx), %ecx
	movq	8(%r13), %rdx
	xorl	%r9d, %r9d
	leaq	40(%r13), %r8
	xorl	%esi, %esi
	movq	___stdoutp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	call	_value_vprintf_generic
	testl	%eax, %eax
	je	L1198
	movb	$-1, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, (%r12)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%r12)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%r12)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%r12)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%r12)
	jmp	L1183
L1204:
	leal	-1(%rbx), %r9d
	movl	%ebx, %r8d
	leaq	LC82(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1190
L1198:
	movb	$0, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%r12)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%r12)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%r12)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%r12)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%r12)
	jmp	L1183
LFE147:
	.cstring
LC84:
	.ascii "to_a()\0"
	.text
	.align 4,0x90
.globl _value_to_a_arg
_value_to_a_arg:
LFB100:
	pushq	%rbp
LCFI226:
	movq	%rsp, %rbp
LCFI227:
	pushq	%rbx
LCFI228:
	subq	$104, %rsp
LCFI229:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1206
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1208
	.align 4,0x90
L1209:
	incb	%al
	je	L1212
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1221
L1208:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1209
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1208
L1221:
	testl	%ecx, %ecx
	jle	L1206
	cmpl	$1, %ecx
	je	L1222
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC84(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1212:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
L1205:
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	leave
	ret
L1222:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC84(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1212
L1206:
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movl	$18, %esi
	movq	%rbx, %rdi
	call	_value_cast
	jmp	L1205
LFE100:
	.cstring
LC85:
	.ascii "import\0"
	.text
	.align 4,0x90
.globl _value_import_arg
_value_import_arg:
LFB95:
	pushq	%rbp
LCFI230:
	movq	%rsp, %rbp
LCFI231:
	pushq	%rbx
LCFI232:
	subq	$104, %rsp
LCFI233:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1224
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1226
	.align 4,0x90
L1227:
	incb	%al
	je	L1230
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1239
L1226:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1227
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1226
L1239:
	testl	%ecx, %ecx
	jle	L1224
	cmpl	$1, %ecx
	je	L1240
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC85(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1230:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
L1223:
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	leave
	ret
L1240:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC85(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1230
L1224:
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdi
	call	_value_import
	jmp	L1223
LFE95:
	.cstring
LC86:
	.ascii "\0"
	.text
	.align 4,0x90
.globl _value_println_arg
_value_println_arg:
LFB146:
	pushq	%rbp
LCFI234:
	movq	%rsp, %rbp
LCFI235:
	pushq	%r14
LCFI236:
	pushq	%r13
LCFI237:
	pushq	%r12
LCFI238:
	pushq	%rbx
LCFI239:
	subq	$240, %rsp
LCFI240:
	movq	%rdi, %r13
	movl	%esi, %ebx
	movq	%rdx, %r12
	xorl	%r14d, %r14d
	cmpb	$41, (%rdx)
	je	L1263
L1244:
	testl	%ebx, %ebx
	jle	L1245
	movq	%r12, %rdx
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	jmp	L1247
	.align 4,0x90
L1248:
	incb	%al
	je	L1251
	incl	%esi
	addq	$40, %rdx
	cmpl	%ebx, %esi
	je	L1264
L1247:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1248
	incl	%ecx
	incl	%esi
	addq	$40, %rdx
	cmpl	%ebx, %esi
	jne	L1247
L1264:
	testl	%ecx, %ecx
	jle	L1245
	cmpl	$1, %ecx
	je	L1265
	movl	%ebx, %r9d
	subl	%ecx, %r9d
	movl	%ebx, %r8d
	leaq	LC82(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1251:
	movb	$-1, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, (%r13)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%r13)
L1241:
	movq	%r13, %rax
	addq	$240, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L1265:
	leal	-1(%rbx), %r9d
	movl	%ebx, %r8d
	leaq	LC82(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1251
L1263:
	leaq	-224(%rbp), %rdi
	leaq	LC86(%rip), %rsi
	call	_value_set_str
	movq	-224(%rbp), %rax
	movq	%rax, (%r12)
	movq	-216(%rbp), %rax
	movq	%rax, 8(%r12)
	movq	-208(%rbp), %rax
	movq	%rax, 16(%r12)
	movq	-200(%rbp), %rax
	movq	%rax, 24(%r12)
	movq	-192(%rbp), %rax
	movq	%rax, 32(%r12)
	movb	$1, %r14b
	jmp	L1244
L1245:
	movq	(%r12), %rdi
	movq	%rdi, -128(%rbp)
	movq	8(%r12), %rsi
	movq	%rsi, -120(%rbp)
	movq	16(%r12), %rcx
	movq	%rcx, -112(%rbp)
	movq	24(%r12), %rdx
	movq	%rdx, -104(%rbp)
	movq	32(%r12), %rax
	movq	%rax, -96(%rbp)
	movq	%rdi, -176(%rbp)
	movq	%rsi, -168(%rbp)
	movq	%rcx, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	%rax, -144(%rbp)
	movq	%rdi, (%rsp)
	movq	%rsi, 8(%rsp)
	movq	%rcx, 16(%rsp)
	movq	%rdx, 24(%rsp)
	movq	%rax, 32(%rsp)
	leaq	LC73(%rip), %rdi
	xorl	%eax, %eax
	call	_value_printf
	movl	$10, %edi
	call	_putchar
	testl	%r14d, %r14d
	je	L1266
	movl	$40, %edx
	movq	%r12, %rsi
	movq	%r13, %rdi
	call	_memmove
	jmp	L1241
L1266:
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r13, %rdi
	call	_value_set
	jmp	L1241
LFE146:
	.cstring
LC87:
	.ascii "print\0"
	.text
	.align 4,0x90
.globl _value_print_arg
_value_print_arg:
LFB145:
	pushq	%rbp
LCFI241:
	movq	%rsp, %rbp
LCFI242:
	pushq	%r12
LCFI243:
	pushq	%rbx
LCFI244:
	subq	$144, %rsp
LCFI245:
	movq	%rdi, %rbx
	movq	%rdx, %r12
	testl	%esi, %esi
	jle	L1268
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	jmp	L1270
	.align 4,0x90
L1271:
	incb	%al
	je	L1274
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	je	L1283
L1270:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1271
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	jne	L1270
L1283:
	testl	%ecx, %ecx
	jle	L1268
	cmpl	$1, %ecx
	je	L1284
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC87(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1274:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
L1267:
	movq	%rbx, %rax
	addq	$144, %rsp
	popq	%rbx
	popq	%r12
	leave
	ret
L1284:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC87(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1274
L1268:
	movq	(%r12), %rdi
	movq	%rdi, -112(%rbp)
	movq	8(%r12), %rsi
	movq	%rsi, -104(%rbp)
	movq	16(%r12), %rcx
	movq	%rcx, -96(%rbp)
	movq	24(%r12), %rdx
	movq	%rdx, -88(%rbp)
	movq	32(%r12), %rax
	movq	%rax, -80(%rbp)
	movq	%rdi, (%rsp)
	movq	%rsi, 8(%rsp)
	movq	%rcx, 16(%rsp)
	movq	%rdx, 24(%rsp)
	movq	%rax, 32(%rsp)
	leaq	LC73(%rip), %rdi
	xorl	%eax, %eax
	call	_value_printf
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdi
	call	_value_set
	jmp	L1267
LFE145:
	.cstring
LC88:
	.ascii "set_default_prec()\0"
	.text
	.align 4,0x90
.globl _value_set_default_prec_arg
_value_set_default_prec_arg:
LFB128:
	pushq	%rbp
LCFI246:
	movq	%rsp, %rbp
LCFI247:
	pushq	%rbx
LCFI248:
	subq	$104, %rsp
LCFI249:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1286
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1288
	.align 4,0x90
L1289:
	incb	%al
	je	L1292
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1301
L1288:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1289
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1288
L1301:
	testl	%ecx, %ecx
	jle	L1286
	cmpl	$1, %ecx
	je	L1302
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC88(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1292:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
L1285:
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	leave
	ret
L1302:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC88(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1292
L1286:
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rdi
	call	_value_set_default_prec
	jmp	L1285
LFE128:
	.cstring
LC89:
	.ascii "refer()\0"
	.text
	.align 4,0x90
.globl _value_refer_arg
_value_refer_arg:
LFB126:
	pushq	%rbp
LCFI250:
	movq	%rsp, %rbp
LCFI251:
	pushq	%rbx
LCFI252:
	subq	$104, %rsp
LCFI253:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1304
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1306
	.align 4,0x90
L1307:
	incb	%al
	je	L1310
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1319
L1306:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1307
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1306
L1319:
	testl	%ecx, %ecx
	jle	L1304
	cmpl	$1, %ecx
	je	L1320
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC89(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1310:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	leave
	ret
L1304:
	movq	%rdx, -104(%rbp)
	movb	$22, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, (%rbx)
	movq	%rdx, 8(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-88(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-80(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	leave
	ret
L1320:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC89(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1310
LFE126:
	.cstring
LC90:
	.ascii "to_l()\0"
	.text
	.align 4,0x90
.globl _value_to_l_arg
_value_to_l_arg:
LFB104:
	pushq	%rbp
LCFI254:
	movq	%rsp, %rbp
LCFI255:
	pushq	%rbx
LCFI256:
	subq	$104, %rsp
LCFI257:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1322
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1324
	.align 4,0x90
L1325:
	incb	%al
	je	L1328
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1337
L1324:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1325
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1324
L1337:
	testl	%ecx, %ecx
	jle	L1322
	cmpl	$1, %ecx
	je	L1338
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC90(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1328:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
L1321:
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	leave
	ret
L1338:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC90(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1328
L1322:
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movl	$19, %esi
	movq	%rbx, %rdi
	call	_value_cast
	jmp	L1321
LFE104:
	.cstring
LC91:
	.ascii "to_i()\0"
	.text
	.align 4,0x90
.globl _value_to_i_arg
_value_to_i_arg:
LFB103:
	pushq	%rbp
LCFI258:
	movq	%rsp, %rbp
LCFI259:
	pushq	%rbx
LCFI260:
	subq	$104, %rsp
LCFI261:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1340
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1342
	.align 4,0x90
L1343:
	incb	%al
	je	L1346
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1355
L1342:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1343
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1342
L1355:
	testl	%ecx, %ecx
	jle	L1340
	cmpl	$1, %ecx
	je	L1356
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC91(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1346:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
L1339:
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	leave
	ret
L1356:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC91(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1346
L1340:
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movl	$11, %esi
	movq	%rbx, %rdi
	call	_value_cast
	jmp	L1339
LFE103:
	.cstring
LC92:
	.ascii "to_h()\0"
	.text
	.align 4,0x90
.globl _value_to_h_arg
_value_to_h_arg:
LFB102:
	pushq	%rbp
LCFI262:
	movq	%rsp, %rbp
LCFI263:
	pushq	%rbx
LCFI264:
	subq	$104, %rsp
LCFI265:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1358
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1360
	.align 4,0x90
L1361:
	incb	%al
	je	L1364
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1373
L1360:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1361
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1360
L1373:
	testl	%ecx, %ecx
	jle	L1358
	cmpl	$1, %ecx
	je	L1374
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC92(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1364:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
L1357:
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	leave
	ret
L1374:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC92(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1364
L1358:
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movl	$20, %esi
	movq	%rbx, %rdi
	call	_value_cast
	jmp	L1357
LFE102:
	.cstring
LC93:
	.ascii "to_f()\0"
	.text
	.align 4,0x90
.globl _value_to_f_arg
_value_to_f_arg:
LFB101:
	pushq	%rbp
LCFI266:
	movq	%rsp, %rbp
LCFI267:
	pushq	%rbx
LCFI268:
	subq	$104, %rsp
LCFI269:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1376
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1378
	.align 4,0x90
L1379:
	incb	%al
	je	L1382
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1391
L1378:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1379
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1378
L1391:
	testl	%ecx, %ecx
	jle	L1376
	cmpl	$1, %ecx
	je	L1392
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC93(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1382:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
L1375:
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	leave
	ret
L1392:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC93(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1382
L1376:
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movl	$12, %esi
	movq	%rbx, %rdi
	call	_value_cast
	jmp	L1375
LFE101:
	.cstring
LC94:
	.ascii "-=\0"
	.align 3
LC95:
	.ascii "Type Error: -= is undefined where op1 is %t (variable expected).\0"
	.align 3
LC96:
	.ascii "Error: In -=, unrecognized variable %s.\0"
	.text
	.align 4,0x90
.globl _value_assign_sub_arg
_value_assign_sub_arg:
LFB115:
	pushq	%rbp
LCFI270:
	movq	%rsp, %rbp
LCFI271:
	pushq	%r14
LCFI272:
	pushq	%r13
LCFI273:
	pushq	%r12
LCFI274:
	pushq	%rbx
LCFI275:
	subq	$560, %rsp
LCFI276:
	movq	%rdi, %rbx
	movq	%rdx, %r13
	leaq	40(%rdx), %r12
	leal	-1(%rsi), %r8d
	testl	%r8d, %r8d
	jle	L1394
	movq	%r12, %rdx
	xorl	%ecx, %ecx
	movl	$1, %edi
	jmp	L1396
	.align 4,0x90
L1397:
	incb	%al
	je	L1400
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	je	L1426
L1396:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1397
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	jne	L1396
L1426:
	testl	%ecx, %ecx
	jle	L1394
	cmpl	$1, %ecx
	je	L1427
	movl	%r8d, %r9d
	subl	%ecx, %r9d
	leaq	LC94(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1400:
	movb	$-1, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%rbx)
L1393:
	movq	%rbx, %rax
	addq	$560, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L1394:
	cmpb	$15, (%r12)
	je	L1428
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC95(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-216(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-208(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-200(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-192(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1393
L1427:
	leal	-1(%r8), %r9d
	leaq	LC94(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1400
L1428:
	movq	(%r13), %rax
	movq	%rax, -272(%rbp)
	movq	8(%r13), %rdi
	movq	%rdi, -264(%rbp)
	movq	16(%r13), %rsi
	movq	%rsi, -256(%rbp)
	movq	24(%r13), %rcx
	movq	%rcx, -248(%rbp)
	movq	32(%r13), %rdx
	movq	%rdx, -240(%rbp)
	movzbl	-272(%rbp), %eax
	cmpb	$22, %al
	je	L1429
	movb	%al, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rsi, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -416(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	-440(%rbp), %rax
	movq	%rax, -392(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -384(%rbp)
	leaq	-416(%rbp), %r14
L1410:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1412
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-80(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_sub
	movzbl	-80(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1425
	movb	%r13b, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-72(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-64(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-56(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-48(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -80(%rbp)
L1425:
	movq	-80(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1393
L1429:
	movq	%rdi, %r14
	testq	%rdi, %rdi
	jne	L1410
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -304(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-320(%rbp), %r14
	jmp	L1410
	.align 4,0x90
L1412:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	_global_variables@GOTPCREL(%rip), %r14
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1416
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-128(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_sub
	movzbl	-128(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1424
	movb	%r13b, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-120(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-112(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -128(%rbp)
L1424:
	movq	-128(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1393
L1416:
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC96(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -512(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-504(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-496(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-488(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-480(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1393
LFE115:
	.cstring
LC97:
	.ascii "+=\0"
	.align 3
LC98:
	.ascii "Type Error: += is undefined where op1 is %t (variable expected).\0"
	.align 3
LC99:
	.ascii "Error: In +=, unrecognized variable %s.\0"
	.text
	.align 4,0x90
.globl _value_assign_add_arg
_value_assign_add_arg:
LFB114:
	pushq	%rbp
LCFI277:
	movq	%rsp, %rbp
LCFI278:
	pushq	%r14
LCFI279:
	pushq	%r13
LCFI280:
	pushq	%r12
LCFI281:
	pushq	%rbx
LCFI282:
	subq	$560, %rsp
LCFI283:
	movq	%rdi, %rbx
	movq	%rdx, %r13
	leaq	40(%rdx), %r12
	leal	-1(%rsi), %r8d
	testl	%r8d, %r8d
	jle	L1431
	movq	%r12, %rdx
	xorl	%ecx, %ecx
	movl	$1, %edi
	jmp	L1433
	.align 4,0x90
L1434:
	incb	%al
	je	L1437
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	je	L1463
L1433:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1434
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	jne	L1433
L1463:
	testl	%ecx, %ecx
	jle	L1431
	cmpl	$1, %ecx
	je	L1464
	movl	%r8d, %r9d
	subl	%ecx, %r9d
	leaq	LC97(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1437:
	movb	$-1, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%rbx)
L1430:
	movq	%rbx, %rax
	addq	$560, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L1431:
	cmpb	$15, (%r12)
	je	L1465
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC98(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-216(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-208(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-200(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-192(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1430
L1464:
	leal	-1(%r8), %r9d
	leaq	LC97(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1437
L1465:
	movq	(%r13), %rax
	movq	%rax, -272(%rbp)
	movq	8(%r13), %rdi
	movq	%rdi, -264(%rbp)
	movq	16(%r13), %rsi
	movq	%rsi, -256(%rbp)
	movq	24(%r13), %rcx
	movq	%rcx, -248(%rbp)
	movq	32(%r13), %rdx
	movq	%rdx, -240(%rbp)
	movzbl	-272(%rbp), %eax
	cmpb	$22, %al
	je	L1466
	movb	%al, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rsi, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -416(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	-440(%rbp), %rax
	movq	%rax, -392(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -384(%rbp)
	leaq	-416(%rbp), %r14
L1447:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1449
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-80(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_add
	movzbl	-80(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1462
	movb	%r13b, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-72(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-64(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-56(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-48(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -80(%rbp)
L1462:
	movq	-80(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1430
L1466:
	movq	%rdi, %r14
	testq	%rdi, %rdi
	jne	L1447
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -304(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-320(%rbp), %r14
	jmp	L1447
	.align 4,0x90
L1449:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	_global_variables@GOTPCREL(%rip), %r14
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1453
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-128(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_add
	movzbl	-128(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1461
	movb	%r13b, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-120(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-112(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -128(%rbp)
L1461:
	movq	-128(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1430
L1453:
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC99(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -512(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-504(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-496(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-488(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-480(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1430
LFE114:
	.cstring
LC100:
	.ascii "assignment\0"
	.text
	.align 4,0x90
.globl _value_assign_arg
_value_assign_arg:
LFB113:
	pushq	%rbp
LCFI284:
	movq	%rsp, %rbp
LCFI285:
	pushq	%r13
LCFI286:
	pushq	%r12
LCFI287:
	pushq	%rbx
LCFI288:
	subq	$376, %rsp
LCFI289:
	movq	%rdi, %r13
	movl	%esi, %r12d
	movq	%rdx, %rbx
	movq	(%rdx), %rax
	movq	%rax, -80(%rbp)
	movq	8(%rdx), %rsi
	movq	%rsi, -72(%rbp)
	movq	16(%rdx), %rdi
	movq	%rdi, -64(%rbp)
	movq	24(%rdx), %rcx
	movq	%rcx, -56(%rbp)
	movq	32(%rdx), %rdx
	movq	%rdx, -48(%rbp)
	movzbl	-80(%rbp), %eax
	cmpb	$22, %al
	je	L1487
	movb	%al, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rsi, 8(%rsp)
	movq	%rdi, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-264(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-256(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-248(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-240(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-224(%rbp), %rsi
L1470:
	leaq	40(%rbx), %r9
	leal	-1(%r12), %r8d
	testl	%r8d, %r8d
	jle	L1472
	movq	%r9, %rdx
	xorl	%ecx, %ecx
	movl	$1, %edi
	jmp	L1474
	.align 4,0x90
L1475:
	incb	%al
	je	L1478
	incl	%edi
	addq	$40, %rdx
	cmpl	%r12d, %edi
	je	L1488
L1474:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1475
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%r12d, %edi
	jne	L1474
L1488:
	testl	%ecx, %ecx
	jle	L1472
	cmpl	$1, %ecx
	je	L1489
	movl	%r8d, %r9d
	subl	%ecx, %r9d
	leaq	LC100(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1478:
	movb	$-1, -320(%rbp)
	movq	-320(%rbp), %rax
	movq	%rax, (%r13)
	movq	-312(%rbp), %rax
	movq	%rax, 8(%r13)
	movq	-304(%rbp), %rax
	movq	%rax, 16(%r13)
	movq	-296(%rbp), %rax
	movq	%rax, 24(%r13)
	movq	-288(%rbp), %rax
	movq	%rax, 32(%r13)
L1467:
	movq	%r13, %rax
	addq	$376, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	leave
	ret
L1487:
	testq	%rsi, %rsi
	jne	L1470
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-168(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, -104(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -96(%rbp)
	leaq	-128(%rbp), %rsi
	jmp	L1470
L1489:
	leal	-1(%r8), %r9d
	leaq	LC100(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1478
L1472:
	movq	80(%rbx), %rax
	movq	%rax, 40(%rsp)
	movq	88(%rbx), %rax
	movq	%rax, 48(%rsp)
	movq	96(%rbx), %rax
	movq	%rax, 56(%rsp)
	movq	104(%rbx), %rax
	movq	%rax, 64(%rsp)
	movq	112(%rbx), %rax
	movq	%rax, 72(%rsp)
	movq	(%r9), %rax
	movq	%rax, (%rsp)
	movq	8(%r9), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r9), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r9), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r9), %rax
	movq	%rax, 32(%rsp)
	movq	%r13, %rdi
	call	_value_assign
	jmp	L1467
LFE113:
	.cstring
LC101:
	.ascii "true?()\0"
	.text
	.align 4,0x90
.globl _value_true_p_arg
_value_true_p_arg:
LFB111:
	pushq	%rbp
LCFI290:
	movq	%rsp, %rbp
LCFI291:
	pushq	%rbx
LCFI292:
	subq	$232, %rsp
LCFI293:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1491
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1493
	.align 4,0x90
L1494:
	incb	%al
	je	L1497
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1514
L1493:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1494
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1493
L1514:
	testl	%ecx, %ecx
	jle	L1491
	cmpl	$1, %ecx
	je	L1515
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC101(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1497:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$232, %rsp
	popq	%rbx
	leave
	ret
L1491:
	movq	(%rdx), %rax
	movq	%rax, -112(%rbp)
	movq	8(%rdx), %rax
	movq	%rax, -104(%rbp)
	movq	16(%rdx), %rax
	movq	%rax, -96(%rbp)
	movq	24(%rdx), %rax
	movq	%rax, -88(%rbp)
	movq	32(%rdx), %rax
	movq	%rax, -80(%rbp)
	movzbl	-112(%rbp), %eax
	incl	%eax
	cmpb	$24, %al
	ja	L1508
	movzbl	%al, %eax
	leaq	L1510(%rip), %rdx
	movslq	(%rdx,%rax,4),%rax
	addq	%rdx, %rax
	jmp	*%rax
	.align 2,0x90
L1510:
	.long	L1507-L1510
	.long	L1507-L1510
	.long	L1508-L1510
	.long	L1508-L1510
	.long	L1508-L1510
	.long	L1508-L1510
	.long	L1508-L1510
	.long	L1508-L1510
	.long	L1508-L1510
	.long	L1508-L1510
	.long	L1508-L1510
	.long	L1503-L1510
	.long	L1505-L1510
	.long	L1505-L1510
	.long	L1506-L1510
	.long	L1508-L1510
	.long	L1508-L1510
	.long	L1508-L1510
	.long	L1508-L1510
	.long	L1506-L1510
	.long	L1506-L1510
	.long	L1506-L1510
	.long	L1506-L1510
	.long	L1508-L1510
	.long	L1506-L1510
L1506:
	movq	-112(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-88(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-80(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_empty_p
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
L1504:
	testl	%eax, %eax
	je	L1507
L1508:
	movl	$1, -152(%rbp)
L1509:
	movb	$10, -160(%rbp)
	movq	-160(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-136(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-128(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$232, %rsp
	popq	%rbx
	leave
	ret
L1507:
	movl	$0, -152(%rbp)
	jmp	L1509
L1515:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC101(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1497
L1505:
	movq	_value_zero@GOTPCREL(%rip), %rdx
	movq	(%rdx), %rax
	movq	%rax, 40(%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 48(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 56(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 64(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 72(%rsp)
	movq	-112(%rbp), %rax
	movq	%rax, (%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 8(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	-88(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	-80(%rbp), %rax
	movq	%rax, 32(%rsp)
	call	_value_ne
	jmp	L1504
L1503:
	movl	-104(%rbp), %eax
	jmp	L1504
LFE111:
	.cstring
LC102:
	.ascii "type()\0"
	.text
	.align 4,0x90
.globl _value_type_arg
_value_type_arg:
LFB109:
	pushq	%rbp
LCFI294:
	movq	%rsp, %rbp
LCFI295:
	pushq	%rbx
LCFI296:
	subq	$152, %rsp
LCFI297:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1517
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1519
	.align 4,0x90
L1520:
	incb	%al
	je	L1523
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1532
L1519:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1520
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1519
L1532:
	testl	%ecx, %ecx
	jle	L1517
	cmpl	$1, %ecx
	je	L1533
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC102(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1523:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$152, %rsp
	popq	%rbx
	leave
	ret
L1517:
	movq	(%rdx), %rax
	movq	%rax, -112(%rbp)
	movq	8(%rdx), %rax
	movq	%rax, -104(%rbp)
	movq	16(%rdx), %rax
	movq	%rax, -96(%rbp)
	movq	24(%rdx), %rax
	movq	%rax, -88(%rbp)
	movq	32(%rdx), %rax
	movq	%rax, -80(%rbp)
	movsbl	-112(%rbp),%eax
	movl	%eax, -152(%rbp)
	movb	$3, -160(%rbp)
	movq	-160(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-136(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-128(%rbp), %rax
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$152, %rsp
	popq	%rbx
	leave
	ret
L1533:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC102(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1523
LFE109:
	.cstring
LC103:
	.ascii "to_s_base()\0"
	.text
	.align 4,0x90
.globl _value_to_s_base_arg
_value_to_s_base_arg:
LFB107:
	pushq	%rbp
LCFI298:
	movq	%rsp, %rbp
LCFI299:
	pushq	%rbx
LCFI300:
	subq	$184, %rsp
LCFI301:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1535
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1537
	.align 4,0x90
L1538:
	incb	%al
	je	L1541
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1553
L1537:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1538
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1537
L1553:
	testl	%ecx, %ecx
	jle	L1535
	cmpl	$1, %ecx
	je	L1554
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC103(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1541:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
L1534:
	movq	%rbx, %rax
	addq	$184, %rsp
	popq	%rbx
	leave
	ret
L1554:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC103(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1541
L1535:
	movq	40(%rdx), %rax
	movq	%rax, 40(%rsp)
	movq	48(%rdx), %rax
	movq	%rax, 48(%rsp)
	movq	56(%rdx), %rax
	movq	%rax, 56(%rsp)
	movq	64(%rdx), %rax
	movq	%rax, 64(%rsp)
	movq	72(%rdx), %rax
	movq	%rax, 72(%rsp)
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	call	_value_to_string_base
	testq	%rax, %rax
	je	L1555
	movq	%rax, %rsi
	movq	%rbx, %rdi
	call	_value_set_str
	jmp	L1534
L1555:
	movb	$-1, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-88(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-80(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1534
LFE107:
	.cstring
LC104:
	.ascii "to_s()\0"
	.text
	.align 4,0x90
.globl _value_to_s_arg
_value_to_s_arg:
LFB106:
	pushq	%rbp
LCFI302:
	movq	%rsp, %rbp
LCFI303:
	pushq	%rbx
LCFI304:
	subq	$104, %rsp
LCFI305:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1557
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1559
	.align 4,0x90
L1560:
	incb	%al
	je	L1563
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1572
L1559:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1560
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1559
L1572:
	testl	%ecx, %ecx
	jle	L1557
	cmpl	$1, %ecx
	je	L1573
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC104(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1563:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
L1556:
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	leave
	ret
L1573:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC104(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1563
L1557:
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movl	$13, %esi
	movq	%rbx, %rdi
	call	_value_cast
	jmp	L1556
LFE106:
	.cstring
LC105:
	.ascii "to_r()\0"
	.text
	.align 4,0x90
.globl _value_to_r_arg
_value_to_r_arg:
LFB105:
	pushq	%rbp
LCFI306:
	movq	%rsp, %rbp
LCFI307:
	pushq	%rbx
LCFI308:
	subq	$104, %rsp
LCFI309:
	movq	%rdi, %rbx
	testl	%esi, %esi
	jle	L1575
	movq	%rdx, %rdi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	jmp	L1577
	.align 4,0x90
L1578:
	incb	%al
	je	L1581
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	je	L1590
L1577:
	movzbl	(%rdi), %eax
	cmpb	$41, %al
	jne	L1578
	incl	%ecx
	incl	%r8d
	addq	$40, %rdi
	cmpl	%esi, %r8d
	jne	L1577
L1590:
	testl	%ecx, %ecx
	jle	L1575
	cmpl	$1, %ecx
	je	L1591
	movl	%esi, %r9d
	subl	%ecx, %r9d
	movl	%esi, %r8d
	leaq	LC105(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1581:
	movb	$-1, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-32(%rbp), %rax
	movq	%rax, 32(%rbx)
L1574:
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	leave
	ret
L1591:
	leal	-1(%rsi), %r9d
	movl	%esi, %r8d
	leaq	LC105(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1581
L1575:
	movq	(%rdx), %rax
	movq	%rax, (%rsp)
	movq	8(%rdx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	movq	24(%rdx), %rax
	movq	%rax, 24(%rsp)
	movq	32(%rdx), %rax
	movq	%rax, 32(%rsp)
	movl	$16, %esi
	movq	%rbx, %rdi
	call	_value_cast
	jmp	L1574
LFE105:
	.cstring
LC106:
	.ascii ">>=\0"
	.align 3
LC107:
	.ascii "Type Error: >>= is undefined where op1 is %t (variable expected).\0"
	.align 3
LC108:
	.ascii "Error: In >>=, unrecognized variable %s.\0"
	.text
	.align 4,0x90
.globl _value_assign_shr_arg
_value_assign_shr_arg:
LFB123:
	pushq	%rbp
LCFI310:
	movq	%rsp, %rbp
LCFI311:
	pushq	%r14
LCFI312:
	pushq	%r13
LCFI313:
	pushq	%r12
LCFI314:
	pushq	%rbx
LCFI315:
	subq	$560, %rsp
LCFI316:
	movq	%rdi, %rbx
	movq	%rdx, %r13
	leaq	40(%rdx), %r12
	leal	-1(%rsi), %r8d
	testl	%r8d, %r8d
	jle	L1593
	movq	%r12, %rdx
	xorl	%ecx, %ecx
	movl	$1, %edi
	jmp	L1595
	.align 4,0x90
L1596:
	incb	%al
	je	L1599
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	je	L1625
L1595:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1596
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	jne	L1595
L1625:
	testl	%ecx, %ecx
	jle	L1593
	cmpl	$1, %ecx
	je	L1626
	movl	%r8d, %r9d
	subl	%ecx, %r9d
	leaq	LC106(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1599:
	movb	$-1, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%rbx)
L1592:
	movq	%rbx, %rax
	addq	$560, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L1593:
	cmpb	$15, (%r12)
	je	L1627
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC107(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-216(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-208(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-200(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-192(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1592
L1626:
	leal	-1(%r8), %r9d
	leaq	LC106(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1599
L1627:
	movq	(%r13), %rax
	movq	%rax, -272(%rbp)
	movq	8(%r13), %rdi
	movq	%rdi, -264(%rbp)
	movq	16(%r13), %rsi
	movq	%rsi, -256(%rbp)
	movq	24(%r13), %rcx
	movq	%rcx, -248(%rbp)
	movq	32(%r13), %rdx
	movq	%rdx, -240(%rbp)
	movzbl	-272(%rbp), %eax
	cmpb	$22, %al
	je	L1628
	movb	%al, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rsi, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -416(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	-440(%rbp), %rax
	movq	%rax, -392(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -384(%rbp)
	leaq	-416(%rbp), %r14
L1609:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1611
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-80(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_shr_std
	movzbl	-80(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1624
	movb	%r13b, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-72(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-64(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-56(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-48(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -80(%rbp)
L1624:
	movq	-80(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1592
L1628:
	movq	%rdi, %r14
	testq	%rdi, %rdi
	jne	L1609
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -304(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-320(%rbp), %r14
	jmp	L1609
	.align 4,0x90
L1611:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	_global_variables@GOTPCREL(%rip), %r14
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1615
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-128(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_shr_std
	movzbl	-128(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1623
	movb	%r13b, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-120(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-112(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -128(%rbp)
L1623:
	movq	-128(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1592
L1615:
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC108(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -512(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-504(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-496(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-488(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-480(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1592
LFE123:
	.cstring
LC109:
	.ascii "<<=\0"
	.align 3
LC110:
	.ascii "Type Error: <<= is undefined where op1 is %t (variable expected).\0"
	.align 3
LC111:
	.ascii "Error: In <<=, unrecognized variable %s.\0"
	.text
	.align 4,0x90
.globl _value_assign_shl_arg
_value_assign_shl_arg:
LFB122:
	pushq	%rbp
LCFI317:
	movq	%rsp, %rbp
LCFI318:
	pushq	%r14
LCFI319:
	pushq	%r13
LCFI320:
	pushq	%r12
LCFI321:
	pushq	%rbx
LCFI322:
	subq	$560, %rsp
LCFI323:
	movq	%rdi, %rbx
	movq	%rdx, %r13
	leaq	40(%rdx), %r12
	leal	-1(%rsi), %r8d
	testl	%r8d, %r8d
	jle	L1630
	movq	%r12, %rdx
	xorl	%ecx, %ecx
	movl	$1, %edi
	jmp	L1632
	.align 4,0x90
L1633:
	incb	%al
	je	L1636
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	je	L1662
L1632:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1633
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	jne	L1632
L1662:
	testl	%ecx, %ecx
	jle	L1630
	cmpl	$1, %ecx
	je	L1663
	movl	%r8d, %r9d
	subl	%ecx, %r9d
	leaq	LC109(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1636:
	movb	$-1, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%rbx)
L1629:
	movq	%rbx, %rax
	addq	$560, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L1630:
	cmpb	$15, (%r12)
	je	L1664
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC110(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-216(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-208(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-200(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-192(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1629
L1663:
	leal	-1(%r8), %r9d
	leaq	LC109(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1636
L1664:
	movq	(%r13), %rax
	movq	%rax, -272(%rbp)
	movq	8(%r13), %rdi
	movq	%rdi, -264(%rbp)
	movq	16(%r13), %rsi
	movq	%rsi, -256(%rbp)
	movq	24(%r13), %rcx
	movq	%rcx, -248(%rbp)
	movq	32(%r13), %rdx
	movq	%rdx, -240(%rbp)
	movzbl	-272(%rbp), %eax
	cmpb	$22, %al
	je	L1665
	movb	%al, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rsi, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -416(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	-440(%rbp), %rax
	movq	%rax, -392(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -384(%rbp)
	leaq	-416(%rbp), %r14
L1646:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1648
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-80(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_shl_std
	movzbl	-80(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1661
	movb	%r13b, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-72(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-64(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-56(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-48(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -80(%rbp)
L1661:
	movq	-80(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1629
L1665:
	movq	%rdi, %r14
	testq	%rdi, %rdi
	jne	L1646
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -304(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-320(%rbp), %r14
	jmp	L1646
	.align 4,0x90
L1648:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	_global_variables@GOTPCREL(%rip), %r14
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1652
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-128(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_shl_std
	movzbl	-128(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1660
	movb	%r13b, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-120(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-112(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -128(%rbp)
L1660:
	movq	-128(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1629
L1652:
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC111(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -512(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-504(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-496(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-488(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-480(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1629
LFE122:
	.cstring
LC112:
	.ascii "|=\0"
	.align 3
LC113:
	.ascii "Type Error: |= is undefined where op1 is %t (variable expected).\0"
	.align 3
LC114:
	.ascii "Error: In |=, unrecognized variable %s.\0"
	.text
	.align 4,0x90
.globl _value_assign_or_arg
_value_assign_or_arg:
LFB121:
	pushq	%rbp
LCFI324:
	movq	%rsp, %rbp
LCFI325:
	pushq	%r14
LCFI326:
	pushq	%r13
LCFI327:
	pushq	%r12
LCFI328:
	pushq	%rbx
LCFI329:
	subq	$560, %rsp
LCFI330:
	movq	%rdi, %rbx
	movq	%rdx, %r13
	leaq	40(%rdx), %r12
	leal	-1(%rsi), %r8d
	testl	%r8d, %r8d
	jle	L1667
	movq	%r12, %rdx
	xorl	%ecx, %ecx
	movl	$1, %edi
	jmp	L1669
	.align 4,0x90
L1670:
	incb	%al
	je	L1673
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	je	L1699
L1669:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1670
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	jne	L1669
L1699:
	testl	%ecx, %ecx
	jle	L1667
	cmpl	$1, %ecx
	je	L1700
	movl	%r8d, %r9d
	subl	%ecx, %r9d
	leaq	LC112(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1673:
	movb	$-1, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%rbx)
L1666:
	movq	%rbx, %rax
	addq	$560, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L1667:
	cmpb	$15, (%r12)
	je	L1701
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC113(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-216(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-208(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-200(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-192(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1666
L1700:
	leal	-1(%r8), %r9d
	leaq	LC112(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1673
L1701:
	movq	(%r13), %rax
	movq	%rax, -272(%rbp)
	movq	8(%r13), %rdi
	movq	%rdi, -264(%rbp)
	movq	16(%r13), %rsi
	movq	%rsi, -256(%rbp)
	movq	24(%r13), %rcx
	movq	%rcx, -248(%rbp)
	movq	32(%r13), %rdx
	movq	%rdx, -240(%rbp)
	movzbl	-272(%rbp), %eax
	cmpb	$22, %al
	je	L1702
	movb	%al, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rsi, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -416(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	-440(%rbp), %rax
	movq	%rax, -392(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -384(%rbp)
	leaq	-416(%rbp), %r14
L1683:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1685
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-80(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_or
	movzbl	-80(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1698
	movb	%r13b, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-72(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-64(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-56(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-48(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -80(%rbp)
L1698:
	movq	-80(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1666
L1702:
	movq	%rdi, %r14
	testq	%rdi, %rdi
	jne	L1683
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -304(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-320(%rbp), %r14
	jmp	L1683
	.align 4,0x90
L1685:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	_global_variables@GOTPCREL(%rip), %r14
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1689
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-128(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_or
	movzbl	-128(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1697
	movb	%r13b, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-120(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-112(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -128(%rbp)
L1697:
	movq	-128(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1666
L1689:
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC114(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -512(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-504(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-496(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-488(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-480(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1666
LFE121:
	.cstring
LC115:
	.ascii "^=\0"
	.align 3
LC116:
	.ascii "Type Error: ^= is undefined where op1 is %t (variable expected).\0"
	.align 3
LC117:
	.ascii "Error: In ^=, unrecognized variable %s.\0"
	.text
	.align 4,0x90
.globl _value_assign_xor_arg
_value_assign_xor_arg:
LFB120:
	pushq	%rbp
LCFI331:
	movq	%rsp, %rbp
LCFI332:
	pushq	%r14
LCFI333:
	pushq	%r13
LCFI334:
	pushq	%r12
LCFI335:
	pushq	%rbx
LCFI336:
	subq	$560, %rsp
LCFI337:
	movq	%rdi, %rbx
	movq	%rdx, %r13
	leaq	40(%rdx), %r12
	leal	-1(%rsi), %r8d
	testl	%r8d, %r8d
	jle	L1704
	movq	%r12, %rdx
	xorl	%ecx, %ecx
	movl	$1, %edi
	jmp	L1706
	.align 4,0x90
L1707:
	incb	%al
	je	L1710
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	je	L1736
L1706:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1707
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	jne	L1706
L1736:
	testl	%ecx, %ecx
	jle	L1704
	cmpl	$1, %ecx
	je	L1737
	movl	%r8d, %r9d
	subl	%ecx, %r9d
	leaq	LC115(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1710:
	movb	$-1, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%rbx)
L1703:
	movq	%rbx, %rax
	addq	$560, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L1704:
	cmpb	$15, (%r12)
	je	L1738
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC116(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-216(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-208(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-200(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-192(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1703
L1737:
	leal	-1(%r8), %r9d
	leaq	LC115(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1710
L1738:
	movq	(%r13), %rax
	movq	%rax, -272(%rbp)
	movq	8(%r13), %rdi
	movq	%rdi, -264(%rbp)
	movq	16(%r13), %rsi
	movq	%rsi, -256(%rbp)
	movq	24(%r13), %rcx
	movq	%rcx, -248(%rbp)
	movq	32(%r13), %rdx
	movq	%rdx, -240(%rbp)
	movzbl	-272(%rbp), %eax
	cmpb	$22, %al
	je	L1739
	movb	%al, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rsi, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -416(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	-440(%rbp), %rax
	movq	%rax, -392(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -384(%rbp)
	leaq	-416(%rbp), %r14
L1720:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1722
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-80(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_xor
	movzbl	-80(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1735
	movb	%r13b, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-72(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-64(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-56(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-48(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -80(%rbp)
L1735:
	movq	-80(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1703
L1739:
	movq	%rdi, %r14
	testq	%rdi, %rdi
	jne	L1720
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -304(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-320(%rbp), %r14
	jmp	L1720
	.align 4,0x90
L1722:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	_global_variables@GOTPCREL(%rip), %r14
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1726
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-128(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_xor
	movzbl	-128(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1734
	movb	%r13b, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-120(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-112(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -128(%rbp)
L1734:
	movq	-128(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1703
L1726:
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC117(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -512(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-504(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-496(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-488(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-480(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1703
LFE120:
	.cstring
LC118:
	.ascii "&=\0"
	.align 3
LC119:
	.ascii "Type Error: &= is undefined where op1 is %t (variable expected).\0"
	.align 3
LC120:
	.ascii "Error: In &=, unrecognized variable %s.\0"
	.text
	.align 4,0x90
.globl _value_assign_and_arg
_value_assign_and_arg:
LFB119:
	pushq	%rbp
LCFI338:
	movq	%rsp, %rbp
LCFI339:
	pushq	%r14
LCFI340:
	pushq	%r13
LCFI341:
	pushq	%r12
LCFI342:
	pushq	%rbx
LCFI343:
	subq	$560, %rsp
LCFI344:
	movq	%rdi, %rbx
	movq	%rdx, %r13
	leaq	40(%rdx), %r12
	leal	-1(%rsi), %r8d
	testl	%r8d, %r8d
	jle	L1741
	movq	%r12, %rdx
	xorl	%ecx, %ecx
	movl	$1, %edi
	jmp	L1743
	.align 4,0x90
L1744:
	incb	%al
	je	L1747
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	je	L1773
L1743:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1744
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	jne	L1743
L1773:
	testl	%ecx, %ecx
	jle	L1741
	cmpl	$1, %ecx
	je	L1774
	movl	%r8d, %r9d
	subl	%ecx, %r9d
	leaq	LC118(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1747:
	movb	$-1, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%rbx)
L1740:
	movq	%rbx, %rax
	addq	$560, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L1741:
	cmpb	$15, (%r12)
	je	L1775
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC119(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-216(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-208(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-200(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-192(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1740
L1774:
	leal	-1(%r8), %r9d
	leaq	LC118(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1747
L1775:
	movq	(%r13), %rax
	movq	%rax, -272(%rbp)
	movq	8(%r13), %rdi
	movq	%rdi, -264(%rbp)
	movq	16(%r13), %rsi
	movq	%rsi, -256(%rbp)
	movq	24(%r13), %rcx
	movq	%rcx, -248(%rbp)
	movq	32(%r13), %rdx
	movq	%rdx, -240(%rbp)
	movzbl	-272(%rbp), %eax
	cmpb	$22, %al
	je	L1776
	movb	%al, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rsi, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -416(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	-440(%rbp), %rax
	movq	%rax, -392(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -384(%rbp)
	leaq	-416(%rbp), %r14
L1757:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1759
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-80(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_and
	movzbl	-80(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1772
	movb	%r13b, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-72(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-64(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-56(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-48(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -80(%rbp)
L1772:
	movq	-80(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1740
L1776:
	movq	%rdi, %r14
	testq	%rdi, %rdi
	jne	L1757
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -304(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-320(%rbp), %r14
	jmp	L1757
	.align 4,0x90
L1759:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	_global_variables@GOTPCREL(%rip), %r14
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1763
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-128(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_and
	movzbl	-128(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1771
	movb	%r13b, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-120(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-112(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -128(%rbp)
L1771:
	movq	-128(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1740
L1763:
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC120(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -512(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-504(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-496(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-488(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-480(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1740
LFE119:
	.cstring
LC121:
	.ascii "%=\0"
	.align 3
LC122:
	.ascii "Type Error: %= is undefined where op1 is %t (variable expected).\0"
	.align 3
LC123:
	.ascii "Error: In %=, unrecognized variable %s.\0"
	.text
	.align 4,0x90
.globl _value_assign_mod_arg
_value_assign_mod_arg:
LFB118:
	pushq	%rbp
LCFI345:
	movq	%rsp, %rbp
LCFI346:
	pushq	%r14
LCFI347:
	pushq	%r13
LCFI348:
	pushq	%r12
LCFI349:
	pushq	%rbx
LCFI350:
	subq	$560, %rsp
LCFI351:
	movq	%rdi, %rbx
	movq	%rdx, %r13
	leaq	40(%rdx), %r12
	leal	-1(%rsi), %r8d
	testl	%r8d, %r8d
	jle	L1778
	movq	%r12, %rdx
	xorl	%ecx, %ecx
	movl	$1, %edi
	jmp	L1780
	.align 4,0x90
L1781:
	incb	%al
	je	L1784
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	je	L1810
L1780:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1781
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	jne	L1780
L1810:
	testl	%ecx, %ecx
	jle	L1778
	cmpl	$1, %ecx
	je	L1811
	movl	%r8d, %r9d
	subl	%ecx, %r9d
	leaq	LC121(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1784:
	movb	$-1, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%rbx)
L1777:
	movq	%rbx, %rax
	addq	$560, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L1778:
	cmpb	$15, (%r12)
	je	L1812
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC122(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-216(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-208(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-200(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-192(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1777
L1811:
	leal	-1(%r8), %r9d
	leaq	LC121(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1784
L1812:
	movq	(%r13), %rax
	movq	%rax, -272(%rbp)
	movq	8(%r13), %rdi
	movq	%rdi, -264(%rbp)
	movq	16(%r13), %rsi
	movq	%rsi, -256(%rbp)
	movq	24(%r13), %rcx
	movq	%rcx, -248(%rbp)
	movq	32(%r13), %rdx
	movq	%rdx, -240(%rbp)
	movzbl	-272(%rbp), %eax
	cmpb	$22, %al
	je	L1813
	movb	%al, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rsi, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -416(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	-440(%rbp), %rax
	movq	%rax, -392(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -384(%rbp)
	leaq	-416(%rbp), %r14
L1794:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1796
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-80(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_mod
	movzbl	-80(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1809
	movb	%r13b, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-72(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-64(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-56(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-48(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -80(%rbp)
L1809:
	movq	-80(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1777
L1813:
	movq	%rdi, %r14
	testq	%rdi, %rdi
	jne	L1794
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -304(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-320(%rbp), %r14
	jmp	L1794
	.align 4,0x90
L1796:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	_global_variables@GOTPCREL(%rip), %r14
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1800
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-128(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_mod
	movzbl	-128(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1808
	movb	%r13b, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-120(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-112(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -128(%rbp)
L1808:
	movq	-128(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1777
L1800:
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC123(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -512(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-504(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-496(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-488(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-480(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1777
LFE118:
	.cstring
LC124:
	.ascii "/=\0"
	.align 3
LC125:
	.ascii "Type Error: /= is undefined where op1 is %t (variable expected).\0"
	.align 3
LC126:
	.ascii "Error: In /=, unrecognized variable %s.\0"
	.text
	.align 4,0x90
.globl _value_assign_div_arg
_value_assign_div_arg:
LFB117:
	pushq	%rbp
LCFI352:
	movq	%rsp, %rbp
LCFI353:
	pushq	%r14
LCFI354:
	pushq	%r13
LCFI355:
	pushq	%r12
LCFI356:
	pushq	%rbx
LCFI357:
	subq	$560, %rsp
LCFI358:
	movq	%rdi, %rbx
	movq	%rdx, %r13
	leaq	40(%rdx), %r12
	leal	-1(%rsi), %r8d
	testl	%r8d, %r8d
	jle	L1815
	movq	%r12, %rdx
	xorl	%ecx, %ecx
	movl	$1, %edi
	jmp	L1817
	.align 4,0x90
L1818:
	incb	%al
	je	L1821
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	je	L1847
L1817:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1818
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	jne	L1817
L1847:
	testl	%ecx, %ecx
	jle	L1815
	cmpl	$1, %ecx
	je	L1848
	movl	%r8d, %r9d
	subl	%ecx, %r9d
	leaq	LC124(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1821:
	movb	$-1, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%rbx)
L1814:
	movq	%rbx, %rax
	addq	$560, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L1815:
	cmpb	$15, (%r12)
	je	L1849
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC125(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-216(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-208(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-200(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-192(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1814
L1848:
	leal	-1(%r8), %r9d
	leaq	LC124(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1821
L1849:
	movq	(%r13), %rax
	movq	%rax, -272(%rbp)
	movq	8(%r13), %rdi
	movq	%rdi, -264(%rbp)
	movq	16(%r13), %rsi
	movq	%rsi, -256(%rbp)
	movq	24(%r13), %rcx
	movq	%rcx, -248(%rbp)
	movq	32(%r13), %rdx
	movq	%rdx, -240(%rbp)
	movzbl	-272(%rbp), %eax
	cmpb	$22, %al
	je	L1850
	movb	%al, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rsi, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -416(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	-440(%rbp), %rax
	movq	%rax, -392(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -384(%rbp)
	leaq	-416(%rbp), %r14
L1831:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1833
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-80(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_div
	movzbl	-80(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1846
	movb	%r13b, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-72(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-64(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-56(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-48(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -80(%rbp)
L1846:
	movq	-80(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1814
L1850:
	movq	%rdi, %r14
	testq	%rdi, %rdi
	jne	L1831
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -304(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-320(%rbp), %r14
	jmp	L1831
	.align 4,0x90
L1833:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	_global_variables@GOTPCREL(%rip), %r14
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1837
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-128(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_div
	movzbl	-128(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1845
	movb	%r13b, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-120(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-112(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -128(%rbp)
L1845:
	movq	-128(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1814
L1837:
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC126(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -512(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-504(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-496(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-488(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-480(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1814
LFE117:
	.cstring
LC127:
	.ascii "*=\0"
	.align 3
LC128:
	.ascii "Type Error: *= is undefined where op1 is %t (variable expected).\0"
	.align 3
LC129:
	.ascii "Error: In *=, unrecognized variable %s.\0"
	.text
	.align 4,0x90
.globl _value_assign_mul_arg
_value_assign_mul_arg:
LFB116:
	pushq	%rbp
LCFI359:
	movq	%rsp, %rbp
LCFI360:
	pushq	%r14
LCFI361:
	pushq	%r13
LCFI362:
	pushq	%r12
LCFI363:
	pushq	%rbx
LCFI364:
	subq	$560, %rsp
LCFI365:
	movq	%rdi, %rbx
	movq	%rdx, %r13
	leaq	40(%rdx), %r12
	leal	-1(%rsi), %r8d
	testl	%r8d, %r8d
	jle	L1852
	movq	%r12, %rdx
	xorl	%ecx, %ecx
	movl	$1, %edi
	jmp	L1854
	.align 4,0x90
L1855:
	incb	%al
	je	L1858
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	je	L1884
L1854:
	movzbl	(%rdx), %eax
	cmpb	$41, %al
	jne	L1855
	incl	%ecx
	incl	%edi
	addq	$40, %rdx
	cmpl	%esi, %edi
	jne	L1854
L1884:
	testl	%ecx, %ecx
	jle	L1852
	cmpl	$1, %ecx
	je	L1885
	movl	%r8d, %r9d
	subl	%ecx, %r9d
	leaq	LC127(%rip), %rdx
	leaq	LC67(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
L1858:
	movb	$-1, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-168(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-160(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-152(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-144(%rbp), %rax
	movq	%rax, 32(%rbx)
L1851:
	movq	%rbx, %rax
	addq	$560, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	leave
	ret
L1852:
	cmpb	$15, (%r12)
	je	L1886
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC128(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-216(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-208(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-200(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-192(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1851
L1885:
	leal	-1(%r8), %r9d
	leaq	LC127(%rip), %rdx
	leaq	LC66(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	jmp	L1858
L1886:
	movq	(%r13), %rax
	movq	%rax, -272(%rbp)
	movq	8(%r13), %rdi
	movq	%rdi, -264(%rbp)
	movq	16(%r13), %rsi
	movq	%rsi, -256(%rbp)
	movq	24(%r13), %rcx
	movq	%rcx, -248(%rbp)
	movq	32(%r13), %rdx
	movq	%rdx, -240(%rbp)
	movzbl	-272(%rbp), %eax
	cmpb	$22, %al
	je	L1887
	movb	%al, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, (%rsp)
	movq	%rdi, 8(%rsp)
	movq	%rsi, 16(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%rdx, 32(%rsp)
	leaq	LC50(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -416(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	-440(%rbp), %rax
	movq	%rax, -392(%rbp)
	movq	-432(%rbp), %rax
	movq	%rax, -384(%rbp)
	leaq	-416(%rbp), %r14
L1868:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1870
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-80(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_mul
	movzbl	-80(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1883
	movb	%r13b, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-72(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-64(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-56(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-48(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -80(%rbp)
L1883:
	movq	-80(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-72(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-64(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-56(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-48(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1851
L1887:
	movq	%rdi, %r14
	testq	%rdi, %rdi
	jne	L1868
	leaq	LC49(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -304(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-320(%rbp), %r14
	jmp	L1868
	.align 4,0x90
L1870:
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	_global_variables@GOTPCREL(%rip), %r14
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_exists
	testl	%eax, %eax
	je	L1874
	movq	(%r12), %rax
	movq	%rax, 40(%rsp)
	movq	8(%r12), %rax
	movq	%rax, 48(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 56(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 64(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 72(%rsp)
	movq	(%r14), %rax
	movq	%rax, (%rsp)
	movq	8(%r14), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r14), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r14), %rax
	movq	%rax, 32(%rsp)
	call	_value_hash_get_ref
	leaq	-128(%rbp), %rdi
	movq	80(%r13), %rdx
	movq	%rdx, 40(%rsp)
	movq	88(%r13), %rdx
	movq	%rdx, 48(%rsp)
	movq	96(%r13), %rdx
	movq	%rdx, 56(%rsp)
	movq	104(%r13), %rdx
	movq	%rdx, 64(%rsp)
	movq	112(%r13), %rdx
	movq	%rdx, 72(%rsp)
	movq	(%rax), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rax), %rdx
	movq	%rdx, 16(%rsp)
	movq	24(%rax), %rdx
	movq	%rdx, 24(%rsp)
	movq	32(%rax), %rax
	movq	%rax, 32(%rsp)
	call	_value_mul
	movzbl	-128(%rbp), %r13d
	cmpb	$-1, %r13b
	je	L1882
	movb	%r13b, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	-120(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	-112(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	-104(%rbp), %rax
	movq	%rax, 64(%rsp)
	movq	-96(%rbp), %rax
	movq	%rax, 72(%rsp)
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	%r14, %rdi
	call	_value_hash_put
	movb	%r13b, -128(%rbp)
L1882:
	movq	-128(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-120(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-112(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-104(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-96(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1851
L1874:
	movq	(%r12), %rax
	movq	%rax, (%rsp)
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r12), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r12), %rax
	movq	%rax, 24(%rsp)
	movq	32(%r12), %rax
	movq	%rax, 32(%rsp)
	leaq	LC129(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	_value_error
	movb	$-1, -512(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, (%rbx)
	movq	-504(%rbp), %rax
	movq	%rax, 8(%rbx)
	movq	-496(%rbp), %rax
	movq	%rax, 16(%rbx)
	movq	-488(%rbp), %rax
	movq	%rax, 24(%rbx)
	movq	-480(%rbp), %rax
	movq	%rax, 32(%rbx)
	jmp	L1851
LFE116:
.comm _input_stream,8,3
.comm _print_interpreter_stuff,4,2
.comm _is_eof,4,2
.comm _print_errors_p,4,2
.comm _error_count,4,2
.comm _linenum,4,2
.comm _same_type_determiner,4,2
.comm _global_variables,40,5
.comm _primitive_funs,40,5
.comm _primitive_specs,40,5
.comm _primitive_names,40,5
.comm _symbol_ids,40,5
.comm _function_ids,40,5
.comm _line_queue,40,5
.comm _line_queue_back,40,5
.comm _default_prec,8,3
.comm _value_long_min,40,5
.comm _value_zero,40,5
.comm _value_long_max,40,5
.comm _value_symbol_in,40,5
.comm _value_symbol_dotimes,40,5
.comm _value_symbol_if,40,5
.comm _value_nil_function_spec,20,4
.comm _argument_error,32,5
.comm _generic_error,32,5
.comm _memory_error,32,5
.comm _runtime_error,32,5
.comm _syntax_error,32,5
.comm _type_error,32,5
.comm _value_private_sortivot,40,5
	.section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support
EH_frame1:
	.set L$set$0,LECIE1-LSCIE1
	.long L$set$0
LSCIE1:
	.long	0x0
	.byte	0x1
	.ascii "zR\0"
	.byte	0x1
	.byte	0x78
	.byte	0x10
	.byte	0x1
	.byte	0x10
	.byte	0xc
	.byte	0x7
	.byte	0x8
	.byte	0x90
	.byte	0x1
	.align 3
LECIE1:
.globl _type_to_string.eh
_type_to_string.eh:
LSFDE1:
	.set L$set$1,LEFDE1-LASFDE1
	.long L$set$1
LASFDE1:
	.long	LASFDE1-EH_frame1
	.quad	LFB76-.
	.set L$set$2,LFE76-LFB76
	.quad L$set$2
	.byte	0x0
	.byte	0x4
	.set L$set$3,LCFI0-LFB76
	.long L$set$3
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$4,LCFI1-LCFI0
	.long L$set$4
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE1:
.globl _value_init_nil.eh
_value_init_nil.eh:
LSFDE3:
	.set L$set$5,LEFDE3-LASFDE3
	.long L$set$5
LASFDE3:
	.long	LASFDE3-EH_frame1
	.quad	LFB79-.
	.set L$set$6,LFE79-LFB79
	.quad L$set$6
	.byte	0x0
	.byte	0x4
	.set L$set$7,LCFI2-LFB79
	.long L$set$7
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$8,LCFI3-LCFI2
	.long L$set$8
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE3:
.globl _value_init_nil_type.eh
_value_init_nil_type.eh:
LSFDE5:
	.set L$set$9,LEFDE5-LASFDE5
	.long L$set$9
LASFDE5:
	.long	LASFDE5-EH_frame1
	.quad	LFB80-.
	.set L$set$10,LFE80-LFB80
	.quad L$set$10
	.byte	0x0
	.byte	0x4
	.set L$set$11,LCFI4-LFB80
	.long L$set$11
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$12,LCFI5-LCFI4
	.long L$set$12
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE5:
.globl _value_init_error.eh
_value_init_error.eh:
LSFDE7:
	.set L$set$13,LEFDE7-LASFDE7
	.long L$set$13
LASFDE7:
	.long	LASFDE7-EH_frame1
	.quad	LFB81-.
	.set L$set$14,LFE81-LFB81
	.quad L$set$14
	.byte	0x0
	.byte	0x4
	.set L$set$15,LCFI6-LFB81
	.long L$set$15
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$16,LCFI7-LCFI6
	.long L$set$16
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE7:
.globl _value_set_bool.eh
_value_set_bool.eh:
LSFDE9:
	.set L$set$17,LEFDE9-LASFDE9
	.long L$set$17
LASFDE9:
	.long	LASFDE9-EH_frame1
	.quad	LFB85-.
	.set L$set$18,LFE85-LFB85
	.quad L$set$18
	.byte	0x0
	.byte	0x4
	.set L$set$19,LCFI8-LFB85
	.long L$set$19
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$20,LCFI9-LCFI8
	.long L$set$20
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE9:
.globl _value_type.eh
_value_type.eh:
LSFDE11:
	.set L$set$21,LEFDE11-LASFDE11
	.long L$set$21
LASFDE11:
	.long	LASFDE11-EH_frame1
	.quad	LFB108-.
	.set L$set$22,LFE108-LFB108
	.quad L$set$22
	.byte	0x0
	.byte	0x4
	.set L$set$23,LCFI10-LFB108
	.long L$set$23
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$24,LCFI11-LCFI10
	.long L$set$24
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE11:
.globl _value_refer.eh
_value_refer.eh:
LSFDE13:
	.set L$set$25,LEFDE13-LASFDE13
	.long L$set$25
LASFDE13:
	.long	LASFDE13-EH_frame1
	.quad	LFB124-.
	.set L$set$26,LFE124-LFB124
	.quad L$set$26
	.byte	0x0
	.byte	0x4
	.set L$set$27,LCFI12-LFB124
	.long L$set$27
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$28,LCFI13-LCFI12
	.long L$set$28
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE13:
.globl _value_true_p.eh
_value_true_p.eh:
LSFDE15:
	.set L$set$29,LEFDE15-LASFDE15
	.long L$set$29
LASFDE15:
	.long	LASFDE15-EH_frame1
	.quad	LFB110-.
	.set L$set$30,LFE110-LFB110
	.quad L$set$30
	.byte	0x0
	.byte	0x4
	.set L$set$31,LCFI14-LFB110
	.long L$set$31
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$32,LCFI15-LCFI14
	.long L$set$32
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE15:
.globl _value_array_arg.eh
_value_array_arg.eh:
LSFDE17:
	.set L$set$33,LEFDE17-LASFDE17
	.long L$set$33
LASFDE17:
	.long	LASFDE17-EH_frame1
	.quad	LFB96-.
	.set L$set$34,LFE96-LFB96
	.quad L$set$34
	.byte	0x0
	.byte	0x4
	.set L$set$35,LCFI17-LFB96
	.long L$set$35
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$36,LCFI18-LCFI17
	.long L$set$36
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$37,LCFI20-LCFI18
	.long L$set$37
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE17:
.globl _value_hash_arg.eh
_value_hash_arg.eh:
LSFDE19:
	.set L$set$38,LEFDE19-LASFDE19
	.long L$set$38
LASFDE19:
	.long	LASFDE19-EH_frame1
	.quad	LFB98-.
	.set L$set$39,LFE98-LFB98
	.quad L$set$39
	.byte	0x0
	.byte	0x4
	.set L$set$40,LCFI21-LFB98
	.long L$set$40
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$41,LCFI22-LCFI21
	.long L$set$41
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$42,LCFI28-LCFI22
	.long L$set$42
	.byte	0x83
	.byte	0x7
	.byte	0x8c
	.byte	0x6
	.byte	0x8d
	.byte	0x5
	.byte	0x8e
	.byte	0x4
	.byte	0x8f
	.byte	0x3
	.align 3
LEFDE19:
.globl _value_array_id_index.eh
_value_array_id_index.eh:
LSFDE21:
	.set L$set$43,LEFDE21-LASFDE21
	.long L$set$43
LASFDE21:
	.long	LASFDE21-EH_frame1
	.quad	LFB77-.
	.set L$set$44,LFE77-LFB77
	.quad L$set$44
	.byte	0x0
	.byte	0x4
	.set L$set$45,LCFI29-LFB77
	.long L$set$45
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$46,LCFI30-LCFI29
	.long L$set$46
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$47,LCFI34-LCFI30
	.long L$set$47
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE21:
.globl _value_set_double.eh
_value_set_double.eh:
LSFDE23:
	.set L$set$48,LEFDE23-LASFDE23
	.long L$set$48
LASFDE23:
	.long	LASFDE23-EH_frame1
	.quad	LFB88-.
	.set L$set$49,LFE88-LFB88
	.quad L$set$49
	.byte	0x0
	.byte	0x4
	.set L$set$50,LCFI35-LFB88
	.long L$set$50
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$51,LCFI36-LCFI35
	.long L$set$51
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$52,LCFI39-LCFI36
	.long L$set$52
	.byte	0x83
	.byte	0x4
	.byte	0x8c
	.byte	0x3
	.align 3
LEFDE23:
.globl _value_set_ulong.eh
_value_set_ulong.eh:
LSFDE25:
	.set L$set$53,LEFDE25-LASFDE25
	.long L$set$53
LASFDE25:
	.long	LASFDE25-EH_frame1
	.quad	LFB87-.
	.set L$set$54,LFE87-LFB87
	.quad L$set$54
	.byte	0x0
	.byte	0x4
	.set L$set$55,LCFI40-LFB87
	.long L$set$55
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$56,LCFI41-LCFI40
	.long L$set$56
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$57,LCFI43-LCFI41
	.long L$set$57
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE25:
.globl _value_set_long.eh
_value_set_long.eh:
LSFDE27:
	.set L$set$58,LEFDE27-LASFDE27
	.long L$set$58
LASFDE27:
	.long	LASFDE27-EH_frame1
	.quad	LFB86-.
	.set L$set$59,LFE86-LFB86
	.quad L$set$59
	.byte	0x0
	.byte	0x4
	.set L$set$60,LCFI44-LFB86
	.long L$set$60
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$61,LCFI45-LCFI44
	.long L$set$61
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$62,LCFI47-LCFI45
	.long L$set$62
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE27:
.globl _value_list_arg.eh
_value_list_arg.eh:
LSFDE29:
	.set L$set$63,LEFDE29-LASFDE29
	.long L$set$63
LASFDE29:
	.long	LASFDE29-EH_frame1
	.quad	LFB97-.
	.set L$set$64,LFE97-LFB97
	.quad L$set$64
	.byte	0x0
	.byte	0x4
	.set L$set$65,LCFI48-LFB97
	.long L$set$65
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$66,LCFI49-LCFI48
	.long L$set$66
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$67,LCFI55-LCFI49
	.long L$set$67
	.byte	0x83
	.byte	0x7
	.byte	0x8c
	.byte	0x6
	.byte	0x8d
	.byte	0x5
	.byte	0x8e
	.byte	0x4
	.byte	0x8f
	.byte	0x3
	.align 3
LEFDE29:
.globl _init_values.eh
_init_values.eh:
LSFDE31:
	.set L$set$68,LEFDE31-LASFDE31
	.long L$set$68
LASFDE31:
	.long	LASFDE31-EH_frame1
	.quad	LFB74-.
	.set L$set$69,LFE74-LFB74
	.quad L$set$69
	.byte	0x0
	.byte	0x4
	.set L$set$70,LCFI56-LFB74
	.long L$set$70
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$71,LCFI57-LCFI56
	.long L$set$71
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$72,LCFI61-LCFI57
	.long L$set$72
	.byte	0x83
	.byte	0x5
	.byte	0x8c
	.byte	0x4
	.byte	0x8d
	.byte	0x3
	.align 3
LEFDE31:
.globl _value_put.eh
_value_put.eh:
LSFDE33:
	.set L$set$73,LEFDE33-LASFDE33
	.long L$set$73
LASFDE33:
	.long	LASFDE33-EH_frame1
	.quad	LFB133-.
	.set L$set$74,LFE133-LFB133
	.quad L$set$74
	.byte	0x0
	.byte	0x4
	.set L$set$75,LCFI62-LFB133
	.long L$set$75
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$76,LCFI63-LCFI62
	.long L$set$76
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$77,LCFI69-LCFI63
	.long L$set$77
	.byte	0x83
	.byte	0x7
	.byte	0x8c
	.byte	0x6
	.byte	0x8d
	.byte	0x5
	.byte	0x8e
	.byte	0x4
	.byte	0x8f
	.byte	0x3
	.align 3
LEFDE33:
.globl _value_vprintf_generic.eh
_value_vprintf_generic.eh:
LSFDE35:
	.set L$set$78,LEFDE35-LASFDE35
	.long L$set$78
LASFDE35:
	.long	LASFDE35-EH_frame1
	.quad	LFB143-.
	.set L$set$79,LFE143-LFB143
	.quad L$set$79
	.byte	0x0
	.byte	0x4
	.set L$set$80,LCFI70-LFB143
	.long L$set$80
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$81,LCFI71-LCFI70
	.long L$set$81
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$82,LCFI77-LCFI71
	.long L$set$82
	.byte	0x83
	.byte	0x7
	.byte	0x8c
	.byte	0x6
	.byte	0x8d
	.byte	0x5
	.byte	0x8e
	.byte	0x4
	.byte	0x8f
	.byte	0x3
	.align 3
LEFDE35:
.globl _value_sprintf.eh
_value_sprintf.eh:
LSFDE37:
	.set L$set$83,LEFDE37-LASFDE37
	.long L$set$83
LASFDE37:
	.long	LASFDE37-EH_frame1
	.quad	LFB142-.
	.set L$set$84,LFE142-LFB142
	.quad L$set$84
	.byte	0x0
	.byte	0x4
	.set L$set$85,LCFI78-LFB142
	.long L$set$85
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$86,LCFI79-LCFI78
	.long L$set$86
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE37:
.globl _value_vfprintf.eh
_value_vfprintf.eh:
LSFDE39:
	.set L$set$87,LEFDE39-LASFDE39
	.long L$set$87
LASFDE39:
	.long	LASFDE39-EH_frame1
	.quad	LFB141-.
	.set L$set$88,LFE141-LFB141
	.quad L$set$88
	.byte	0x0
	.byte	0x4
	.set L$set$89,LCFI81-LFB141
	.long L$set$89
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$90,LCFI82-LCFI81
	.long L$set$90
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE39:
.globl _value_error.eh
_value_error.eh:
LSFDE41:
	.set L$set$91,LEFDE41-LASFDE41
	.long L$set$91
LASFDE41:
	.long	LASFDE41-EH_frame1
	.quad	LFB144-.
	.set L$set$92,LFE144-LFB144
	.quad L$set$92
	.byte	0x0
	.byte	0x4
	.set L$set$93,LCFI83-LFB144
	.long L$set$93
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$94,LCFI84-LCFI83
	.long L$set$94
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$95,LCFI89-LCFI84
	.long L$set$95
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE41:
.globl _value_get_ulong.eh
_value_get_ulong.eh:
LSFDE43:
	.set L$set$96,LEFDE43-LASFDE43
	.long L$set$96
LASFDE43:
	.long	LASFDE43-EH_frame1
	.quad	LFB132-.
	.set L$set$97,LFE132-LFB132
	.quad L$set$97
	.byte	0x0
	.byte	0x4
	.set L$set$98,LCFI90-LFB132
	.long L$set$98
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$99,LCFI91-LCFI90
	.long L$set$99
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE43:
.globl _value_get_long.eh
_value_get_long.eh:
LSFDE45:
	.set L$set$100,LEFDE45-LASFDE45
	.long L$set$100
LASFDE45:
	.long	LASFDE45-EH_frame1
	.quad	LFB130-.
	.set L$set$101,LFE130-LFB130
	.quad L$set$101
	.byte	0x0
	.byte	0x4
	.set L$set$102,LCFI93-LFB130
	.long L$set$102
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$103,LCFI94-LCFI93
	.long L$set$103
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE45:
.globl _value_get_double.eh
_value_get_double.eh:
LSFDE47:
	.set L$set$104,LEFDE47-LASFDE47
	.long L$set$104
LASFDE47:
	.long	LASFDE47-EH_frame1
	.quad	LFB129-.
	.set L$set$105,LFE129-LFB129
	.quad L$set$105
	.byte	0x0
	.byte	0x4
	.set L$set$106,LCFI96-LFB129
	.long L$set$106
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$107,LCFI97-LCFI96
	.long L$set$107
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE47:
.globl _value_deref.eh
_value_deref.eh:
LSFDE49:
	.set L$set$108,LEFDE49-LASFDE49
	.long L$set$108
LASFDE49:
	.long	LASFDE49-EH_frame1
	.quad	LFB125-.
	.set L$set$109,LFE125-LFB125
	.quad L$set$109
	.byte	0x0
	.byte	0x4
	.set L$set$110,LCFI99-LFB125
	.long L$set$110
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$111,LCFI100-LCFI99
	.long L$set$111
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE49:
.globl _value_import.eh
_value_import.eh:
LSFDE51:
	.set L$set$112,LEFDE51-LASFDE51
	.long L$set$112
LASFDE51:
	.long	LASFDE51-EH_frame1
	.quad	LFB94-.
	.set L$set$113,LFE94-LFB94
	.quad L$set$113
	.byte	0x0
	.byte	0x4
	.set L$set$114,LCFI102-LFB94
	.long L$set$114
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$115,LCFI103-LCFI102
	.long L$set$115
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$116,LCFI108-LCFI103
	.long L$set$116
	.byte	0x8e
	.byte	0x3
	.byte	0x8d
	.byte	0x4
	.byte	0x8c
	.byte	0x5
	.byte	0x83
	.byte	0x6
	.align 3
LEFDE51:
.globl _value_clear.eh
_value_clear.eh:
LSFDE53:
	.set L$set$117,LEFDE53-LASFDE53
	.long L$set$117
LASFDE53:
	.long	LASFDE53-EH_frame1
	.quad	LFB83-.
	.set L$set$118,LFE83-LFB83
	.quad L$set$118
	.byte	0x0
	.byte	0x4
	.set L$set$119,LCFI109-LFB83
	.long L$set$119
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$120,LCFI110-LCFI109
	.long L$set$120
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$121,LCFI115-LCFI110
	.long L$set$121
	.byte	0x8e
	.byte	0x3
	.byte	0x8d
	.byte	0x4
	.byte	0x8c
	.byte	0x5
	.byte	0x83
	.byte	0x6
	.align 3
LEFDE53:
.globl _value_realloc.eh
_value_realloc.eh:
LSFDE55:
	.set L$set$122,LEFDE55-LASFDE55
	.long L$set$122
LASFDE55:
	.long	LASFDE55-EH_frame1
	.quad	LFB93-.
	.set L$set$123,LFE93-LFB93
	.quad L$set$123
	.byte	0x0
	.byte	0x4
	.set L$set$124,LCFI116-LFB93
	.long L$set$124
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$125,LCFI117-LCFI116
	.long L$set$125
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$126,LCFI120-LCFI117
	.long L$set$126
	.byte	0x83
	.byte	0x4
	.byte	0x8c
	.byte	0x3
	.align 3
LEFDE55:
.globl _value_malloc.eh
_value_malloc.eh:
LSFDE57:
	.set L$set$127,LEFDE57-LASFDE57
	.long L$set$127
LASFDE57:
	.long	LASFDE57-EH_frame1
	.quad	LFB92-.
	.set L$set$128,LFE92-LFB92
	.quad L$set$128
	.byte	0x0
	.byte	0x4
	.set L$set$129,LCFI121-LFB92
	.long L$set$129
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$130,LCFI122-LCFI121
	.long L$set$130
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$131,LCFI124-LCFI122
	.long L$set$131
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE57:
.globl _value_init.eh
_value_init.eh:
LSFDE59:
	.set L$set$132,LEFDE59-LASFDE59
	.long L$set$132
LASFDE59:
	.long	LASFDE59-EH_frame1
	.quad	LFB82-.
	.set L$set$133,LFE82-LFB82
	.quad L$set$133
	.byte	0x0
	.byte	0x4
	.set L$set$134,LCFI125-LFB82
	.long L$set$134
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$135,LCFI126-LCFI125
	.long L$set$135
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$136,LCFI129-LCFI126
	.long L$set$136
	.byte	0x83
	.byte	0x4
	.byte	0x8c
	.byte	0x3
	.align 3
LEFDE59:
.globl _missing_arguments.eh
_missing_arguments.eh:
LSFDE61:
	.set L$set$137,LEFDE61-LASFDE61
	.long L$set$137
LASFDE61:
	.long	LASFDE61-EH_frame1
	.quad	LFB75-.
	.set L$set$138,LFE75-LFB75
	.quad L$set$138
	.byte	0x0
	.byte	0x4
	.set L$set$139,LCFI130-LFB75
	.long L$set$139
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$140,LCFI131-LCFI130
	.long L$set$140
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE61:
.globl _value_set_default_prec.eh
_value_set_default_prec.eh:
LSFDE63:
	.set L$set$141,LEFDE63-LASFDE63
	.long L$set$141
LASFDE63:
	.long	LASFDE63-EH_frame1
	.quad	LFB127-.
	.set L$set$142,LFE127-LFB127
	.quad L$set$142
	.byte	0x0
	.byte	0x4
	.set L$set$143,LCFI132-LFB127
	.long L$set$143
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$144,LCFI133-LCFI132
	.long L$set$144
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$145,LCFI135-LCFI133
	.long L$set$145
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE63:
.globl _value_to_string_base.eh
_value_to_string_base.eh:
LSFDE65:
	.set L$set$146,LEFDE65-LASFDE65
	.long L$set$146
LASFDE65:
	.long	LASFDE65-EH_frame1
	.quad	LFB135-.
	.set L$set$147,LFE135-LFB135
	.quad L$set$147
	.byte	0x0
	.byte	0x4
	.set L$set$148,LCFI136-LFB135
	.long L$set$148
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$149,LCFI137-LCFI136
	.long L$set$149
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$150,LCFI140-LCFI137
	.long L$set$150
	.byte	0x83
	.byte	0x4
	.byte	0x8c
	.byte	0x3
	.align 3
LEFDE65:
.globl _value_fprintf.eh
_value_fprintf.eh:
LSFDE67:
	.set L$set$151,LEFDE67-LASFDE67
	.long L$set$151
LASFDE67:
	.long	LASFDE67-EH_frame1
	.quad	LFB140-.
	.set L$set$152,LFE140-LFB140
	.quad L$set$152
	.byte	0x0
	.byte	0x4
	.set L$set$153,LCFI141-LFB140
	.long L$set$153
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$154,LCFI142-LCFI141
	.long L$set$154
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE67:
.globl _value_printf.eh
_value_printf.eh:
LSFDE69:
	.set L$set$155,LEFDE69-LASFDE69
	.long L$set$155
LASFDE69:
	.long	LASFDE69-EH_frame1
	.quad	LFB139-.
	.set L$set$156,LFE139-LFB139
	.quad L$set$156
	.byte	0x0
	.byte	0x4
	.set L$set$157,LCFI144-LFB139
	.long L$set$157
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$158,LCFI145-LCFI144
	.long L$set$158
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE69:
.globl _print_values.eh
_print_values.eh:
LSFDE71:
	.set L$set$159,LEFDE71-LASFDE71
	.long L$set$159
LASFDE71:
	.long	LASFDE71-EH_frame1
	.quad	LFB148-.
	.set L$set$160,LFE148-LFB148
	.quad L$set$160
	.byte	0x0
	.byte	0x4
	.set L$set$161,LCFI147-LFB148
	.long L$set$161
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$162,LCFI148-LCFI147
	.long L$set$162
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$163,LCFI152-LCFI148
	.long L$set$163
	.byte	0x83
	.byte	0x5
	.byte	0x8c
	.byte	0x4
	.byte	0x8d
	.byte	0x3
	.align 3
LEFDE71:
.globl _value_println.eh
_value_println.eh:
LSFDE73:
	.set L$set$164,LEFDE73-LASFDE73
	.long L$set$164
LASFDE73:
	.long	LASFDE73-EH_frame1
	.quad	LFB138-.
	.set L$set$165,LFE138-LFB138
	.quad L$set$165
	.byte	0x0
	.byte	0x4
	.set L$set$166,LCFI153-LFB138
	.long L$set$166
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$167,LCFI154-LCFI153
	.long L$set$167
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE73:
.globl _value_print.eh
_value_print.eh:
LSFDE75:
	.set L$set$168,LEFDE75-LASFDE75
	.long L$set$168
LASFDE75:
	.long	LASFDE75-EH_frame1
	.quad	LFB137-.
	.set L$set$169,LFE137-LFB137
	.quad L$set$169
	.byte	0x0
	.byte	0x4
	.set L$set$170,LCFI156-LFB137
	.long L$set$170
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$171,LCFI157-LCFI156
	.long L$set$171
	.byte	0xd
	.byte	0x6
	.align 3
LEFDE75:
.globl _value_to_string_safe.eh
_value_to_string_safe.eh:
LSFDE77:
	.set L$set$172,LEFDE77-LASFDE77
	.long L$set$172
LASFDE77:
	.long	LASFDE77-EH_frame1
	.quad	LFB136-.
	.set L$set$173,LFE136-LFB136
	.quad L$set$173
	.byte	0x0
	.byte	0x4
	.set L$set$174,LCFI158-LFB136
	.long L$set$174
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$175,LCFI159-LCFI158
	.long L$set$175
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$176,LCFI161-LCFI159
	.long L$set$176
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE77:
.globl _value_to_string.eh
_value_to_string.eh:
LSFDE79:
	.set L$set$177,LEFDE79-LASFDE79
	.long L$set$177
LASFDE79:
	.long	LASFDE79-EH_frame1
	.quad	LFB134-.
	.set L$set$178,LFE134-LFB134
	.quad L$set$178
	.byte	0x0
	.byte	0x4
	.set L$set$179,LCFI162-LFB134
	.long L$set$179
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$180,LCFI163-LCFI162
	.long L$set$180
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$181,LCFI167-LCFI163
	.long L$set$181
	.byte	0x83
	.byte	0x5
	.byte	0x8c
	.byte	0x4
	.byte	0x8d
	.byte	0x3
	.align 3
LEFDE79:
.globl _value_get_string.eh
_value_get_string.eh:
LSFDE81:
	.set L$set$182,LEFDE81-LASFDE81
	.long L$set$182
LASFDE81:
	.long	LASFDE81-EH_frame1
	.quad	LFB131-.
	.set L$set$183,LFE131-LFB131
	.quad L$set$183
	.byte	0x0
	.byte	0x4
	.set L$set$184,LCFI168-LFB131
	.long L$set$184
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$185,LCFI169-LCFI168
	.long L$set$185
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$186,LCFI171-LCFI169
	.long L$set$186
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE81:
.globl _value_set_id.eh
_value_set_id.eh:
LSFDE83:
	.set L$set$187,LEFDE83-LASFDE83
	.long L$set$187
LASFDE83:
	.long	LASFDE83-EH_frame1
	.quad	LFB90-.
	.set L$set$188,LFE90-LFB90
	.quad L$set$188
	.byte	0x0
	.byte	0x4
	.set L$set$189,LCFI172-LFB90
	.long L$set$189
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$190,LCFI173-LCFI172
	.long L$set$190
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$191,LCFI176-LCFI173
	.long L$set$191
	.byte	0x83
	.byte	0x4
	.byte	0x8c
	.byte	0x3
	.align 3
LEFDE83:
.globl _value_set_str_smart.eh
_value_set_str_smart.eh:
LSFDE85:
	.set L$set$192,LEFDE85-LASFDE85
	.long L$set$192
LASFDE85:
	.long	LASFDE85-EH_frame1
	.quad	LFB89-.
	.set L$set$193,LFE89-LFB89
	.quad L$set$193
	.byte	0x0
	.byte	0x4
	.set L$set$194,LCFI177-LFB89
	.long L$set$194
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$195,LCFI178-LCFI177
	.long L$set$195
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$196,LCFI183-LCFI178
	.long L$set$196
	.byte	0x8e
	.byte	0x3
	.byte	0x8d
	.byte	0x4
	.byte	0x8c
	.byte	0x5
	.byte	0x83
	.byte	0x6
	.align 3
LEFDE85:
.globl _value_set.eh
_value_set.eh:
LSFDE87:
	.set L$set$197,LEFDE87-LASFDE87
	.long L$set$197
LASFDE87:
	.long	LASFDE87-EH_frame1
	.quad	LFB84-.
	.set L$set$198,LFE84-LFB84
	.quad L$set$198
	.byte	0x0
	.byte	0x4
	.set L$set$199,LCFI184-LFB84
	.long L$set$199
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$200,LCFI185-LCFI184
	.long L$set$200
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$201,LCFI191-LCFI185
	.long L$set$201
	.byte	0x83
	.byte	0x7
	.byte	0x8c
	.byte	0x6
	.byte	0x8d
	.byte	0x5
	.byte	0x8e
	.byte	0x4
	.byte	0x8f
	.byte	0x3
	.align 3
LEFDE87:
.globl _value_assign.eh
_value_assign.eh:
LSFDE89:
	.set L$set$202,LEFDE89-LASFDE89
	.long L$set$202
LASFDE89:
	.long	LASFDE89-EH_frame1
	.quad	LFB112-.
	.set L$set$203,LFE112-LFB112
	.quad L$set$203
	.byte	0x0
	.byte	0x4
	.set L$set$204,LCFI192-LFB112
	.long L$set$204
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$205,LCFI193-LCFI192
	.long L$set$205
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$206,LCFI195-LCFI193
	.long L$set$206
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE89:
.globl _value_cast.eh
_value_cast.eh:
LSFDE91:
	.set L$set$207,LEFDE91-LASFDE91
	.long L$set$207
LASFDE91:
	.long	LASFDE91-EH_frame1
	.quad	LFB99-.
	.set L$set$208,LFE99-LFB99
	.quad L$set$208
	.byte	0x0
	.byte	0x4
	.set L$set$209,LCFI196-LFB99
	.long L$set$209
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$210,LCFI197-LCFI196
	.long L$set$210
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$211,LCFI203-LCFI197
	.long L$set$211
	.byte	0x83
	.byte	0x7
	.byte	0x8c
	.byte	0x6
	.byte	0x8d
	.byte	0x5
	.byte	0x8e
	.byte	0x4
	.byte	0x8f
	.byte	0x3
	.align 3
LEFDE91:
.globl _value_copy.eh
_value_copy.eh:
LSFDE93:
	.set L$set$212,LEFDE93-LASFDE93
	.long L$set$212
LASFDE93:
	.long	LASFDE93-EH_frame1
	.quad	LFB91-.
	.set L$set$213,LFE91-LFB91
	.quad L$set$213
	.byte	0x0
	.byte	0x4
	.set L$set$214,LCFI204-LFB91
	.long L$set$214
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$215,LCFI205-LCFI204
	.long L$set$215
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$216,LCFI211-LCFI205
	.long L$set$216
	.byte	0x83
	.byte	0x7
	.byte	0x8c
	.byte	0x6
	.byte	0x8d
	.byte	0x5
	.byte	0x8e
	.byte	0x4
	.byte	0x8f
	.byte	0x3
	.align 3
LEFDE93:
.globl _value_array_copy.eh
_value_array_copy.eh:
LSFDE95:
	.set L$set$217,LEFDE95-LASFDE95
	.long L$set$217
LASFDE95:
	.long	LASFDE95-EH_frame1
	.quad	LFB78-.
	.set L$set$218,LFE78-LFB78
	.quad L$set$218
	.byte	0x0
	.byte	0x4
	.set L$set$219,LCFI212-LFB78
	.long L$set$219
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$220,LCFI213-LCFI212
	.long L$set$220
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$221,LCFI219-LCFI213
	.long L$set$221
	.byte	0x83
	.byte	0x7
	.byte	0x8c
	.byte	0x6
	.byte	0x8d
	.byte	0x5
	.byte	0x8e
	.byte	0x4
	.byte	0x8f
	.byte	0x3
	.align 3
LEFDE95:
.globl _value_printf_arg.eh
_value_printf_arg.eh:
LSFDE97:
	.set L$set$222,LEFDE97-LASFDE97
	.long L$set$222
LASFDE97:
	.long	LASFDE97-EH_frame1
	.quad	LFB147-.
	.set L$set$223,LFE147-LFB147
	.quad L$set$223
	.byte	0x0
	.byte	0x4
	.set L$set$224,LCFI220-LFB147
	.long L$set$224
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$225,LCFI221-LCFI220
	.long L$set$225
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$226,LCFI225-LCFI221
	.long L$set$226
	.byte	0x83
	.byte	0x5
	.byte	0x8c
	.byte	0x4
	.byte	0x8d
	.byte	0x3
	.align 3
LEFDE97:
.globl _value_to_a_arg.eh
_value_to_a_arg.eh:
LSFDE99:
	.set L$set$227,LEFDE99-LASFDE99
	.long L$set$227
LASFDE99:
	.long	LASFDE99-EH_frame1
	.quad	LFB100-.
	.set L$set$228,LFE100-LFB100
	.quad L$set$228
	.byte	0x0
	.byte	0x4
	.set L$set$229,LCFI226-LFB100
	.long L$set$229
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$230,LCFI227-LCFI226
	.long L$set$230
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$231,LCFI229-LCFI227
	.long L$set$231
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE99:
.globl _value_import_arg.eh
_value_import_arg.eh:
LSFDE101:
	.set L$set$232,LEFDE101-LASFDE101
	.long L$set$232
LASFDE101:
	.long	LASFDE101-EH_frame1
	.quad	LFB95-.
	.set L$set$233,LFE95-LFB95
	.quad L$set$233
	.byte	0x0
	.byte	0x4
	.set L$set$234,LCFI230-LFB95
	.long L$set$234
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$235,LCFI231-LCFI230
	.long L$set$235
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$236,LCFI233-LCFI231
	.long L$set$236
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE101:
.globl _value_println_arg.eh
_value_println_arg.eh:
LSFDE103:
	.set L$set$237,LEFDE103-LASFDE103
	.long L$set$237
LASFDE103:
	.long	LASFDE103-EH_frame1
	.quad	LFB146-.
	.set L$set$238,LFE146-LFB146
	.quad L$set$238
	.byte	0x0
	.byte	0x4
	.set L$set$239,LCFI234-LFB146
	.long L$set$239
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$240,LCFI235-LCFI234
	.long L$set$240
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$241,LCFI240-LCFI235
	.long L$set$241
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE103:
.globl _value_print_arg.eh
_value_print_arg.eh:
LSFDE105:
	.set L$set$242,LEFDE105-LASFDE105
	.long L$set$242
LASFDE105:
	.long	LASFDE105-EH_frame1
	.quad	LFB145-.
	.set L$set$243,LFE145-LFB145
	.quad L$set$243
	.byte	0x0
	.byte	0x4
	.set L$set$244,LCFI241-LFB145
	.long L$set$244
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$245,LCFI242-LCFI241
	.long L$set$245
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$246,LCFI245-LCFI242
	.long L$set$246
	.byte	0x83
	.byte	0x4
	.byte	0x8c
	.byte	0x3
	.align 3
LEFDE105:
.globl _value_set_default_prec_arg.eh
_value_set_default_prec_arg.eh:
LSFDE107:
	.set L$set$247,LEFDE107-LASFDE107
	.long L$set$247
LASFDE107:
	.long	LASFDE107-EH_frame1
	.quad	LFB128-.
	.set L$set$248,LFE128-LFB128
	.quad L$set$248
	.byte	0x0
	.byte	0x4
	.set L$set$249,LCFI246-LFB128
	.long L$set$249
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$250,LCFI247-LCFI246
	.long L$set$250
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$251,LCFI249-LCFI247
	.long L$set$251
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE107:
.globl _value_refer_arg.eh
_value_refer_arg.eh:
LSFDE109:
	.set L$set$252,LEFDE109-LASFDE109
	.long L$set$252
LASFDE109:
	.long	LASFDE109-EH_frame1
	.quad	LFB126-.
	.set L$set$253,LFE126-LFB126
	.quad L$set$253
	.byte	0x0
	.byte	0x4
	.set L$set$254,LCFI250-LFB126
	.long L$set$254
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$255,LCFI251-LCFI250
	.long L$set$255
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$256,LCFI253-LCFI251
	.long L$set$256
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE109:
.globl _value_to_l_arg.eh
_value_to_l_arg.eh:
LSFDE111:
	.set L$set$257,LEFDE111-LASFDE111
	.long L$set$257
LASFDE111:
	.long	LASFDE111-EH_frame1
	.quad	LFB104-.
	.set L$set$258,LFE104-LFB104
	.quad L$set$258
	.byte	0x0
	.byte	0x4
	.set L$set$259,LCFI254-LFB104
	.long L$set$259
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$260,LCFI255-LCFI254
	.long L$set$260
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$261,LCFI257-LCFI255
	.long L$set$261
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE111:
.globl _value_to_i_arg.eh
_value_to_i_arg.eh:
LSFDE113:
	.set L$set$262,LEFDE113-LASFDE113
	.long L$set$262
LASFDE113:
	.long	LASFDE113-EH_frame1
	.quad	LFB103-.
	.set L$set$263,LFE103-LFB103
	.quad L$set$263
	.byte	0x0
	.byte	0x4
	.set L$set$264,LCFI258-LFB103
	.long L$set$264
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$265,LCFI259-LCFI258
	.long L$set$265
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$266,LCFI261-LCFI259
	.long L$set$266
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE113:
.globl _value_to_h_arg.eh
_value_to_h_arg.eh:
LSFDE115:
	.set L$set$267,LEFDE115-LASFDE115
	.long L$set$267
LASFDE115:
	.long	LASFDE115-EH_frame1
	.quad	LFB102-.
	.set L$set$268,LFE102-LFB102
	.quad L$set$268
	.byte	0x0
	.byte	0x4
	.set L$set$269,LCFI262-LFB102
	.long L$set$269
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$270,LCFI263-LCFI262
	.long L$set$270
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$271,LCFI265-LCFI263
	.long L$set$271
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE115:
.globl _value_to_f_arg.eh
_value_to_f_arg.eh:
LSFDE117:
	.set L$set$272,LEFDE117-LASFDE117
	.long L$set$272
LASFDE117:
	.long	LASFDE117-EH_frame1
	.quad	LFB101-.
	.set L$set$273,LFE101-LFB101
	.quad L$set$273
	.byte	0x0
	.byte	0x4
	.set L$set$274,LCFI266-LFB101
	.long L$set$274
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$275,LCFI267-LCFI266
	.long L$set$275
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$276,LCFI269-LCFI267
	.long L$set$276
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE117:
.globl _value_assign_sub_arg.eh
_value_assign_sub_arg.eh:
LSFDE119:
	.set L$set$277,LEFDE119-LASFDE119
	.long L$set$277
LASFDE119:
	.long	LASFDE119-EH_frame1
	.quad	LFB115-.
	.set L$set$278,LFE115-LFB115
	.quad L$set$278
	.byte	0x0
	.byte	0x4
	.set L$set$279,LCFI270-LFB115
	.long L$set$279
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$280,LCFI271-LCFI270
	.long L$set$280
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$281,LCFI276-LCFI271
	.long L$set$281
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE119:
.globl _value_assign_add_arg.eh
_value_assign_add_arg.eh:
LSFDE121:
	.set L$set$282,LEFDE121-LASFDE121
	.long L$set$282
LASFDE121:
	.long	LASFDE121-EH_frame1
	.quad	LFB114-.
	.set L$set$283,LFE114-LFB114
	.quad L$set$283
	.byte	0x0
	.byte	0x4
	.set L$set$284,LCFI277-LFB114
	.long L$set$284
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$285,LCFI278-LCFI277
	.long L$set$285
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$286,LCFI283-LCFI278
	.long L$set$286
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE121:
.globl _value_assign_arg.eh
_value_assign_arg.eh:
LSFDE123:
	.set L$set$287,LEFDE123-LASFDE123
	.long L$set$287
LASFDE123:
	.long	LASFDE123-EH_frame1
	.quad	LFB113-.
	.set L$set$288,LFE113-LFB113
	.quad L$set$288
	.byte	0x0
	.byte	0x4
	.set L$set$289,LCFI284-LFB113
	.long L$set$289
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$290,LCFI285-LCFI284
	.long L$set$290
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$291,LCFI289-LCFI285
	.long L$set$291
	.byte	0x83
	.byte	0x5
	.byte	0x8c
	.byte	0x4
	.byte	0x8d
	.byte	0x3
	.align 3
LEFDE123:
.globl _value_true_p_arg.eh
_value_true_p_arg.eh:
LSFDE125:
	.set L$set$292,LEFDE125-LASFDE125
	.long L$set$292
LASFDE125:
	.long	LASFDE125-EH_frame1
	.quad	LFB111-.
	.set L$set$293,LFE111-LFB111
	.quad L$set$293
	.byte	0x0
	.byte	0x4
	.set L$set$294,LCFI290-LFB111
	.long L$set$294
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$295,LCFI291-LCFI290
	.long L$set$295
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$296,LCFI293-LCFI291
	.long L$set$296
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE125:
.globl _value_type_arg.eh
_value_type_arg.eh:
LSFDE127:
	.set L$set$297,LEFDE127-LASFDE127
	.long L$set$297
LASFDE127:
	.long	LASFDE127-EH_frame1
	.quad	LFB109-.
	.set L$set$298,LFE109-LFB109
	.quad L$set$298
	.byte	0x0
	.byte	0x4
	.set L$set$299,LCFI294-LFB109
	.long L$set$299
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$300,LCFI295-LCFI294
	.long L$set$300
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$301,LCFI297-LCFI295
	.long L$set$301
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE127:
.globl _value_to_s_base_arg.eh
_value_to_s_base_arg.eh:
LSFDE129:
	.set L$set$302,LEFDE129-LASFDE129
	.long L$set$302
LASFDE129:
	.long	LASFDE129-EH_frame1
	.quad	LFB107-.
	.set L$set$303,LFE107-LFB107
	.quad L$set$303
	.byte	0x0
	.byte	0x4
	.set L$set$304,LCFI298-LFB107
	.long L$set$304
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$305,LCFI299-LCFI298
	.long L$set$305
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$306,LCFI301-LCFI299
	.long L$set$306
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE129:
.globl _value_to_s_arg.eh
_value_to_s_arg.eh:
LSFDE131:
	.set L$set$307,LEFDE131-LASFDE131
	.long L$set$307
LASFDE131:
	.long	LASFDE131-EH_frame1
	.quad	LFB106-.
	.set L$set$308,LFE106-LFB106
	.quad L$set$308
	.byte	0x0
	.byte	0x4
	.set L$set$309,LCFI302-LFB106
	.long L$set$309
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$310,LCFI303-LCFI302
	.long L$set$310
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$311,LCFI305-LCFI303
	.long L$set$311
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE131:
.globl _value_to_r_arg.eh
_value_to_r_arg.eh:
LSFDE133:
	.set L$set$312,LEFDE133-LASFDE133
	.long L$set$312
LASFDE133:
	.long	LASFDE133-EH_frame1
	.quad	LFB105-.
	.set L$set$313,LFE105-LFB105
	.quad L$set$313
	.byte	0x0
	.byte	0x4
	.set L$set$314,LCFI306-LFB105
	.long L$set$314
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$315,LCFI307-LCFI306
	.long L$set$315
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$316,LCFI309-LCFI307
	.long L$set$316
	.byte	0x83
	.byte	0x3
	.align 3
LEFDE133:
.globl _value_assign_shr_arg.eh
_value_assign_shr_arg.eh:
LSFDE135:
	.set L$set$317,LEFDE135-LASFDE135
	.long L$set$317
LASFDE135:
	.long	LASFDE135-EH_frame1
	.quad	LFB123-.
	.set L$set$318,LFE123-LFB123
	.quad L$set$318
	.byte	0x0
	.byte	0x4
	.set L$set$319,LCFI310-LFB123
	.long L$set$319
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$320,LCFI311-LCFI310
	.long L$set$320
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$321,LCFI316-LCFI311
	.long L$set$321
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE135:
.globl _value_assign_shl_arg.eh
_value_assign_shl_arg.eh:
LSFDE137:
	.set L$set$322,LEFDE137-LASFDE137
	.long L$set$322
LASFDE137:
	.long	LASFDE137-EH_frame1
	.quad	LFB122-.
	.set L$set$323,LFE122-LFB122
	.quad L$set$323
	.byte	0x0
	.byte	0x4
	.set L$set$324,LCFI317-LFB122
	.long L$set$324
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$325,LCFI318-LCFI317
	.long L$set$325
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$326,LCFI323-LCFI318
	.long L$set$326
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE137:
.globl _value_assign_or_arg.eh
_value_assign_or_arg.eh:
LSFDE139:
	.set L$set$327,LEFDE139-LASFDE139
	.long L$set$327
LASFDE139:
	.long	LASFDE139-EH_frame1
	.quad	LFB121-.
	.set L$set$328,LFE121-LFB121
	.quad L$set$328
	.byte	0x0
	.byte	0x4
	.set L$set$329,LCFI324-LFB121
	.long L$set$329
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$330,LCFI325-LCFI324
	.long L$set$330
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$331,LCFI330-LCFI325
	.long L$set$331
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE139:
.globl _value_assign_xor_arg.eh
_value_assign_xor_arg.eh:
LSFDE141:
	.set L$set$332,LEFDE141-LASFDE141
	.long L$set$332
LASFDE141:
	.long	LASFDE141-EH_frame1
	.quad	LFB120-.
	.set L$set$333,LFE120-LFB120
	.quad L$set$333
	.byte	0x0
	.byte	0x4
	.set L$set$334,LCFI331-LFB120
	.long L$set$334
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$335,LCFI332-LCFI331
	.long L$set$335
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$336,LCFI337-LCFI332
	.long L$set$336
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE141:
.globl _value_assign_and_arg.eh
_value_assign_and_arg.eh:
LSFDE143:
	.set L$set$337,LEFDE143-LASFDE143
	.long L$set$337
LASFDE143:
	.long	LASFDE143-EH_frame1
	.quad	LFB119-.
	.set L$set$338,LFE119-LFB119
	.quad L$set$338
	.byte	0x0
	.byte	0x4
	.set L$set$339,LCFI338-LFB119
	.long L$set$339
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$340,LCFI339-LCFI338
	.long L$set$340
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$341,LCFI344-LCFI339
	.long L$set$341
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE143:
.globl _value_assign_mod_arg.eh
_value_assign_mod_arg.eh:
LSFDE145:
	.set L$set$342,LEFDE145-LASFDE145
	.long L$set$342
LASFDE145:
	.long	LASFDE145-EH_frame1
	.quad	LFB118-.
	.set L$set$343,LFE118-LFB118
	.quad L$set$343
	.byte	0x0
	.byte	0x4
	.set L$set$344,LCFI345-LFB118
	.long L$set$344
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$345,LCFI346-LCFI345
	.long L$set$345
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$346,LCFI351-LCFI346
	.long L$set$346
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE145:
.globl _value_assign_div_arg.eh
_value_assign_div_arg.eh:
LSFDE147:
	.set L$set$347,LEFDE147-LASFDE147
	.long L$set$347
LASFDE147:
	.long	LASFDE147-EH_frame1
	.quad	LFB117-.
	.set L$set$348,LFE117-LFB117
	.quad L$set$348
	.byte	0x0
	.byte	0x4
	.set L$set$349,LCFI352-LFB117
	.long L$set$349
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$350,LCFI353-LCFI352
	.long L$set$350
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$351,LCFI358-LCFI353
	.long L$set$351
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE147:
.globl _value_assign_mul_arg.eh
_value_assign_mul_arg.eh:
LSFDE149:
	.set L$set$352,LEFDE149-LASFDE149
	.long L$set$352
LASFDE149:
	.long	LASFDE149-EH_frame1
	.quad	LFB116-.
	.set L$set$353,LFE116-LFB116
	.quad L$set$353
	.byte	0x0
	.byte	0x4
	.set L$set$354,LCFI359-LFB116
	.long L$set$354
	.byte	0xe
	.byte	0x10
	.byte	0x86
	.byte	0x2
	.byte	0x4
	.set L$set$355,LCFI360-LCFI359
	.long L$set$355
	.byte	0xd
	.byte	0x6
	.byte	0x4
	.set L$set$356,LCFI365-LCFI360
	.long L$set$356
	.byte	0x83
	.byte	0x6
	.byte	0x8c
	.byte	0x5
	.byte	0x8d
	.byte	0x4
	.byte	0x8e
	.byte	0x3
	.align 3
LEFDE149:
	.subsections_via_symbols
